<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="10.2204%" y="373" width="0.1002%" height="15" fill="rgb(227,0,7)" fg:x="102306918" fg:w="1003009"/><text x="10.4704%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="10.2204%" y="357" width="0.1002%" height="15" fill="rgb(217,0,24)" fg:x="102306918" fg:w="1003009"/><text x="10.4704%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="10.2204%" y="341" width="0.1002%" height="15" fill="rgb(221,193,54)" fg:x="102306918" fg:w="1003009"/><text x="10.4704%" y="351.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (3,009,027 samples, 0.30%)</title><rect x="10.3206%" y="373" width="0.3006%" height="15" fill="rgb(248,212,6)" fg:x="103309927" fg:w="3009027"/><text x="10.5706%" y="383.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (85,255,765 samples, 8.52%)</title><rect x="2.2044%" y="405" width="8.5170%" height="15" fill="rgb(208,68,35)" fg:x="22066198" fg:w="85255765"/><text x="2.4544%" y="415.50">&lt;core::str::..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (73,219,657 samples, 7.31%)</title><rect x="3.4068%" y="389" width="7.3146%" height="15" fill="rgb(232,128,0)" fg:x="34102306" fg:w="73219657"/><text x="3.6568%" y="399.50">core::str:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="10.6212%" y="373" width="0.1002%" height="15" fill="rgb(207,160,47)" fg:x="106318954" fg:w="1003009"/><text x="10.8712%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="10.6212%" y="357" width="0.1002%" height="15" fill="rgb(228,23,34)" fg:x="106318954" fg:w="1003009"/><text x="10.8712%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="10.6212%" y="341" width="0.1002%" height="15" fill="rgb(218,30,26)" fg:x="106318954" fg:w="1003009"/><text x="10.8712%" y="351.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (108,324,972 samples, 10.82%)</title><rect x="0.3006%" y="437" width="10.8216%" height="15" fill="rgb(220,122,19)" fg:x="3009027" fg:w="108324972"/><text x="0.5506%" y="447.50">&lt;core::str::iter..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (105,315,945 samples, 10.52%)</title><rect x="0.6012%" y="421" width="10.5210%" height="15" fill="rgb(250,228,42)" fg:x="6018054" fg:w="105315945"/><text x="0.8512%" y="431.50">core::str::iter..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (4,012,036 samples, 0.40%)</title><rect x="10.7214%" y="405" width="0.4008%" height="15" fill="rgb(240,193,28)" fg:x="107321963" fg:w="4012036"/><text x="10.9714%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (4,012,036 samples, 0.40%)</title><rect x="10.7214%" y="389" width="0.4008%" height="15" fill="rgb(216,20,37)" fg:x="107321963" fg:w="4012036"/><text x="10.9714%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (127,382,143 samples, 12.73%)</title><rect x="0.2004%" y="453" width="12.7255%" height="15" fill="rgb(206,188,39)" fg:x="2006018" fg:w="127382143"/><text x="0.4504%" y="463.50">&lt;core::iter::adapte..</text></g><g><title>core::option::Option&lt;T&gt;::map (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="437" width="1.8036%" height="15" fill="rgb(217,207,13)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="447.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="421" width="1.8036%" height="15" fill="rgb(231,73,38)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="431.50">c..</text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="405" width="1.8036%" height="15" fill="rgb(225,20,46)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="415.50">a..</text></g><g><title>core::str::&lt;impl str&gt;::parse (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="389" width="1.8036%" height="15" fill="rgb(210,31,41)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="399.50">c..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="373" width="1.8036%" height="15" fill="rgb(221,200,47)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="383.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="357" width="1.8036%" height="15" fill="rgb(226,26,5)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="367.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (18,054,162 samples, 1.80%)</title><rect x="11.1222%" y="341" width="1.8036%" height="15" fill="rgb(249,33,26)" fg:x="111333999" fg:w="18054162"/><text x="11.3722%" y="351.50">c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (7,021,063 samples, 0.70%)</title><rect x="12.2244%" y="325" width="0.7014%" height="15" fill="rgb(235,183,28)" fg:x="122367098" fg:w="7021063"/><text x="12.4744%" y="335.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (5,015,045 samples, 0.50%)</title><rect x="12.4248%" y="309" width="0.5010%" height="15" fill="rgb(221,5,38)" fg:x="124373116" fg:w="5015045"/><text x="12.6748%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,003,009 samples, 0.10%)</title><rect x="12.9259%" y="453" width="0.1002%" height="15" fill="rgb(247,18,42)" fg:x="129388161" fg:w="1003009"/><text x="13.1759%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (139,418,251 samples, 13.93%)</title><rect x="0.0000%" y="501" width="13.9279%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="139418251"/><text x="0.2500%" y="511.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (139,418,251 samples, 13.93%)</title><rect x="0.0000%" y="485" width="13.9279%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="139418251"/><text x="0.2500%" y="495.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (139,418,251 samples, 13.93%)</title><rect x="0.0000%" y="469" width="13.9279%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="139418251"/><text x="0.2500%" y="479.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>core::ptr::write (9,027,081 samples, 0.90%)</title><rect x="13.0261%" y="453" width="0.9018%" height="15" fill="rgb(238,160,17)" fg:x="130391170" fg:w="9027081"/><text x="13.2761%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="19.6393%" y="421" width="0.1002%" height="15" fill="rgb(214,148,48)" fg:x="196589764" fg:w="1003009"/><text x="19.8893%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="19.6393%" y="405" width="0.1002%" height="15" fill="rgb(232,36,49)" fg:x="196589764" fg:w="1003009"/><text x="19.8893%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="19.6393%" y="389" width="0.1002%" height="15" fill="rgb(209,103,24)" fg:x="196589764" fg:w="1003009"/><text x="19.8893%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="19.7395%" y="421" width="0.1002%" height="15" fill="rgb(229,88,8)" fg:x="197592773" fg:w="1003009"/><text x="19.9895%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="19.7395%" y="405" width="0.1002%" height="15" fill="rgb(213,181,19)" fg:x="197592773" fg:w="1003009"/><text x="19.9895%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="19.7395%" y="389" width="0.1002%" height="15" fill="rgb(254,191,54)" fg:x="197592773" fg:w="1003009"/><text x="19.9895%" y="399.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (47,141,423 samples, 4.71%)</title><rect x="15.3307%" y="453" width="4.7094%" height="15" fill="rgb(241,83,37)" fg:x="153460377" fg:w="47141423"/><text x="15.5807%" y="463.50">&lt;core..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (41,123,369 samples, 4.11%)</title><rect x="15.9319%" y="437" width="4.1082%" height="15" fill="rgb(233,36,39)" fg:x="159478431" fg:w="41123369"/><text x="16.1819%" y="447.50">core..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="19.8397%" y="421" width="0.2004%" height="15" fill="rgb(226,3,54)" fg:x="198595782" fg:w="2006018"/><text x="20.0897%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="19.8397%" y="405" width="0.2004%" height="15" fill="rgb(245,192,40)" fg:x="198595782" fg:w="2006018"/><text x="20.0897%" y="415.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (61,183,549 samples, 6.11%)</title><rect x="14.1283%" y="485" width="6.1122%" height="15" fill="rgb(238,167,29)" fg:x="141424269" fg:w="61183549"/><text x="14.3783%" y="495.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (61,183,549 samples, 6.11%)</title><rect x="14.1283%" y="469" width="6.1122%" height="15" fill="rgb(232,182,51)" fg:x="141424269" fg:w="61183549"/><text x="14.3783%" y="479.50">core::st..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (2,006,018 samples, 0.20%)</title><rect x="20.0401%" y="453" width="0.2004%" height="15" fill="rgb(231,60,39)" fg:x="200601800" fg:w="2006018"/><text x="20.2901%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71,213,639 samples, 7.11%)</title><rect x="13.9279%" y="501" width="7.1142%" height="15" fill="rgb(208,69,12)" fg:x="139418251" fg:w="71213639"/><text x="14.1779%" y="511.50">&lt;core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::map (8,024,072 samples, 0.80%)</title><rect x="20.2405%" y="485" width="0.8016%" height="15" fill="rgb(235,93,37)" fg:x="202607818" fg:w="8024072"/><text x="20.4905%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,021,063 samples, 0.70%)</title><rect x="20.3407%" y="469" width="0.7014%" height="15" fill="rgb(213,116,39)" fg:x="203610827" fg:w="7021063"/><text x="20.5907%" y="479.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="20.3407%" y="453" width="0.7014%" height="15" fill="rgb(222,207,29)" fg:x="203610827" fg:w="7021063"/><text x="20.5907%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (7,021,063 samples, 0.70%)</title><rect x="20.3407%" y="437" width="0.7014%" height="15" fill="rgb(206,96,30)" fg:x="203610827" fg:w="7021063"/><text x="20.5907%" y="447.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (7,021,063 samples, 0.70%)</title><rect x="20.3407%" y="421" width="0.7014%" height="15" fill="rgb(218,138,4)" fg:x="203610827" fg:w="7021063"/><text x="20.5907%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (7,021,063 samples, 0.70%)</title><rect x="20.3407%" y="405" width="0.7014%" height="15" fill="rgb(250,191,14)" fg:x="203610827" fg:w="7021063"/><text x="20.5907%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (7,021,063 samples, 0.70%)</title><rect x="20.3407%" y="389" width="0.7014%" height="15" fill="rgb(239,60,40)" fg:x="203610827" fg:w="7021063"/><text x="20.5907%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (4,012,036 samples, 0.40%)</title><rect x="20.6413%" y="373" width="0.4008%" height="15" fill="rgb(206,27,48)" fg:x="206619854" fg:w="4012036"/><text x="20.8913%" y="383.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="20.8417%" y="357" width="0.2004%" height="15" fill="rgb(225,35,8)" fg:x="208625872" fg:w="2006018"/><text x="21.0917%" y="367.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="421" width="0.1002%" height="15" fill="rgb(250,213,24)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="431.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="405" width="0.1002%" height="15" fill="rgb(247,123,22)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="415.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="389" width="0.1002%" height="15" fill="rgb(231,138,38)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="399.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="373" width="0.1002%" height="15" fill="rgb(231,145,46)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="383.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="357" width="0.1002%" height="15" fill="rgb(251,118,11)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="367.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="341" width="0.1002%" height="15" fill="rgb(217,147,25)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="351.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="325" width="0.1002%" height="15" fill="rgb(247,81,37)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="335.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="309" width="0.1002%" height="15" fill="rgb(209,12,38)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="319.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="21.8437%" y="293" width="0.1002%" height="15" fill="rgb(227,1,9)" fg:x="218655962" fg:w="1003009"/><text x="22.0937%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="21.9439%" y="421" width="0.8016%" height="15" fill="rgb(248,47,43)" fg:x="219658971" fg:w="8024072"/><text x="22.1939%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="21.9439%" y="405" width="0.8016%" height="15" fill="rgb(221,10,30)" fg:x="219658971" fg:w="8024072"/><text x="22.1939%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,024,072 samples, 0.80%)</title><rect x="21.9439%" y="389" width="0.8016%" height="15" fill="rgb(210,229,1)" fg:x="219658971" fg:w="8024072"/><text x="22.1939%" y="399.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="22.1443%" y="373" width="0.6012%" height="15" fill="rgb(222,148,37)" fg:x="221664989" fg:w="6018054"/><text x="22.3943%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="22.7455%" y="421" width="0.2004%" height="15" fill="rgb(234,67,33)" fg:x="227683043" fg:w="2006018"/><text x="22.9955%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="22.7455%" y="405" width="0.2004%" height="15" fill="rgb(247,98,35)" fg:x="227683043" fg:w="2006018"/><text x="22.9955%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2,006,018 samples, 0.20%)</title><rect x="22.7455%" y="389" width="0.2004%" height="15" fill="rgb(247,138,52)" fg:x="227683043" fg:w="2006018"/><text x="22.9955%" y="399.50"></text></g><g><title>core::cmp::Ord::min (3,009,027 samples, 0.30%)</title><rect x="23.9479%" y="373" width="0.3006%" height="15" fill="rgb(213,79,30)" fg:x="239719151" fg:w="3009027"/><text x="24.1979%" y="383.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (5,015,045 samples, 0.50%)</title><rect x="24.2485%" y="373" width="0.5010%" height="15" fill="rgb(246,177,23)" fg:x="242728178" fg:w="5015045"/><text x="24.4985%" y="383.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (41,123,369 samples, 4.11%)</title><rect x="21.0421%" y="469" width="4.1082%" height="15" fill="rgb(230,62,27)" fg:x="210631890" fg:w="41123369"/><text x="21.2921%" y="479.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (41,123,369 samples, 4.11%)</title><rect x="21.0421%" y="453" width="4.1082%" height="15" fill="rgb(216,154,8)" fg:x="210631890" fg:w="41123369"/><text x="21.2921%" y="463.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (36,108,324 samples, 3.61%)</title><rect x="21.5431%" y="437" width="3.6072%" height="15" fill="rgb(244,35,45)" fg:x="215646935" fg:w="36108324"/><text x="21.7931%" y="447.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (22,066,198 samples, 2.20%)</title><rect x="22.9459%" y="421" width="2.2044%" height="15" fill="rgb(251,115,12)" fg:x="229689061" fg:w="22066198"/><text x="23.1959%" y="431.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (19,057,171 samples, 1.90%)</title><rect x="23.2465%" y="405" width="1.9038%" height="15" fill="rgb(240,54,50)" fg:x="232698088" fg:w="19057171"/><text x="23.4965%" y="415.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (17,051,153 samples, 1.70%)</title><rect x="23.4469%" y="389" width="1.7034%" height="15" fill="rgb(233,84,52)" fg:x="234704106" fg:w="17051153"/><text x="23.6969%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (4,012,036 samples, 0.40%)</title><rect x="24.7495%" y="373" width="0.4008%" height="15" fill="rgb(207,117,47)" fg:x="247743223" fg:w="4012036"/><text x="24.9995%" y="383.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (43,129,387 samples, 4.31%)</title><rect x="21.0421%" y="501" width="4.3086%" height="15" fill="rgb(249,43,39)" fg:x="210631890" fg:w="43129387"/><text x="21.2921%" y="511.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43,129,387 samples, 4.31%)</title><rect x="21.0421%" y="485" width="4.3086%" height="15" fill="rgb(209,38,44)" fg:x="210631890" fg:w="43129387"/><text x="21.2921%" y="495.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,006,018 samples, 0.20%)</title><rect x="25.1503%" y="469" width="0.2004%" height="15" fill="rgb(236,212,23)" fg:x="251755259" fg:w="2006018"/><text x="25.4003%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,006,018 samples, 0.20%)</title><rect x="25.1503%" y="453" width="0.2004%" height="15" fill="rgb(242,79,21)" fg:x="251755259" fg:w="2006018"/><text x="25.4003%" y="463.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2,006,018 samples, 0.20%)</title><rect x="25.1503%" y="437" width="0.2004%" height="15" fill="rgb(211,96,35)" fg:x="251755259" fg:w="2006018"/><text x="25.4003%" y="447.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2,006,018 samples, 0.20%)</title><rect x="25.1503%" y="421" width="0.2004%" height="15" fill="rgb(253,215,40)" fg:x="251755259" fg:w="2006018"/><text x="25.4003%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,003,009 samples, 0.10%)</title><rect x="25.2505%" y="405" width="0.1002%" height="15" fill="rgb(211,81,21)" fg:x="252758268" fg:w="1003009"/><text x="25.5005%" y="415.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.10%)</title><rect x="25.2505%" y="389" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="252758268" fg:w="1003009"/><text x="25.5005%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.10%)</title><rect x="25.2505%" y="373" width="0.1002%" height="15" fill="rgb(235,213,38)" fg:x="252758268" fg:w="1003009"/><text x="25.5005%" y="383.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,003,009 samples, 0.10%)</title><rect x="25.2505%" y="357" width="0.1002%" height="15" fill="rgb(237,122,38)" fg:x="252758268" fg:w="1003009"/><text x="25.5005%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,003,009 samples, 0.10%)</title><rect x="25.2505%" y="341" width="0.1002%" height="15" fill="rgb(244,218,35)" fg:x="252758268" fg:w="1003009"/><text x="25.5005%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="28.1563%" y="485" width="0.1002%" height="15" fill="rgb(240,68,47)" fg:x="281845529" fg:w="1003009"/><text x="28.4063%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="28.1563%" y="469" width="0.1002%" height="15" fill="rgb(210,16,53)" fg:x="281845529" fg:w="1003009"/><text x="28.4063%" y="479.50"></text></g><g><title>ahash::operations::folded_multiply (8,024,072 samples, 0.80%)</title><rect x="29.5591%" y="325" width="0.8016%" height="15" fill="rgb(235,124,12)" fg:x="295887655" fg:w="8024072"/><text x="29.8091%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (11,033,099 samples, 1.10%)</title><rect x="29.5591%" y="341" width="1.1022%" height="15" fill="rgb(224,169,11)" fg:x="295887655" fg:w="11033099"/><text x="29.8091%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.30%)</title><rect x="30.3607%" y="325" width="0.3006%" height="15" fill="rgb(250,166,2)" fg:x="303911727" fg:w="3009027"/><text x="30.6107%" y="335.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (16,048,144 samples, 1.60%)</title><rect x="30.6613%" y="341" width="1.6032%" height="15" fill="rgb(242,216,29)" fg:x="306920754" fg:w="16048144"/><text x="30.9113%" y="351.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (16,048,144 samples, 1.60%)</title><rect x="30.6613%" y="325" width="1.6032%" height="15" fill="rgb(230,116,27)" fg:x="306920754" fg:w="16048144"/><text x="30.9113%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="32.2645%" y="293" width="0.3006%" height="15" fill="rgb(228,99,48)" fg:x="322968898" fg:w="3009027"/><text x="32.5145%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="32.2645%" y="277" width="0.3006%" height="15" fill="rgb(253,11,6)" fg:x="322968898" fg:w="3009027"/><text x="32.5145%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="32.2645%" y="261" width="0.3006%" height="15" fill="rgb(247,143,39)" fg:x="322968898" fg:w="3009027"/><text x="32.5145%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="32.2645%" y="245" width="0.3006%" height="15" fill="rgb(236,97,10)" fg:x="322968898" fg:w="3009027"/><text x="32.5145%" y="255.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (12,036,108 samples, 1.20%)</title><rect x="32.5651%" y="261" width="1.2024%" height="15" fill="rgb(233,208,19)" fg:x="325977925" fg:w="12036108"/><text x="32.8151%" y="271.50"></text></g><g><title>ahash::operations::folded_multiply (7,021,063 samples, 0.70%)</title><rect x="33.0661%" y="245" width="0.7014%" height="15" fill="rgb(216,164,2)" fg:x="330992970" fg:w="7021063"/><text x="33.3161%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (55,165,495 samples, 5.51%)</title><rect x="29.5591%" y="373" width="5.5110%" height="15" fill="rgb(220,129,5)" fg:x="295887655" fg:w="55165495"/><text x="29.8091%" y="383.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (55,165,495 samples, 5.51%)</title><rect x="29.5591%" y="357" width="5.5110%" height="15" fill="rgb(242,17,10)" fg:x="295887655" fg:w="55165495"/><text x="29.8091%" y="367.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="32.2645%" y="341" width="2.8056%" height="15" fill="rgb(242,107,0)" fg:x="322968898" fg:w="28084252"/><text x="32.5145%" y="351.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="32.2645%" y="325" width="2.8056%" height="15" fill="rgb(251,28,31)" fg:x="322968898" fg:w="28084252"/><text x="32.5145%" y="335.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="32.2645%" y="309" width="2.8056%" height="15" fill="rgb(233,223,10)" fg:x="322968898" fg:w="28084252"/><text x="32.5145%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (25,075,225 samples, 2.51%)</title><rect x="32.5651%" y="293" width="2.5050%" height="15" fill="rgb(215,21,27)" fg:x="325977925" fg:w="25075225"/><text x="32.8151%" y="303.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (25,075,225 samples, 2.51%)</title><rect x="32.5651%" y="277" width="2.5050%" height="15" fill="rgb(232,23,21)" fg:x="325977925" fg:w="25075225"/><text x="32.8151%" y="287.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (13,039,117 samples, 1.30%)</title><rect x="33.7675%" y="261" width="1.3026%" height="15" fill="rgb(244,5,23)" fg:x="338014033" fg:w="13039117"/><text x="34.0175%" y="271.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 1.40%)</title><rect x="36.5731%" y="325" width="1.4028%" height="15" fill="rgb(226,81,46)" fg:x="366098285" fg:w="14042126"/><text x="36.8231%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (14,042,126 samples, 1.40%)</title><rect x="36.5731%" y="309" width="1.4028%" height="15" fill="rgb(247,70,30)" fg:x="366098285" fg:w="14042126"/><text x="36.8231%" y="319.50"></text></g><g><title>core::intrinsics::likely (11,033,099 samples, 1.10%)</title><rect x="37.9760%" y="325" width="1.1022%" height="15" fill="rgb(212,68,19)" fg:x="380140411" fg:w="11033099"/><text x="38.2260%" y="335.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (9,027,081 samples, 0.90%)</title><rect x="39.0782%" y="325" width="0.9018%" height="15" fill="rgb(240,187,13)" fg:x="391173510" fg:w="9027081"/><text x="39.3282%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9,027,081 samples, 0.90%)</title><rect x="39.0782%" y="309" width="0.9018%" height="15" fill="rgb(223,113,26)" fg:x="391173510" fg:w="9027081"/><text x="39.3282%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9,027,081 samples, 0.90%)</title><rect x="39.0782%" y="293" width="0.9018%" height="15" fill="rgb(206,192,2)" fg:x="391173510" fg:w="9027081"/><text x="39.3282%" y="303.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (6,018,054 samples, 0.60%)</title><rect x="39.9800%" y="325" width="0.6012%" height="15" fill="rgb(241,108,4)" fg:x="400200591" fg:w="6018054"/><text x="40.2300%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,018,054 samples, 0.60%)</title><rect x="39.9800%" y="309" width="0.6012%" height="15" fill="rgb(247,173,49)" fg:x="400200591" fg:w="6018054"/><text x="40.2300%" y="319.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,006,018 samples, 0.20%)</title><rect x="40.5812%" y="325" width="0.2004%" height="15" fill="rgb(224,114,35)" fg:x="406218645" fg:w="2006018"/><text x="40.8312%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (86,258,774 samples, 8.62%)</title><rect x="40.7816%" y="309" width="8.6172%" height="15" fill="rgb(245,159,27)" fg:x="408224663" fg:w="86258774"/><text x="41.0316%" y="319.50">hashbrown::m..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (86,258,774 samples, 8.62%)</title><rect x="40.7816%" y="293" width="8.6172%" height="15" fill="rgb(245,172,44)" fg:x="408224663" fg:w="86258774"/><text x="41.0316%" y="303.50">&lt;Q as hashbr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (86,258,774 samples, 8.62%)</title><rect x="40.7816%" y="277" width="8.6172%" height="15" fill="rgb(236,23,11)" fg:x="408224663" fg:w="86258774"/><text x="41.0316%" y="287.50">core::cmp::i..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (86,258,774 samples, 8.62%)</title><rect x="40.7816%" y="261" width="8.6172%" height="15" fill="rgb(205,117,38)" fg:x="408224663" fg:w="86258774"/><text x="41.0316%" y="271.50">core::array:..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (86,258,774 samples, 8.62%)</title><rect x="40.7816%" y="245" width="8.6172%" height="15" fill="rgb(237,72,25)" fg:x="408224663" fg:w="86258774"/><text x="41.0316%" y="255.50">&lt;T as core::..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (17,051,153 samples, 1.70%)</title><rect x="49.3988%" y="309" width="1.7034%" height="15" fill="rgb(244,70,9)" fg:x="494483437" fg:w="17051153"/><text x="49.6488%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (17,051,153 samples, 1.70%)</title><rect x="49.3988%" y="293" width="1.7034%" height="15" fill="rgb(217,125,39)" fg:x="494483437" fg:w="17051153"/><text x="49.6488%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17,051,153 samples, 1.70%)</title><rect x="49.3988%" y="277" width="1.7034%" height="15" fill="rgb(235,36,10)" fg:x="494483437" fg:w="17051153"/><text x="49.6488%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (114,343,026 samples, 11.42%)</title><rect x="40.7816%" y="325" width="11.4228%" height="15" fill="rgb(251,123,47)" fg:x="408224663" fg:w="114343026"/><text x="41.0316%" y="335.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (11,033,099 samples, 1.10%)</title><rect x="51.1022%" y="309" width="1.1022%" height="15" fill="rgb(221,13,13)" fg:x="511534590" fg:w="11033099"/><text x="51.3522%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (11,033,099 samples, 1.10%)</title><rect x="51.1022%" y="293" width="1.1022%" height="15" fill="rgb(238,131,9)" fg:x="511534590" fg:w="11033099"/><text x="51.3522%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11,033,099 samples, 1.10%)</title><rect x="51.1022%" y="277" width="1.1022%" height="15" fill="rgb(211,50,8)" fg:x="511534590" fg:w="11033099"/><text x="51.3522%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (258,776,322 samples, 25.85%)</title><rect x="28.2565%" y="485" width="25.8517%" height="15" fill="rgb(245,182,24)" fg:x="282848538" fg:w="258776322"/><text x="28.5065%" y="495.50">core::cmp::impls::&lt;impl core::cmp::Partia..</text></g><g><title>core::cmp::PartialOrd::gt (258,776,322 samples, 25.85%)</title><rect x="28.2565%" y="469" width="25.8517%" height="15" fill="rgb(242,14,37)" fg:x="282848538" fg:w="258776322"/><text x="28.5065%" y="479.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (257,773,313 samples, 25.75%)</title><rect x="28.3567%" y="453" width="25.7515%" height="15" fill="rgb(246,228,12)" fg:x="283851547" fg:w="257773313"/><text x="28.6067%" y="463.50">&lt;aoc_2024_megaproject::problems::day5::Pa..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (254,764,286 samples, 25.45%)</title><rect x="28.6573%" y="437" width="25.4509%" height="15" fill="rgb(213,55,15)" fg:x="286860574" fg:w="254764286"/><text x="28.9073%" y="447.50">aoc_2024_megaproject::problems::day5::Pag..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (254,764,286 samples, 25.45%)</title><rect x="28.6573%" y="421" width="25.4509%" height="15" fill="rgb(209,9,3)" fg:x="286860574" fg:w="254764286"/><text x="28.9073%" y="431.50">std::collections::hash::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (254,764,286 samples, 25.45%)</title><rect x="28.6573%" y="405" width="25.4509%" height="15" fill="rgb(230,59,30)" fg:x="286860574" fg:w="254764286"/><text x="28.9073%" y="415.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (254,764,286 samples, 25.45%)</title><rect x="28.6573%" y="389" width="25.4509%" height="15" fill="rgb(209,121,21)" fg:x="286860574" fg:w="254764286"/><text x="28.9073%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inn..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (190,571,710 samples, 19.04%)</title><rect x="35.0701%" y="373" width="19.0381%" height="15" fill="rgb(220,109,13)" fg:x="351053150" fg:w="190571710"/><text x="35.3201%" y="383.50">hashbrown::raw::RawTable&lt;T,A&gt;:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (190,571,710 samples, 19.04%)</title><rect x="35.0701%" y="357" width="19.0381%" height="15" fill="rgb(232,18,1)" fg:x="351053150" fg:w="190571710"/><text x="35.3201%" y="367.50">hashbrown::raw::RawTable&lt;T,A&gt;:..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (190,571,710 samples, 19.04%)</title><rect x="35.0701%" y="341" width="19.0381%" height="15" fill="rgb(215,41,42)" fg:x="351053150" fg:w="190571710"/><text x="35.3201%" y="351.50">hashbrown::raw::RawTableInner:..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (19,057,171 samples, 1.90%)</title><rect x="52.2044%" y="325" width="1.9038%" height="15" fill="rgb(224,123,36)" fg:x="522567689" fg:w="19057171"/><text x="52.4544%" y="335.50">h..</text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="56.1122%" y="325" width="0.9018%" height="15" fill="rgb(240,125,3)" fg:x="561685040" fg:w="9027081"/><text x="56.3622%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="56.9138%" y="309" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="569709112" fg:w="1003009"/><text x="57.1638%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (15,045,135 samples, 1.50%)</title><rect x="56.1122%" y="341" width="1.5030%" height="15" fill="rgb(205,185,37)" fg:x="561685040" fg:w="15045135"/><text x="56.3622%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.60%)</title><rect x="57.0140%" y="325" width="0.6012%" height="15" fill="rgb(238,207,15)" fg:x="570712121" fg:w="6018054"/><text x="57.2640%" y="335.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (13,039,117 samples, 1.30%)</title><rect x="57.6152%" y="341" width="1.3026%" height="15" fill="rgb(213,199,42)" fg:x="576730175" fg:w="13039117"/><text x="57.8652%" y="351.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (13,039,117 samples, 1.30%)</title><rect x="57.6152%" y="325" width="1.3026%" height="15" fill="rgb(235,201,11)" fg:x="576730175" fg:w="13039117"/><text x="57.8652%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="58.9178%" y="293" width="0.2004%" height="15" fill="rgb(207,46,11)" fg:x="589769292" fg:w="2006018"/><text x="59.1678%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="58.9178%" y="277" width="0.2004%" height="15" fill="rgb(241,35,35)" fg:x="589769292" fg:w="2006018"/><text x="59.1678%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="58.9178%" y="261" width="0.2004%" height="15" fill="rgb(243,32,47)" fg:x="589769292" fg:w="2006018"/><text x="59.1678%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="58.9178%" y="245" width="0.2004%" height="15" fill="rgb(247,202,23)" fg:x="589769292" fg:w="2006018"/><text x="59.1678%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="59.0180%" y="229" width="0.1002%" height="15" fill="rgb(219,102,11)" fg:x="590772301" fg:w="1003009"/><text x="59.2680%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="59.0180%" y="213" width="0.1002%" height="15" fill="rgb(243,110,44)" fg:x="590772301" fg:w="1003009"/><text x="59.2680%" y="223.50"></text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="59.5190%" y="245" width="0.9018%" height="15" fill="rgb(222,74,54)" fg:x="595787346" fg:w="9027081"/><text x="59.7690%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="60.3206%" y="229" width="0.1002%" height="15" fill="rgb(216,99,12)" fg:x="603811418" fg:w="1003009"/><text x="60.5706%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (15,045,135 samples, 1.50%)</title><rect x="59.1182%" y="261" width="1.5030%" height="15" fill="rgb(226,22,26)" fg:x="591775310" fg:w="15045135"/><text x="59.3682%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,006,018 samples, 0.20%)</title><rect x="60.4208%" y="245" width="0.2004%" height="15" fill="rgb(217,163,10)" fg:x="604814427" fg:w="2006018"/><text x="60.6708%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (54,162,486 samples, 5.41%)</title><rect x="56.1122%" y="373" width="5.4108%" height="15" fill="rgb(213,25,53)" fg:x="561685040" fg:w="54162486"/><text x="56.3622%" y="383.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (54,162,486 samples, 5.41%)</title><rect x="56.1122%" y="357" width="5.4108%" height="15" fill="rgb(252,105,26)" fg:x="561685040" fg:w="54162486"/><text x="56.3622%" y="367.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (26,078,234 samples, 2.61%)</title><rect x="58.9178%" y="341" width="2.6052%" height="15" fill="rgb(220,39,43)" fg:x="589769292" fg:w="26078234"/><text x="59.1678%" y="351.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (26,078,234 samples, 2.61%)</title><rect x="58.9178%" y="325" width="2.6052%" height="15" fill="rgb(229,68,48)" fg:x="589769292" fg:w="26078234"/><text x="59.1678%" y="335.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (26,078,234 samples, 2.61%)</title><rect x="58.9178%" y="309" width="2.6052%" height="15" fill="rgb(252,8,32)" fg:x="589769292" fg:w="26078234"/><text x="59.1678%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (24,072,216 samples, 2.40%)</title><rect x="59.1182%" y="293" width="2.4048%" height="15" fill="rgb(223,20,43)" fg:x="591775310" fg:w="24072216"/><text x="59.3682%" y="303.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (24,072,216 samples, 2.40%)</title><rect x="59.1182%" y="277" width="2.4048%" height="15" fill="rgb(229,81,49)" fg:x="591775310" fg:w="24072216"/><text x="59.3682%" y="287.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9,027,081 samples, 0.90%)</title><rect x="60.6212%" y="261" width="0.9018%" height="15" fill="rgb(236,28,36)" fg:x="606820445" fg:w="9027081"/><text x="60.8712%" y="271.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9,027,081 samples, 0.90%)</title><rect x="63.4269%" y="325" width="0.9018%" height="15" fill="rgb(249,185,26)" fg:x="634904697" fg:w="9027081"/><text x="63.6769%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (9,027,081 samples, 0.90%)</title><rect x="63.4269%" y="309" width="0.9018%" height="15" fill="rgb(249,174,33)" fg:x="634904697" fg:w="9027081"/><text x="63.6769%" y="319.50"></text></g><g><title>core::intrinsics::likely (13,039,117 samples, 1.30%)</title><rect x="64.3287%" y="325" width="1.3026%" height="15" fill="rgb(233,201,37)" fg:x="643931778" fg:w="13039117"/><text x="64.5787%" y="335.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (12,036,108 samples, 1.20%)</title><rect x="65.6313%" y="325" width="1.2024%" height="15" fill="rgb(221,78,26)" fg:x="656970895" fg:w="12036108"/><text x="65.8813%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12,036,108 samples, 1.20%)</title><rect x="65.6313%" y="309" width="1.2024%" height="15" fill="rgb(250,127,30)" fg:x="656970895" fg:w="12036108"/><text x="65.8813%" y="319.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,012,036 samples, 0.40%)</title><rect x="66.8337%" y="325" width="0.4008%" height="15" fill="rgb(230,49,44)" fg:x="669007003" fg:w="4012036"/><text x="67.0837%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (75,225,675 samples, 7.52%)</title><rect x="67.2345%" y="309" width="7.5150%" height="15" fill="rgb(229,67,23)" fg:x="673019039" fg:w="75225675"/><text x="67.4845%" y="319.50">hashbrown:..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (75,225,675 samples, 7.52%)</title><rect x="67.2345%" y="293" width="7.5150%" height="15" fill="rgb(249,83,47)" fg:x="673019039" fg:w="75225675"/><text x="67.4845%" y="303.50">&lt;Q as hash..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (75,225,675 samples, 7.52%)</title><rect x="67.2345%" y="277" width="7.5150%" height="15" fill="rgb(215,43,3)" fg:x="673019039" fg:w="75225675"/><text x="67.4845%" y="287.50">core::cmp:..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (75,225,675 samples, 7.52%)</title><rect x="67.2345%" y="261" width="7.5150%" height="15" fill="rgb(238,154,13)" fg:x="673019039" fg:w="75225675"/><text x="67.4845%" y="271.50">core::arra..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (75,225,675 samples, 7.52%)</title><rect x="67.2345%" y="245" width="7.5150%" height="15" fill="rgb(219,56,2)" fg:x="673019039" fg:w="75225675"/><text x="67.4845%" y="255.50">&lt;T as core..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (16,048,144 samples, 1.60%)</title><rect x="74.7495%" y="309" width="1.6032%" height="15" fill="rgb(233,0,4)" fg:x="748244714" fg:w="16048144"/><text x="74.9995%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (16,048,144 samples, 1.60%)</title><rect x="74.7495%" y="293" width="1.6032%" height="15" fill="rgb(235,30,7)" fg:x="748244714" fg:w="16048144"/><text x="74.9995%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16,048,144 samples, 1.60%)</title><rect x="74.7495%" y="277" width="1.6032%" height="15" fill="rgb(250,79,13)" fg:x="748244714" fg:w="16048144"/><text x="74.9995%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (103,309,927 samples, 10.32%)</title><rect x="67.2345%" y="325" width="10.3206%" height="15" fill="rgb(211,146,34)" fg:x="673019039" fg:w="103309927"/><text x="67.4845%" y="335.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12,036,108 samples, 1.20%)</title><rect x="76.3527%" y="309" width="1.2024%" height="15" fill="rgb(228,22,38)" fg:x="764292858" fg:w="12036108"/><text x="76.6027%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (12,036,108 samples, 1.20%)</title><rect x="76.3527%" y="293" width="1.2024%" height="15" fill="rgb(235,168,5)" fg:x="764292858" fg:w="12036108"/><text x="76.6027%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,036,108 samples, 1.20%)</title><rect x="76.3527%" y="277" width="1.2024%" height="15" fill="rgb(221,155,16)" fg:x="764292858" fg:w="12036108"/><text x="76.6027%" y="287.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (536,609,815 samples, 53.61%)</title><rect x="25.3507%" y="501" width="53.6072%" height="15" fill="rgb(215,215,53)" fg:x="253761277" fg:w="536609815"/><text x="25.6007%" y="511.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (248,746,232 samples, 24.85%)</title><rect x="54.1082%" y="485" width="24.8497%" height="15" fill="rgb(223,4,10)" fg:x="541624860" fg:w="248746232"/><text x="54.3582%" y="495.50">core::cmp::impls::&lt;impl core::cmp::Parti..</text></g><g><title>core::cmp::PartialOrd::lt (248,746,232 samples, 24.85%)</title><rect x="54.1082%" y="469" width="24.8497%" height="15" fill="rgb(234,103,6)" fg:x="541624860" fg:w="248746232"/><text x="54.3582%" y="479.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (248,746,232 samples, 24.85%)</title><rect x="54.1082%" y="453" width="24.8497%" height="15" fill="rgb(227,97,0)" fg:x="541624860" fg:w="248746232"/><text x="54.3582%" y="463.50">&lt;aoc_2024_megaproject::problems::day5::P..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (246,740,214 samples, 24.65%)</title><rect x="54.3086%" y="437" width="24.6493%" height="15" fill="rgb(234,150,53)" fg:x="543630878" fg:w="246740214"/><text x="54.5586%" y="447.50">aoc_2024_megaproject::problems::day5::P..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (243,731,187 samples, 24.35%)</title><rect x="54.6092%" y="421" width="24.3487%" height="15" fill="rgb(228,201,54)" fg:x="546639905" fg:w="243731187"/><text x="54.8592%" y="431.50">std::collections::hash::map::HashMap&lt;K,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (243,731,187 samples, 24.35%)</title><rect x="54.6092%" y="405" width="24.3487%" height="15" fill="rgb(222,22,37)" fg:x="546639905" fg:w="243731187"/><text x="54.8592%" y="415.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (243,731,187 samples, 24.35%)</title><rect x="54.6092%" y="389" width="24.3487%" height="15" fill="rgb(237,53,32)" fg:x="546639905" fg:w="243731187"/><text x="54.8592%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_i..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (174,523,566 samples, 17.43%)</title><rect x="61.5230%" y="373" width="17.4349%" height="15" fill="rgb(233,25,53)" fg:x="615847526" fg:w="174523566"/><text x="61.7730%" y="383.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (174,523,566 samples, 17.43%)</title><rect x="61.5230%" y="357" width="17.4349%" height="15" fill="rgb(210,40,34)" fg:x="615847526" fg:w="174523566"/><text x="61.7730%" y="367.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (174,523,566 samples, 17.43%)</title><rect x="61.5230%" y="341" width="17.4349%" height="15" fill="rgb(241,220,44)" fg:x="615847526" fg:w="174523566"/><text x="61.7730%" y="351.50">hashbrown::raw::RawTableInn..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (14,042,126 samples, 1.40%)</title><rect x="77.5551%" y="325" width="1.4028%" height="15" fill="rgb(235,28,35)" fg:x="776328966" fg:w="14042126"/><text x="77.8051%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17,051,153 samples, 1.70%)</title><rect x="81.3627%" y="389" width="1.7034%" height="15" fill="rgb(210,56,17)" fg:x="814443308" fg:w="17051153"/><text x="81.6127%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (17,051,153 samples, 1.70%)</title><rect x="81.3627%" y="373" width="1.7034%" height="15" fill="rgb(224,130,29)" fg:x="814443308" fg:w="17051153"/><text x="81.6127%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (17,051,153 samples, 1.70%)</title><rect x="81.3627%" y="357" width="1.7034%" height="15" fill="rgb(235,212,8)" fg:x="814443308" fg:w="17051153"/><text x="81.6127%" y="367.50"></text></g><g><title>[libc.so.6] (8,024,072 samples, 0.80%)</title><rect x="82.2645%" y="341" width="0.8016%" height="15" fill="rgb(223,33,50)" fg:x="823470389" fg:w="8024072"/><text x="82.5145%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="83.0661%" y="389" width="0.1002%" height="15" fill="rgb(219,149,13)" fg:x="831494461" fg:w="1003009"/><text x="83.3161%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="83.0661%" y="373" width="0.1002%" height="15" fill="rgb(250,156,29)" fg:x="831494461" fg:w="1003009"/><text x="83.3161%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,003,009 samples, 0.10%)</title><rect x="83.0661%" y="357" width="0.1002%" height="15" fill="rgb(216,193,19)" fg:x="831494461" fg:w="1003009"/><text x="83.3161%" y="367.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="84.0681%" y="341" width="0.1002%" height="15" fill="rgb(216,135,14)" fg:x="841524551" fg:w="1003009"/><text x="84.3181%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (3,009,027 samples, 0.30%)</title><rect x="84.1683%" y="341" width="0.3006%" height="15" fill="rgb(241,47,5)" fg:x="842527560" fg:w="3009027"/><text x="84.4183%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (59,177,531 samples, 5.91%)</title><rect x="78.9579%" y="501" width="5.9118%" height="15" fill="rgb(233,42,35)" fg:x="790371092" fg:w="59177531"/><text x="79.2079%" y="511.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (59,177,531 samples, 5.91%)</title><rect x="78.9579%" y="485" width="5.9118%" height="15" fill="rgb(231,13,6)" fg:x="790371092" fg:w="59177531"/><text x="79.2079%" y="495.50">core::it..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.91%)</title><rect x="78.9579%" y="469" width="5.9118%" height="15" fill="rgb(207,181,40)" fg:x="790371092" fg:w="59177531"/><text x="79.2079%" y="479.50">&lt;core::s..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.91%)</title><rect x="78.9579%" y="453" width="5.9118%" height="15" fill="rgb(254,173,49)" fg:x="790371092" fg:w="59177531"/><text x="79.2079%" y="463.50">&lt;core::i..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.91%)</title><rect x="78.9579%" y="437" width="5.9118%" height="15" fill="rgb(221,1,38)" fg:x="790371092" fg:w="59177531"/><text x="79.2079%" y="447.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (59,177,531 samples, 5.91%)</title><rect x="78.9579%" y="421" width="5.9118%" height="15" fill="rgb(206,124,46)" fg:x="790371092" fg:w="59177531"/><text x="79.2079%" y="431.50">core::st..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (46,138,414 samples, 4.61%)</title><rect x="80.2605%" y="405" width="4.6092%" height="15" fill="rgb(249,21,11)" fg:x="803410209" fg:w="46138414"/><text x="80.5105%" y="415.50">&lt;core..</text></g><g><title>core::slice::memchr::memchr (17,051,153 samples, 1.70%)</title><rect x="83.1663%" y="389" width="1.7034%" height="15" fill="rgb(222,201,40)" fg:x="832497470" fg:w="17051153"/><text x="83.4163%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (12,036,108 samples, 1.20%)</title><rect x="83.6673%" y="373" width="1.2024%" height="15" fill="rgb(235,61,29)" fg:x="837512515" fg:w="12036108"/><text x="83.9173%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (10,030,090 samples, 1.00%)</title><rect x="83.8677%" y="357" width="1.0020%" height="15" fill="rgb(219,207,3)" fg:x="839518533" fg:w="10030090"/><text x="84.1177%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (4,012,036 samples, 0.40%)</title><rect x="84.4689%" y="341" width="0.4008%" height="15" fill="rgb(222,56,46)" fg:x="845536587" fg:w="4012036"/><text x="84.7189%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (9,027,081 samples, 0.90%)</title><rect x="91.3828%" y="437" width="0.9018%" height="15" fill="rgb(239,76,54)" fg:x="914744208" fg:w="9027081"/><text x="91.6328%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,027,081 samples, 0.90%)</title><rect x="91.3828%" y="421" width="0.9018%" height="15" fill="rgb(231,124,27)" fg:x="914744208" fg:w="9027081"/><text x="91.6328%" y="431.50"></text></g><g><title>[libc.so.6] (9,027,081 samples, 0.90%)</title><rect x="91.3828%" y="405" width="0.9018%" height="15" fill="rgb(249,195,6)" fg:x="914744208" fg:w="9027081"/><text x="91.6328%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.10%)</title><rect x="92.2846%" y="437" width="0.1002%" height="15" fill="rgb(237,174,47)" fg:x="923771289" fg:w="1003009"/><text x="92.5346%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="92.2846%" y="421" width="0.1002%" height="15" fill="rgb(206,201,31)" fg:x="923771289" fg:w="1003009"/><text x="92.5346%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="92.2846%" y="405" width="0.1002%" height="15" fill="rgb(231,57,52)" fg:x="923771289" fg:w="1003009"/><text x="92.5346%" y="415.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (5,015,045 samples, 0.50%)</title><rect x="92.3848%" y="437" width="0.5010%" height="15" fill="rgb(248,177,22)" fg:x="924774298" fg:w="5015045"/><text x="92.6348%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,015,045 samples, 0.50%)</title><rect x="92.3848%" y="421" width="0.5010%" height="15" fill="rgb(215,211,37)" fg:x="924774298" fg:w="5015045"/><text x="92.6348%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (81,243,729 samples, 8.12%)</title><rect x="84.8697%" y="501" width="8.1162%" height="15" fill="rgb(241,128,51)" fg:x="849548623" fg:w="81243729"/><text x="85.1197%" y="511.50">core::str::..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (40,120,360 samples, 4.01%)</title><rect x="88.9780%" y="485" width="4.0080%" height="15" fill="rgb(227,165,31)" fg:x="890671992" fg:w="40120360"/><text x="89.2280%" y="495.50">&lt;&amp;st..</text></g><g><title>core::str::pattern::StrSearcher::new (39,117,351 samples, 3.91%)</title><rect x="89.0782%" y="469" width="3.9078%" height="15" fill="rgb(228,167,24)" fg:x="891675001" fg:w="39117351"/><text x="89.3282%" y="479.50">core..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (23,069,207 samples, 2.30%)</title><rect x="90.6814%" y="453" width="2.3046%" height="15" fill="rgb(228,143,12)" fg:x="907723145" fg:w="23069207"/><text x="90.9314%" y="463.50">c..</text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="437" width="0.1002%" height="15" fill="rgb(249,149,8)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,003,009 samples, 0.10%)</title><rect x="93.2866%" y="437" width="0.1002%" height="15" fill="rgb(243,35,44)" fg:x="933801379" fg:w="1003009"/><text x="93.5366%" y="447.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.40%)</title><rect x="93.7876%" y="421" width="0.4008%" height="15" fill="rgb(246,89,9)" fg:x="938816424" fg:w="4012036"/><text x="94.0376%" y="431.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (4,012,036 samples, 0.40%)</title><rect x="93.7876%" y="405" width="0.4008%" height="15" fill="rgb(233,213,13)" fg:x="938816424" fg:w="4012036"/><text x="94.0376%" y="415.50"></text></g><g><title>core::intrinsics::likely (1,003,009 samples, 0.10%)</title><rect x="94.1884%" y="421" width="0.1002%" height="15" fill="rgb(233,141,41)" fg:x="942828460" fg:w="1003009"/><text x="94.4384%" y="431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.20%)</title><rect x="94.2886%" y="421" width="0.2004%" height="15" fill="rgb(239,167,4)" fg:x="943831469" fg:w="2006018"/><text x="94.5386%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.20%)</title><rect x="94.2886%" y="405" width="0.2004%" height="15" fill="rgb(209,217,16)" fg:x="943831469" fg:w="2006018"/><text x="94.5386%" y="415.50"></text></g><g><title>hashbrown::control::tag::Tag::full (13,039,117 samples, 1.30%)</title><rect x="94.4890%" y="421" width="1.3026%" height="15" fill="rgb(219,88,35)" fg:x="945837487" fg:w="13039117"/><text x="94.7390%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="421" width="0.2004%" height="15" fill="rgb(220,193,23)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="405" width="0.2004%" height="15" fill="rgb(230,90,52)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="415.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="389" width="0.2004%" height="15" fill="rgb(252,106,19)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="373" width="0.2004%" height="15" fill="rgb(206,74,20)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="383.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="357" width="0.2004%" height="15" fill="rgb(230,138,44)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="367.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="341" width="0.2004%" height="15" fill="rgb(235,182,43)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="351.50"></text></g><g><title>core::intrinsics::unlikely (2,006,018 samples, 0.20%)</title><rect x="95.9920%" y="405" width="0.2004%" height="15" fill="rgb(242,16,51)" fg:x="960882622" fg:w="2006018"/><text x="96.2420%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (35,105,315 samples, 3.51%)</title><rect x="93.2866%" y="469" width="3.5070%" height="15" fill="rgb(248,9,4)" fg:x="933801379" fg:w="35105315"/><text x="93.5366%" y="479.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (35,105,315 samples, 3.51%)</title><rect x="93.2866%" y="453" width="3.5070%" height="15" fill="rgb(210,31,22)" fg:x="933801379" fg:w="35105315"/><text x="93.5366%" y="463.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (34,102,306 samples, 3.41%)</title><rect x="93.3868%" y="437" width="3.4068%" height="15" fill="rgb(239,54,39)" fg:x="934804388" fg:w="34102306"/><text x="93.6368%" y="447.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (8,024,072 samples, 0.80%)</title><rect x="95.9920%" y="421" width="0.8016%" height="15" fill="rgb(230,99,41)" fg:x="960882622" fg:w="8024072"/><text x="96.2420%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (6,018,054 samples, 0.60%)</title><rect x="96.1924%" y="405" width="0.6012%" height="15" fill="rgb(253,106,12)" fg:x="962888640" fg:w="6018054"/><text x="96.4424%" y="415.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (6,018,054 samples, 0.60%)</title><rect x="96.1924%" y="389" width="0.6012%" height="15" fill="rgb(213,46,41)" fg:x="962888640" fg:w="6018054"/><text x="96.4424%" y="399.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="437" width="0.1002%" height="15" fill="rgb(215,133,35)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="421" width="0.1002%" height="15" fill="rgb(213,28,5)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="431.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,003,009 samples, 0.10%)</title><rect x="96.8938%" y="437" width="0.1002%" height="15" fill="rgb(215,77,49)" fg:x="969909703" fg:w="1003009"/><text x="97.1438%" y="447.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1,003,009 samples, 0.10%)</title><rect x="96.8938%" y="421" width="0.1002%" height="15" fill="rgb(248,100,22)" fg:x="969909703" fg:w="1003009"/><text x="97.1438%" y="431.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="97.5952%" y="389" width="0.3006%" height="15" fill="rgb(208,67,9)" fg:x="976930766" fg:w="3009027"/><text x="97.8452%" y="399.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="97.5952%" y="373" width="0.3006%" height="15" fill="rgb(219,133,21)" fg:x="976930766" fg:w="3009027"/><text x="97.8452%" y="383.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="97.5952%" y="357" width="0.3006%" height="15" fill="rgb(246,46,29)" fg:x="976930766" fg:w="3009027"/><text x="97.8452%" y="367.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="97.5952%" y="341" width="0.3006%" height="15" fill="rgb(246,185,52)" fg:x="976930766" fg:w="3009027"/><text x="97.8452%" y="351.50"></text></g><g><title>ahash::operations::folded_multiply (4,012,036 samples, 0.40%)</title><rect x="98.0962%" y="341" width="0.4008%" height="15" fill="rgb(252,136,11)" fg:x="981945811" fg:w="4012036"/><text x="98.3462%" y="351.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="325" width="0.1002%" height="15" fill="rgb(219,138,53)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (18,054,162 samples, 1.80%)</title><rect x="96.7936%" y="469" width="1.8036%" height="15" fill="rgb(211,51,23)" fg:x="968906694" fg:w="18054162"/><text x="97.0436%" y="479.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (18,054,162 samples, 1.80%)</title><rect x="96.7936%" y="453" width="1.8036%" height="15" fill="rgb(247,221,28)" fg:x="968906694" fg:w="18054162"/><text x="97.0436%" y="463.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16,048,144 samples, 1.60%)</title><rect x="96.9940%" y="437" width="1.6032%" height="15" fill="rgb(251,222,45)" fg:x="970912712" fg:w="16048144"/><text x="97.2440%" y="447.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (16,048,144 samples, 1.60%)</title><rect x="96.9940%" y="421" width="1.6032%" height="15" fill="rgb(217,162,53)" fg:x="970912712" fg:w="16048144"/><text x="97.2440%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (16,048,144 samples, 1.60%)</title><rect x="96.9940%" y="405" width="1.6032%" height="15" fill="rgb(229,93,14)" fg:x="970912712" fg:w="16048144"/><text x="97.2440%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (7,021,063 samples, 0.70%)</title><rect x="97.8958%" y="389" width="0.7014%" height="15" fill="rgb(209,67,49)" fg:x="979939793" fg:w="7021063"/><text x="98.1458%" y="399.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (7,021,063 samples, 0.70%)</title><rect x="97.8958%" y="373" width="0.7014%" height="15" fill="rgb(213,87,29)" fg:x="979939793" fg:w="7021063"/><text x="98.1458%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (7,021,063 samples, 0.70%)</title><rect x="97.8958%" y="357" width="0.7014%" height="15" fill="rgb(205,151,52)" fg:x="979939793" fg:w="7021063"/><text x="98.1458%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="341" width="0.1002%" height="15" fill="rgb(253,215,39)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8,024,072 samples, 0.80%)</title><rect x="98.5972%" y="453" width="0.8016%" height="15" fill="rgb(221,220,41)" fg:x="986960856" fg:w="8024072"/><text x="98.8472%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8,024,072 samples, 0.80%)</title><rect x="98.5972%" y="437" width="0.8016%" height="15" fill="rgb(218,133,21)" fg:x="986960856" fg:w="8024072"/><text x="98.8472%" y="447.50"></text></g><g><title>core::ptr::write (8,024,072 samples, 0.80%)</title><rect x="98.5972%" y="421" width="0.8016%" height="15" fill="rgb(221,193,43)" fg:x="986960856" fg:w="8024072"/><text x="98.8472%" y="431.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="549" width="99.8998%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="559.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1 (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="533" width="99.8998%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="543.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day5::part1 (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="517" width="99.8998%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="527.50">aoc_2024_megaproject::problems::day5::part1</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (69,207,621 samples, 6.91%)</title><rect x="92.9860%" y="501" width="6.9138%" height="15" fill="rgb(248,225,23)" fg:x="930792352" fg:w="69207621"/><text x="93.2360%" y="511.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (69,207,621 samples, 6.91%)</title><rect x="92.9860%" y="485" width="6.9138%" height="15" fill="rgb(250,108,0)" fg:x="930792352" fg:w="69207621"/><text x="93.2360%" y="495.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (13,039,117 samples, 1.30%)</title><rect x="98.5972%" y="469" width="1.3026%" height="15" fill="rgb(228,208,7)" fg:x="986960856" fg:w="13039117"/><text x="98.8472%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (5,015,045 samples, 0.50%)</title><rect x="99.3988%" y="453" width="0.5010%" height="15" fill="rgb(244,45,10)" fg:x="994984928" fg:w="5015045"/><text x="99.6488%" y="463.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="879.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="863.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="847.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="815.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="623.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="591.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="575.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="549" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="559.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="533" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="543.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="517" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="501" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="485" width="0.1002%" height="15" fill="rgb(212,155,44)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="469" width="0.1002%" height="15" fill="rgb(226,2,50)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="479.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="453" width="0.1002%" height="15" fill="rgb(234,177,6)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="437" width="0.1002%" height="15" fill="rgb(217,24,9)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="421" width="0.1002%" height="15" fill="rgb(220,13,46)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="405" width="0.1002%" height="15" fill="rgb(239,221,27)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="389" width="0.1002%" height="15" fill="rgb(222,198,25)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="373" width="0.1002%" height="15" fill="rgb(211,99,13)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="357" width="0.1002%" height="15" fill="rgb(232,111,31)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="341" width="0.1002%" height="15" fill="rgb(245,82,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="325" width="0.1002%" height="15" fill="rgb(227,149,46)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="309" width="0.1002%" height="15" fill="rgb(218,36,50)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="293" width="0.1002%" height="15" fill="rgb(226,80,48)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="277" width="0.1002%" height="15" fill="rgb(238,224,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="261" width="0.1002%" height="15" fill="rgb(241,136,10)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="245" width="0.1002%" height="15" fill="rgb(208,32,45)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="229" width="0.1002%" height="15" fill="rgb(207,135,9)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(206,86,44)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="197" width="0.1002%" height="15" fill="rgb(245,177,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="181" width="0.1002%" height="15" fill="rgb(206,64,50)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="165" width="0.1002%" height="15" fill="rgb(234,36,40)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="149" width="0.1002%" height="15" fill="rgb(213,64,8)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="133" width="0.1002%" height="15" fill="rgb(210,75,36)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="117" width="0.1002%" height="15" fill="rgb(229,88,21)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="101" width="0.1002%" height="15" fill="rgb(252,204,47)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="111.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="85" width="0.1002%" height="15" fill="rgb(208,77,27)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="95.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="69" width="0.1002%" height="15" fill="rgb(221,76,26)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="53" width="0.1002%" height="15" fill="rgb(225,139,18)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="63.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="37" width="0.1002%" height="15" fill="rgb(230,137,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="47.50"></text></g></svg></svg>