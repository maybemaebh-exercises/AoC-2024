<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="741" width="0.1002%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="725" width="0.1002%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="709" width="0.1002%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="693" width="0.1002%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="677" width="0.1002%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="661" width="0.1002%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="645" width="0.1002%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="629" width="0.1002%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="613" width="0.1002%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="597" width="0.1002%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="581" width="0.1002%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="565" width="0.1002%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="549" width="0.1002%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="533" width="0.1002%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="517" width="0.1002%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="501" width="0.1002%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="511.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (1,003,009 samples, 0.10%)</title><rect x="0.5010%" y="405" width="0.1002%" height="15" fill="rgb(225,20,46)" fg:x="5015045" fg:w="1003009"/><text x="0.7510%" y="415.50"></text></g><g><title>ahash::random_state::RandomState::new (1,003,009 samples, 0.10%)</title><rect x="0.5010%" y="389" width="0.1002%" height="15" fill="rgb(210,31,41)" fg:x="5015045" fg:w="1003009"/><text x="0.7510%" y="399.50"></text></g><g><title>ahash::random_state::get_src (1,003,009 samples, 0.10%)</title><rect x="0.5010%" y="373" width="0.1002%" height="15" fill="rgb(221,200,47)" fg:x="5015045" fg:w="1003009"/><text x="0.7510%" y="383.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_init (1,003,009 samples, 0.10%)</title><rect x="0.5010%" y="357" width="0.1002%" height="15" fill="rgb(226,26,5)" fg:x="5015045" fg:w="1003009"/><text x="0.7510%" y="367.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (1,003,009 samples, 0.10%)</title><rect x="0.5010%" y="341" width="0.1002%" height="15" fill="rgb(249,33,26)" fg:x="5015045" fg:w="1003009"/><text x="0.7510%" y="351.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get (1,003,009 samples, 0.10%)</title><rect x="0.5010%" y="325" width="0.1002%" height="15" fill="rgb(235,183,28)" fg:x="5015045" fg:w="1003009"/><text x="0.7510%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.60%)</title><rect x="7.5150%" y="277" width="0.6012%" height="15" fill="rgb(221,5,38)" fg:x="75225675" fg:w="6018054"/><text x="7.7650%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (6,018,054 samples, 0.60%)</title><rect x="7.5150%" y="261" width="0.6012%" height="15" fill="rgb(247,18,42)" fg:x="75225675" fg:w="6018054"/><text x="7.7650%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (6,018,054 samples, 0.60%)</title><rect x="7.5150%" y="245" width="0.6012%" height="15" fill="rgb(241,131,45)" fg:x="75225675" fg:w="6018054"/><text x="7.7650%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="7.6152%" y="229" width="0.5010%" height="15" fill="rgb(249,31,29)" fg:x="76228684" fg:w="5015045"/><text x="7.8652%" y="239.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (5,015,045 samples, 0.50%)</title><rect x="8.1162%" y="277" width="0.5010%" height="15" fill="rgb(225,111,53)" fg:x="81243729" fg:w="5015045"/><text x="8.3662%" y="287.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (72,216,648 samples, 7.21%)</title><rect x="1.6032%" y="309" width="7.2144%" height="15" fill="rgb(238,160,17)" fg:x="16048144" fg:w="72216648"/><text x="1.8532%" y="319.50">&lt;core::str..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (54,162,486 samples, 5.41%)</title><rect x="3.4068%" y="293" width="5.4108%" height="15" fill="rgb(214,148,48)" fg:x="34102306" fg:w="54162486"/><text x="3.6568%" y="303.50">core::s..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="8.6172%" y="277" width="0.2004%" height="15" fill="rgb(232,36,49)" fg:x="86258774" fg:w="2006018"/><text x="8.8672%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="8.6172%" y="261" width="0.2004%" height="15" fill="rgb(209,103,24)" fg:x="86258774" fg:w="2006018"/><text x="8.8672%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (82,246,738 samples, 8.22%)</title><rect x="0.9018%" y="341" width="8.2164%" height="15" fill="rgb(229,88,8)" fg:x="9027081" fg:w="82246738"/><text x="1.1518%" y="351.50">&lt;core::str:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (81,243,729 samples, 8.12%)</title><rect x="1.0020%" y="325" width="8.1162%" height="15" fill="rgb(213,181,19)" fg:x="10030090" fg:w="81243729"/><text x="1.2520%" y="335.50">core::str::..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (3,009,027 samples, 0.30%)</title><rect x="8.8176%" y="309" width="0.3006%" height="15" fill="rgb(254,191,54)" fg:x="88264792" fg:w="3009027"/><text x="9.0676%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (3,009,027 samples, 0.30%)</title><rect x="8.8176%" y="293" width="0.3006%" height="15" fill="rgb(241,83,37)" fg:x="88264792" fg:w="3009027"/><text x="9.0676%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103,309,927 samples, 10.32%)</title><rect x="0.9018%" y="357" width="10.3206%" height="15" fill="rgb(233,36,39)" fg:x="9027081" fg:w="103309927"/><text x="1.1518%" y="367.50">&lt;core::iter::ad..</text></g><g><title>core::option::Option&lt;T&gt;::map (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="341" width="2.1042%" height="15" fill="rgb(226,3,54)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="351.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="325" width="2.1042%" height="15" fill="rgb(245,192,40)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="335.50">c..</text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="309" width="2.1042%" height="15" fill="rgb(238,167,29)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="319.50">a..</text></g><g><title>core::str::&lt;impl str&gt;::parse (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="293" width="2.1042%" height="15" fill="rgb(232,182,51)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="303.50">c..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="277" width="2.1042%" height="15" fill="rgb(231,60,39)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="287.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="261" width="2.1042%" height="15" fill="rgb(208,69,12)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="271.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (21,063,189 samples, 2.10%)</title><rect x="9.1182%" y="245" width="2.1042%" height="15" fill="rgb(235,93,37)" fg:x="91273819" fg:w="21063189"/><text x="9.3682%" y="255.50">c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (4,012,036 samples, 0.40%)</title><rect x="10.8216%" y="229" width="0.4008%" height="15" fill="rgb(213,116,39)" fg:x="108324972" fg:w="4012036"/><text x="11.0716%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (3,009,027 samples, 0.30%)</title><rect x="10.9218%" y="213" width="0.3006%" height="15" fill="rgb(222,207,29)" fg:x="109327981" fg:w="3009027"/><text x="11.1718%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2,006,018 samples, 0.20%)</title><rect x="11.2224%" y="357" width="0.2004%" height="15" fill="rgb(206,96,30)" fg:x="112337008" fg:w="2006018"/><text x="11.4724%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2,006,018 samples, 0.20%)</title><rect x="11.4228%" y="357" width="0.2004%" height="15" fill="rgb(218,138,4)" fg:x="114343026" fg:w="2006018"/><text x="11.6728%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (116,349,044 samples, 11.62%)</title><rect x="0.6012%" y="405" width="11.6232%" height="15" fill="rgb(250,191,14)" fg:x="6018054" fg:w="116349044"/><text x="0.8512%" y="415.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (116,349,044 samples, 11.62%)</title><rect x="0.6012%" y="389" width="11.6232%" height="15" fill="rgb(239,60,40)" fg:x="6018054" fg:w="116349044"/><text x="0.8512%" y="399.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (116,349,044 samples, 11.62%)</title><rect x="0.6012%" y="373" width="11.6232%" height="15" fill="rgb(206,27,48)" fg:x="6018054" fg:w="116349044"/><text x="0.8512%" y="383.50">alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::write (6,018,054 samples, 0.60%)</title><rect x="11.6232%" y="357" width="0.6012%" height="15" fill="rgb(225,35,8)" fg:x="116349044" fg:w="6018054"/><text x="11.8732%" y="367.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (41,123,369 samples, 4.11%)</title><rect x="13.7275%" y="357" width="4.1082%" height="15" fill="rgb(250,213,24)" fg:x="137412233" fg:w="41123369"/><text x="13.9775%" y="367.50">&lt;cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (37,111,333 samples, 3.71%)</title><rect x="14.1283%" y="341" width="3.7074%" height="15" fill="rgb(247,123,22)" fg:x="141424269" fg:w="37111333"/><text x="14.3783%" y="351.50">core..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="17.8357%" y="357" width="0.1002%" height="15" fill="rgb(231,138,38)" fg:x="178535602" fg:w="1003009"/><text x="18.0857%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="17.8357%" y="341" width="0.1002%" height="15" fill="rgb(231,145,46)" fg:x="178535602" fg:w="1003009"/><text x="18.0857%" y="351.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.91%)</title><rect x="12.2244%" y="389" width="5.9118%" height="15" fill="rgb(251,118,11)" fg:x="122367098" fg:w="59177531"/><text x="12.4744%" y="399.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (59,177,531 samples, 5.91%)</title><rect x="12.2244%" y="373" width="5.9118%" height="15" fill="rgb(217,147,25)" fg:x="122367098" fg:w="59177531"/><text x="12.4744%" y="383.50">core::st..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (2,006,018 samples, 0.20%)</title><rect x="17.9359%" y="357" width="0.2004%" height="15" fill="rgb(247,81,37)" fg:x="179538611" fg:w="2006018"/><text x="18.1859%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (64,192,576 samples, 6.41%)</title><rect x="12.2244%" y="405" width="6.4128%" height="15" fill="rgb(209,12,38)" fg:x="122367098" fg:w="64192576"/><text x="12.4744%" y="415.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (5,015,045 samples, 0.50%)</title><rect x="18.1363%" y="389" width="0.5010%" height="15" fill="rgb(227,1,9)" fg:x="181544629" fg:w="5015045"/><text x="18.3863%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,009,027 samples, 0.30%)</title><rect x="18.3367%" y="373" width="0.3006%" height="15" fill="rgb(248,47,43)" fg:x="183550647" fg:w="3009027"/><text x="18.5867%" y="383.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="18.3367%" y="357" width="0.3006%" height="15" fill="rgb(221,10,30)" fg:x="183550647" fg:w="3009027"/><text x="18.5867%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3,009,027 samples, 0.30%)</title><rect x="18.3367%" y="341" width="0.3006%" height="15" fill="rgb(210,229,1)" fg:x="183550647" fg:w="3009027"/><text x="18.5867%" y="351.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (3,009,027 samples, 0.30%)</title><rect x="18.3367%" y="325" width="0.3006%" height="15" fill="rgb(222,148,37)" fg:x="183550647" fg:w="3009027"/><text x="18.5867%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (3,009,027 samples, 0.30%)</title><rect x="18.3367%" y="309" width="0.3006%" height="15" fill="rgb(234,67,33)" fg:x="183550647" fg:w="3009027"/><text x="18.5867%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (3,009,027 samples, 0.30%)</title><rect x="18.3367%" y="293" width="0.3006%" height="15" fill="rgb(247,98,35)" fg:x="183550647" fg:w="3009027"/><text x="18.5867%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (1,003,009 samples, 0.10%)</title><rect x="18.5371%" y="277" width="0.1002%" height="15" fill="rgb(247,138,52)" fg:x="185556665" fg:w="1003009"/><text x="18.7871%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="18.5371%" y="261" width="0.1002%" height="15" fill="rgb(213,79,30)" fg:x="185556665" fg:w="1003009"/><text x="18.7871%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="20.1403%" y="325" width="0.8016%" height="15" fill="rgb(246,177,23)" fg:x="201604809" fg:w="8024072"/><text x="20.3903%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="20.1403%" y="309" width="0.8016%" height="15" fill="rgb(230,62,27)" fg:x="201604809" fg:w="8024072"/><text x="20.3903%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,024,072 samples, 0.80%)</title><rect x="20.1403%" y="293" width="0.8016%" height="15" fill="rgb(216,154,8)" fg:x="201604809" fg:w="8024072"/><text x="20.3903%" y="303.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="20.3407%" y="277" width="0.6012%" height="15" fill="rgb(244,35,45)" fg:x="203610827" fg:w="6018054"/><text x="20.5907%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="20.9419%" y="325" width="0.1002%" height="15" fill="rgb(251,115,12)" fg:x="209628881" fg:w="1003009"/><text x="21.1919%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="20.9419%" y="309" width="0.1002%" height="15" fill="rgb(240,54,50)" fg:x="209628881" fg:w="1003009"/><text x="21.1919%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,003,009 samples, 0.10%)</title><rect x="20.9419%" y="293" width="0.1002%" height="15" fill="rgb(233,84,52)" fg:x="209628881" fg:w="1003009"/><text x="21.1919%" y="303.50"></text></g><g><title>core::cmp::Ord::min (3,009,027 samples, 0.30%)</title><rect x="22.0441%" y="277" width="0.3006%" height="15" fill="rgb(207,117,47)" fg:x="220661980" fg:w="3009027"/><text x="22.2941%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (1,003,009 samples, 0.10%)</title><rect x="22.3447%" y="277" width="0.1002%" height="15" fill="rgb(249,43,39)" fg:x="223671007" fg:w="1003009"/><text x="22.5947%" y="287.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2,006,018 samples, 0.20%)</title><rect x="22.4449%" y="277" width="0.2004%" height="15" fill="rgb(209,38,44)" fg:x="224674016" fg:w="2006018"/><text x="22.6949%" y="287.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (50,150,450 samples, 5.01%)</title><rect x="18.6373%" y="373" width="5.0100%" height="15" fill="rgb(236,212,23)" fg:x="186559674" fg:w="50150450"/><text x="18.8873%" y="383.50">&lt;core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (50,150,450 samples, 5.01%)</title><rect x="18.6373%" y="357" width="5.0100%" height="15" fill="rgb(242,79,21)" fg:x="186559674" fg:w="50150450"/><text x="18.8873%" y="367.50">core::..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (44,132,396 samples, 4.41%)</title><rect x="19.2385%" y="341" width="4.4088%" height="15" fill="rgb(211,96,35)" fg:x="192577728" fg:w="44132396"/><text x="19.4885%" y="351.50">&lt;core..</text></g><g><title>core::slice::memchr::memchr (26,078,234 samples, 2.61%)</title><rect x="21.0421%" y="325" width="2.6052%" height="15" fill="rgb(253,215,40)" fg:x="210631890" fg:w="26078234"/><text x="21.2921%" y="335.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned (24,072,216 samples, 2.40%)</title><rect x="21.2425%" y="309" width="2.4048%" height="15" fill="rgb(211,81,21)" fg:x="212637908" fg:w="24072216"/><text x="21.4925%" y="319.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (20,060,180 samples, 2.00%)</title><rect x="21.6433%" y="293" width="2.0040%" height="15" fill="rgb(208,190,38)" fg:x="216649944" fg:w="20060180"/><text x="21.8933%" y="303.50">c..</text></g><g><title>core::slice::memchr::memchr_naive (10,030,090 samples, 1.00%)</title><rect x="22.6453%" y="277" width="1.0020%" height="15" fill="rgb(235,213,38)" fg:x="226680034" fg:w="10030090"/><text x="22.8953%" y="287.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (52,156,468 samples, 5.21%)</title><rect x="18.6373%" y="405" width="5.2104%" height="15" fill="rgb(237,122,38)" fg:x="186559674" fg:w="52156468"/><text x="18.8873%" y="415.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52,156,468 samples, 5.21%)</title><rect x="18.6373%" y="389" width="5.2104%" height="15" fill="rgb(244,218,35)" fg:x="186559674" fg:w="52156468"/><text x="18.8873%" y="399.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="373" width="0.2004%" height="15" fill="rgb(240,68,47)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="357" width="0.2004%" height="15" fill="rgb(210,16,53)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="367.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="341" width="0.2004%" height="15" fill="rgb(235,124,12)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="351.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="325" width="0.2004%" height="15" fill="rgb(224,169,11)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="309" width="0.2004%" height="15" fill="rgb(250,166,2)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="319.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="293" width="0.2004%" height="15" fill="rgb(242,216,29)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="303.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="277" width="0.2004%" height="15" fill="rgb(230,116,27)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="287.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="261" width="0.2004%" height="15" fill="rgb(228,99,48)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,006,018 samples, 0.20%)</title><rect x="23.6473%" y="245" width="0.2004%" height="15" fill="rgb(253,11,6)" fg:x="236710124" fg:w="2006018"/><text x="23.8973%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,021,063 samples, 0.70%)</title><rect x="27.2545%" y="389" width="0.7014%" height="15" fill="rgb(247,143,39)" fg:x="272818448" fg:w="7021063"/><text x="27.5045%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.40%)</title><rect x="27.5551%" y="373" width="0.4008%" height="15" fill="rgb(236,97,10)" fg:x="275827475" fg:w="4012036"/><text x="27.8051%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,009,027 samples, 0.30%)</title><rect x="27.6553%" y="357" width="0.3006%" height="15" fill="rgb(233,208,19)" fg:x="276830484" fg:w="3009027"/><text x="27.9053%" y="367.50"></text></g><g><title>ahash::operations::folded_multiply (10,030,090 samples, 1.00%)</title><rect x="29.7595%" y="229" width="1.0020%" height="15" fill="rgb(216,164,2)" fg:x="297893673" fg:w="10030090"/><text x="30.0095%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="30.6613%" y="213" width="0.1002%" height="15" fill="rgb(220,129,5)" fg:x="306920754" fg:w="1003009"/><text x="30.9113%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (13,039,117 samples, 1.30%)</title><rect x="29.7595%" y="245" width="1.3026%" height="15" fill="rgb(242,17,10)" fg:x="297893673" fg:w="13039117"/><text x="30.0095%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.30%)</title><rect x="30.7615%" y="229" width="0.3006%" height="15" fill="rgb(242,107,0)" fg:x="307923763" fg:w="3009027"/><text x="31.0115%" y="239.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (7,021,063 samples, 0.70%)</title><rect x="31.0621%" y="245" width="0.7014%" height="15" fill="rgb(251,28,31)" fg:x="310932790" fg:w="7021063"/><text x="31.3121%" y="255.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (7,021,063 samples, 0.70%)</title><rect x="31.0621%" y="229" width="0.7014%" height="15" fill="rgb(233,223,10)" fg:x="310932790" fg:w="7021063"/><text x="31.3121%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="31.7635%" y="197" width="0.3006%" height="15" fill="rgb(215,21,27)" fg:x="317953853" fg:w="3009027"/><text x="32.0135%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="31.7635%" y="181" width="0.3006%" height="15" fill="rgb(232,23,21)" fg:x="317953853" fg:w="3009027"/><text x="32.0135%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="31.7635%" y="165" width="0.3006%" height="15" fill="rgb(244,5,23)" fg:x="317953853" fg:w="3009027"/><text x="32.0135%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="31.7635%" y="149" width="0.3006%" height="15" fill="rgb(226,81,46)" fg:x="317953853" fg:w="3009027"/><text x="32.0135%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="31.9639%" y="133" width="0.1002%" height="15" fill="rgb(247,70,30)" fg:x="319959871" fg:w="1003009"/><text x="32.2139%" y="143.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="31.9639%" y="117" width="0.1002%" height="15" fill="rgb(212,68,19)" fg:x="319959871" fg:w="1003009"/><text x="32.2139%" y="127.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (13,039,117 samples, 1.30%)</title><rect x="32.0641%" y="165" width="1.3026%" height="15" fill="rgb(240,187,13)" fg:x="320962880" fg:w="13039117"/><text x="32.3141%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (8,024,072 samples, 0.80%)</title><rect x="32.5651%" y="149" width="0.8016%" height="15" fill="rgb(223,113,26)" fg:x="325977925" fg:w="8024072"/><text x="32.8151%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (48,144,432 samples, 4.81%)</title><rect x="29.7595%" y="277" width="4.8096%" height="15" fill="rgb(206,192,2)" fg:x="297893673" fg:w="48144432"/><text x="30.0095%" y="287.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (48,144,432 samples, 4.81%)</title><rect x="29.7595%" y="261" width="4.8096%" height="15" fill="rgb(241,108,4)" fg:x="297893673" fg:w="48144432"/><text x="30.0095%" y="271.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="31.7635%" y="245" width="2.8056%" height="15" fill="rgb(247,173,49)" fg:x="317953853" fg:w="28084252"/><text x="32.0135%" y="255.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="31.7635%" y="229" width="2.8056%" height="15" fill="rgb(224,114,35)" fg:x="317953853" fg:w="28084252"/><text x="32.0135%" y="239.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="31.7635%" y="213" width="2.8056%" height="15" fill="rgb(245,159,27)" fg:x="317953853" fg:w="28084252"/><text x="32.0135%" y="223.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (25,075,225 samples, 2.51%)</title><rect x="32.0641%" y="197" width="2.5050%" height="15" fill="rgb(245,172,44)" fg:x="320962880" fg:w="25075225"/><text x="32.3141%" y="207.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (25,075,225 samples, 2.51%)</title><rect x="32.0641%" y="181" width="2.5050%" height="15" fill="rgb(236,23,11)" fg:x="320962880" fg:w="25075225"/><text x="32.3141%" y="191.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (12,036,108 samples, 1.20%)</title><rect x="33.3667%" y="165" width="1.2024%" height="15" fill="rgb(205,117,38)" fg:x="334001997" fg:w="12036108"/><text x="33.6167%" y="175.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.60%)</title><rect x="36.5731%" y="229" width="0.6012%" height="15" fill="rgb(237,72,25)" fg:x="366098285" fg:w="6018054"/><text x="36.8231%" y="239.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (6,018,054 samples, 0.60%)</title><rect x="36.5731%" y="213" width="0.6012%" height="15" fill="rgb(244,70,9)" fg:x="366098285" fg:w="6018054"/><text x="36.8231%" y="223.50"></text></g><g><title>core::intrinsics::likely (12,036,108 samples, 1.20%)</title><rect x="37.1743%" y="229" width="1.2024%" height="15" fill="rgb(217,125,39)" fg:x="372116339" fg:w="12036108"/><text x="37.4243%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (11,033,099 samples, 1.10%)</title><rect x="38.3768%" y="229" width="1.1022%" height="15" fill="rgb(235,36,10)" fg:x="384152447" fg:w="11033099"/><text x="38.6268%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11,033,099 samples, 1.10%)</title><rect x="38.3768%" y="213" width="1.1022%" height="15" fill="rgb(251,123,47)" fg:x="384152447" fg:w="11033099"/><text x="38.6268%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,033,099 samples, 1.10%)</title><rect x="38.3768%" y="197" width="1.1022%" height="15" fill="rgb(221,13,13)" fg:x="384152447" fg:w="11033099"/><text x="38.6268%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,009,027 samples, 0.30%)</title><rect x="39.4790%" y="229" width="0.3006%" height="15" fill="rgb(238,131,9)" fg:x="395185546" fg:w="3009027"/><text x="39.7290%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,009,027 samples, 0.30%)</title><rect x="39.4790%" y="213" width="0.3006%" height="15" fill="rgb(211,50,8)" fg:x="395185546" fg:w="3009027"/><text x="39.7290%" y="223.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,012,036 samples, 0.40%)</title><rect x="39.7796%" y="229" width="0.4008%" height="15" fill="rgb(245,182,24)" fg:x="398194573" fg:w="4012036"/><text x="40.0296%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (88,264,792 samples, 8.82%)</title><rect x="40.1804%" y="213" width="8.8176%" height="15" fill="rgb(242,14,37)" fg:x="402206609" fg:w="88264792"/><text x="40.4304%" y="223.50">hashbrown::m..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (88,264,792 samples, 8.82%)</title><rect x="40.1804%" y="197" width="8.8176%" height="15" fill="rgb(246,228,12)" fg:x="402206609" fg:w="88264792"/><text x="40.4304%" y="207.50">&lt;Q as hashbr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (88,264,792 samples, 8.82%)</title><rect x="40.1804%" y="181" width="8.8176%" height="15" fill="rgb(213,55,15)" fg:x="402206609" fg:w="88264792"/><text x="40.4304%" y="191.50">core::cmp::i..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (88,264,792 samples, 8.82%)</title><rect x="40.1804%" y="165" width="8.8176%" height="15" fill="rgb(209,9,3)" fg:x="402206609" fg:w="88264792"/><text x="40.4304%" y="175.50">core::array:..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (88,264,792 samples, 8.82%)</title><rect x="40.1804%" y="149" width="8.8176%" height="15" fill="rgb(230,59,30)" fg:x="402206609" fg:w="88264792"/><text x="40.4304%" y="159.50">&lt;T as core::..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (16,048,144 samples, 1.60%)</title><rect x="48.9980%" y="213" width="1.6032%" height="15" fill="rgb(209,121,21)" fg:x="490471401" fg:w="16048144"/><text x="49.2480%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (16,048,144 samples, 1.60%)</title><rect x="48.9980%" y="197" width="1.6032%" height="15" fill="rgb(220,109,13)" fg:x="490471401" fg:w="16048144"/><text x="49.2480%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16,048,144 samples, 1.60%)</title><rect x="48.9980%" y="181" width="1.6032%" height="15" fill="rgb(232,18,1)" fg:x="490471401" fg:w="16048144"/><text x="49.2480%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (111,333,999 samples, 11.12%)</title><rect x="40.1804%" y="229" width="11.1222%" height="15" fill="rgb(215,41,42)" fg:x="402206609" fg:w="111333999"/><text x="40.4304%" y="239.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7,021,063 samples, 0.70%)</title><rect x="50.6012%" y="213" width="0.7014%" height="15" fill="rgb(224,123,36)" fg:x="506519545" fg:w="7021063"/><text x="50.8512%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7,021,063 samples, 0.70%)</title><rect x="50.6012%" y="197" width="0.7014%" height="15" fill="rgb(240,125,3)" fg:x="506519545" fg:w="7021063"/><text x="50.8512%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7,021,063 samples, 0.70%)</title><rect x="50.6012%" y="181" width="0.7014%" height="15" fill="rgb(205,98,50)" fg:x="506519545" fg:w="7021063"/><text x="50.8512%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (255,767,295 samples, 25.55%)</title><rect x="27.9559%" y="389" width="25.5511%" height="15" fill="rgb(205,185,37)" fg:x="279839511" fg:w="255767295"/><text x="28.2059%" y="399.50">core::cmp::impls::&lt;impl core::cmp::Partia..</text></g><g><title>core::cmp::PartialOrd::gt (255,767,295 samples, 25.55%)</title><rect x="27.9559%" y="373" width="25.5511%" height="15" fill="rgb(238,207,15)" fg:x="279839511" fg:w="255767295"/><text x="28.2059%" y="383.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (252,758,268 samples, 25.25%)</title><rect x="28.2565%" y="357" width="25.2505%" height="15" fill="rgb(213,199,42)" fg:x="282848538" fg:w="252758268"/><text x="28.5065%" y="367.50">&lt;aoc_2024_megaproject::problems::day5::P..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (245,737,205 samples, 24.55%)</title><rect x="28.9579%" y="341" width="24.5491%" height="15" fill="rgb(235,201,11)" fg:x="289869601" fg:w="245737205"/><text x="29.2079%" y="351.50">aoc_2024_megaproject::problems::day5::P..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (244,734,196 samples, 24.45%)</title><rect x="29.0581%" y="325" width="24.4489%" height="15" fill="rgb(207,46,11)" fg:x="290872610" fg:w="244734196"/><text x="29.3081%" y="335.50">std::collections::hash::map::HashMap&lt;K,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (244,734,196 samples, 24.45%)</title><rect x="29.0581%" y="309" width="24.4489%" height="15" fill="rgb(241,35,35)" fg:x="290872610" fg:w="244734196"/><text x="29.3081%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (244,734,196 samples, 24.45%)</title><rect x="29.0581%" y="293" width="24.4489%" height="15" fill="rgb(243,32,47)" fg:x="290872610" fg:w="244734196"/><text x="29.3081%" y="303.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_i..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (189,568,701 samples, 18.94%)</title><rect x="34.5691%" y="277" width="18.9379%" height="15" fill="rgb(247,202,23)" fg:x="346038105" fg:w="189568701"/><text x="34.8191%" y="287.50">hashbrown::raw::RawTable&lt;T,A&gt;:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (189,568,701 samples, 18.94%)</title><rect x="34.5691%" y="261" width="18.9379%" height="15" fill="rgb(219,102,11)" fg:x="346038105" fg:w="189568701"/><text x="34.8191%" y="271.50">hashbrown::raw::RawTable&lt;T,A&gt;:..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (189,568,701 samples, 18.94%)</title><rect x="34.5691%" y="245" width="18.9379%" height="15" fill="rgb(243,110,44)" fg:x="346038105" fg:w="189568701"/><text x="34.8191%" y="255.50">hashbrown::raw::RawTableInner:..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (22,066,198 samples, 2.20%)</title><rect x="51.3026%" y="229" width="2.2044%" height="15" fill="rgb(222,74,54)" fg:x="513540608" fg:w="22066198"/><text x="51.5526%" y="239.50">h..</text></g><g><title>ahash::operations::folded_multiply (10,030,090 samples, 1.00%)</title><rect x="55.6112%" y="229" width="1.0020%" height="15" fill="rgb(216,99,12)" fg:x="556669995" fg:w="10030090"/><text x="55.8612%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="56.4128%" y="213" width="0.2004%" height="15" fill="rgb(226,22,26)" fg:x="564694067" fg:w="2006018"/><text x="56.6628%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (13,039,117 samples, 1.30%)</title><rect x="55.6112%" y="245" width="1.3026%" height="15" fill="rgb(217,163,10)" fg:x="556669995" fg:w="13039117"/><text x="55.8612%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.30%)</title><rect x="56.6132%" y="229" width="0.3006%" height="15" fill="rgb(213,25,53)" fg:x="566700085" fg:w="3009027"/><text x="56.8632%" y="239.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (10,030,090 samples, 1.00%)</title><rect x="56.9138%" y="245" width="1.0020%" height="15" fill="rgb(252,105,26)" fg:x="569709112" fg:w="10030090"/><text x="57.1638%" y="255.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (10,030,090 samples, 1.00%)</title><rect x="56.9138%" y="229" width="1.0020%" height="15" fill="rgb(220,39,43)" fg:x="569709112" fg:w="10030090"/><text x="57.1638%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="57.9158%" y="197" width="0.2004%" height="15" fill="rgb(229,68,48)" fg:x="579739202" fg:w="2006018"/><text x="58.1658%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="57.9158%" y="181" width="0.2004%" height="15" fill="rgb(252,8,32)" fg:x="579739202" fg:w="2006018"/><text x="58.1658%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="57.9158%" y="165" width="0.2004%" height="15" fill="rgb(223,20,43)" fg:x="579739202" fg:w="2006018"/><text x="58.1658%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="57.9158%" y="149" width="0.2004%" height="15" fill="rgb(229,81,49)" fg:x="579739202" fg:w="2006018"/><text x="58.1658%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (13,039,117 samples, 1.30%)</title><rect x="58.4168%" y="149" width="1.3026%" height="15" fill="rgb(236,28,36)" fg:x="584754247" fg:w="13039117"/><text x="58.6668%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="59.5190%" y="133" width="0.2004%" height="15" fill="rgb(249,185,26)" fg:x="595787346" fg:w="2006018"/><text x="59.7690%" y="143.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (19,057,171 samples, 1.90%)</title><rect x="58.1162%" y="165" width="1.9038%" height="15" fill="rgb(249,174,33)" fg:x="581745220" fg:w="19057171"/><text x="58.3662%" y="175.50">a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.30%)</title><rect x="59.7194%" y="149" width="0.3006%" height="15" fill="rgb(233,201,37)" fg:x="597793364" fg:w="3009027"/><text x="59.9694%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (61,183,549 samples, 6.11%)</title><rect x="55.6112%" y="277" width="6.1122%" height="15" fill="rgb(221,78,26)" fg:x="556669995" fg:w="61183549"/><text x="55.8612%" y="287.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (61,183,549 samples, 6.11%)</title><rect x="55.6112%" y="261" width="6.1122%" height="15" fill="rgb(250,127,30)" fg:x="556669995" fg:w="61183549"/><text x="55.8612%" y="271.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (38,114,342 samples, 3.81%)</title><rect x="57.9158%" y="245" width="3.8076%" height="15" fill="rgb(230,49,44)" fg:x="579739202" fg:w="38114342"/><text x="58.1658%" y="255.50">core..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (38,114,342 samples, 3.81%)</title><rect x="57.9158%" y="229" width="3.8076%" height="15" fill="rgb(229,67,23)" fg:x="579739202" fg:w="38114342"/><text x="58.1658%" y="239.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (38,114,342 samples, 3.81%)</title><rect x="57.9158%" y="213" width="3.8076%" height="15" fill="rgb(249,83,47)" fg:x="579739202" fg:w="38114342"/><text x="58.1658%" y="223.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (36,108,324 samples, 3.61%)</title><rect x="58.1162%" y="197" width="3.6072%" height="15" fill="rgb(215,43,3)" fg:x="581745220" fg:w="36108324"/><text x="58.3662%" y="207.50">core..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (36,108,324 samples, 3.61%)</title><rect x="58.1162%" y="181" width="3.6072%" height="15" fill="rgb(238,154,13)" fg:x="581745220" fg:w="36108324"/><text x="58.3662%" y="191.50">&lt;aha..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (17,051,153 samples, 1.70%)</title><rect x="60.0200%" y="165" width="1.7034%" height="15" fill="rgb(219,56,2)" fg:x="600802391" fg:w="17051153"/><text x="60.2700%" y="175.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 1.00%)</title><rect x="63.4269%" y="229" width="1.0020%" height="15" fill="rgb(233,0,4)" fg:x="634904697" fg:w="10030090"/><text x="63.6769%" y="239.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (10,030,090 samples, 1.00%)</title><rect x="63.4269%" y="213" width="1.0020%" height="15" fill="rgb(235,30,7)" fg:x="634904697" fg:w="10030090"/><text x="63.6769%" y="223.50"></text></g><g><title>core::intrinsics::likely (16,048,144 samples, 1.60%)</title><rect x="64.4289%" y="229" width="1.6032%" height="15" fill="rgb(250,79,13)" fg:x="644934787" fg:w="16048144"/><text x="64.6789%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (9,027,081 samples, 0.90%)</title><rect x="66.0321%" y="229" width="0.9018%" height="15" fill="rgb(211,146,34)" fg:x="660982931" fg:w="9027081"/><text x="66.2821%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9,027,081 samples, 0.90%)</title><rect x="66.0321%" y="213" width="0.9018%" height="15" fill="rgb(228,22,38)" fg:x="660982931" fg:w="9027081"/><text x="66.2821%" y="223.50"></text></g><g><title>hashbrown::control::tag::Tag::full (5,015,045 samples, 0.50%)</title><rect x="66.9339%" y="229" width="0.5010%" height="15" fill="rgb(235,168,5)" fg:x="670010012" fg:w="5015045"/><text x="67.1839%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (69,207,621 samples, 6.91%)</title><rect x="67.4349%" y="213" width="6.9138%" height="15" fill="rgb(221,155,16)" fg:x="675025057" fg:w="69207621"/><text x="67.6849%" y="223.50">hashbrown..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (69,207,621 samples, 6.91%)</title><rect x="67.4349%" y="197" width="6.9138%" height="15" fill="rgb(215,215,53)" fg:x="675025057" fg:w="69207621"/><text x="67.6849%" y="207.50">&lt;Q as has..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (69,207,621 samples, 6.91%)</title><rect x="67.4349%" y="181" width="6.9138%" height="15" fill="rgb(223,4,10)" fg:x="675025057" fg:w="69207621"/><text x="67.6849%" y="191.50">core::cmp..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (69,207,621 samples, 6.91%)</title><rect x="67.4349%" y="165" width="6.9138%" height="15" fill="rgb(234,103,6)" fg:x="675025057" fg:w="69207621"/><text x="67.6849%" y="175.50">core::arr..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (69,207,621 samples, 6.91%)</title><rect x="67.4349%" y="149" width="6.9138%" height="15" fill="rgb(227,97,0)" fg:x="675025057" fg:w="69207621"/><text x="67.6849%" y="159.50">&lt;T as cor..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13,039,117 samples, 1.30%)</title><rect x="74.3487%" y="213" width="1.3026%" height="15" fill="rgb(234,150,53)" fg:x="744232678" fg:w="13039117"/><text x="74.5987%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13,039,117 samples, 1.30%)</title><rect x="74.3487%" y="197" width="1.3026%" height="15" fill="rgb(228,201,54)" fg:x="744232678" fg:w="13039117"/><text x="74.5987%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13,039,117 samples, 1.30%)</title><rect x="74.3487%" y="181" width="1.3026%" height="15" fill="rgb(222,22,37)" fg:x="744232678" fg:w="13039117"/><text x="74.5987%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (94,282,846 samples, 9.42%)</title><rect x="67.4349%" y="229" width="9.4188%" height="15" fill="rgb(237,53,32)" fg:x="675025057" fg:w="94282846"/><text x="67.6849%" y="239.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12,036,108 samples, 1.20%)</title><rect x="75.6513%" y="213" width="1.2024%" height="15" fill="rgb(233,25,53)" fg:x="757271795" fg:w="12036108"/><text x="75.9013%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (12,036,108 samples, 1.20%)</title><rect x="75.6513%" y="197" width="1.2024%" height="15" fill="rgb(210,40,34)" fg:x="757271795" fg:w="12036108"/><text x="75.9013%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,036,108 samples, 1.20%)</title><rect x="75.6513%" y="181" width="1.2024%" height="15" fill="rgb(241,220,44)" fg:x="757271795" fg:w="12036108"/><text x="75.9013%" y="191.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (544,633,887 samples, 54.41%)</title><rect x="23.8477%" y="405" width="54.4088%" height="15" fill="rgb(235,28,35)" fg:x="238716142" fg:w="544633887"/><text x="24.0977%" y="415.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (247,743,223 samples, 24.75%)</title><rect x="53.5070%" y="389" width="24.7495%" height="15" fill="rgb(210,56,17)" fg:x="535606806" fg:w="247743223"/><text x="53.7570%" y="399.50">core::cmp::impls::&lt;impl core::cmp::Part..</text></g><g><title>core::cmp::PartialOrd::lt (247,743,223 samples, 24.75%)</title><rect x="53.5070%" y="373" width="24.7495%" height="15" fill="rgb(224,130,29)" fg:x="535606806" fg:w="247743223"/><text x="53.7570%" y="383.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (247,743,223 samples, 24.75%)</title><rect x="53.5070%" y="357" width="24.7495%" height="15" fill="rgb(235,212,8)" fg:x="535606806" fg:w="247743223"/><text x="53.7570%" y="367.50">&lt;aoc_2024_megaproject::problems::day5::..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (246,740,214 samples, 24.65%)</title><rect x="53.6072%" y="341" width="24.6493%" height="15" fill="rgb(223,33,50)" fg:x="536609815" fg:w="246740214"/><text x="53.8572%" y="351.50">aoc_2024_megaproject::problems::day5::P..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (240,722,160 samples, 24.05%)</title><rect x="54.2084%" y="325" width="24.0481%" height="15" fill="rgb(219,149,13)" fg:x="542627869" fg:w="240722160"/><text x="54.4584%" y="335.50">std::collections::hash::map::HashMap&lt;K..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (240,722,160 samples, 24.05%)</title><rect x="54.2084%" y="309" width="24.0481%" height="15" fill="rgb(250,156,29)" fg:x="542627869" fg:w="240722160"/><text x="54.4584%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (240,722,160 samples, 24.05%)</title><rect x="54.2084%" y="293" width="24.0481%" height="15" fill="rgb(216,193,19)" fg:x="542627869" fg:w="240722160"/><text x="54.4584%" y="303.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (165,496,485 samples, 16.53%)</title><rect x="61.7234%" y="277" width="16.5331%" height="15" fill="rgb(216,135,14)" fg:x="617853544" fg:w="165496485"/><text x="61.9734%" y="287.50">hashbrown::raw::RawTable&lt;T..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (165,496,485 samples, 16.53%)</title><rect x="61.7234%" y="261" width="16.5331%" height="15" fill="rgb(241,47,5)" fg:x="617853544" fg:w="165496485"/><text x="61.9734%" y="271.50">hashbrown::raw::RawTable&lt;T..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (165,496,485 samples, 16.53%)</title><rect x="61.7234%" y="245" width="16.5331%" height="15" fill="rgb(233,42,35)" fg:x="617853544" fg:w="165496485"/><text x="61.9734%" y="255.50">hashbrown::raw::RawTableIn..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (14,042,126 samples, 1.40%)</title><rect x="76.8537%" y="229" width="1.4028%" height="15" fill="rgb(231,13,6)" fg:x="769307903" fg:w="14042126"/><text x="77.1037%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="80.2605%" y="293" width="0.8016%" height="15" fill="rgb(207,181,40)" fg:x="803410209" fg:w="8024072"/><text x="80.5105%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="80.2605%" y="277" width="0.8016%" height="15" fill="rgb(254,173,49)" fg:x="803410209" fg:w="8024072"/><text x="80.5105%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,024,072 samples, 0.80%)</title><rect x="80.2605%" y="261" width="0.8016%" height="15" fill="rgb(221,1,38)" fg:x="803410209" fg:w="8024072"/><text x="80.5105%" y="271.50"></text></g><g><title>[libc.so.6] (5,015,045 samples, 0.50%)</title><rect x="80.5611%" y="245" width="0.5010%" height="15" fill="rgb(206,124,46)" fg:x="806419236" fg:w="5015045"/><text x="80.8111%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,009,027 samples, 0.30%)</title><rect x="81.0621%" y="293" width="0.3006%" height="15" fill="rgb(249,21,11)" fg:x="811434281" fg:w="3009027"/><text x="81.3121%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,009,027 samples, 0.30%)</title><rect x="81.0621%" y="277" width="0.3006%" height="15" fill="rgb(222,201,40)" fg:x="811434281" fg:w="3009027"/><text x="81.3121%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,009,027 samples, 0.30%)</title><rect x="81.0621%" y="261" width="0.3006%" height="15" fill="rgb(235,61,29)" fg:x="811434281" fg:w="3009027"/><text x="81.3121%" y="271.50"></text></g><g><title>core::cmp::Ord::min (3,009,027 samples, 0.30%)</title><rect x="82.4649%" y="245" width="0.3006%" height="15" fill="rgb(219,207,3)" fg:x="825476407" fg:w="3009027"/><text x="82.7149%" y="255.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="82.7655%" y="245" width="0.1002%" height="15" fill="rgb(222,56,46)" fg:x="828485434" fg:w="1003009"/><text x="83.0155%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (56,168,504 samples, 5.61%)</title><rect x="78.2565%" y="405" width="5.6112%" height="15" fill="rgb(239,76,54)" fg:x="783350029" fg:w="56168504"/><text x="78.5065%" y="415.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (56,168,504 samples, 5.61%)</title><rect x="78.2565%" y="389" width="5.6112%" height="15" fill="rgb(231,124,27)" fg:x="783350029" fg:w="56168504"/><text x="78.5065%" y="399.50">core::i..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (56,168,504 samples, 5.61%)</title><rect x="78.2565%" y="373" width="5.6112%" height="15" fill="rgb(249,195,6)" fg:x="783350029" fg:w="56168504"/><text x="78.5065%" y="383.50">&lt;core::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56,168,504 samples, 5.61%)</title><rect x="78.2565%" y="357" width="5.6112%" height="15" fill="rgb(237,174,47)" fg:x="783350029" fg:w="56168504"/><text x="78.5065%" y="367.50">&lt;core::..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (56,168,504 samples, 5.61%)</title><rect x="78.2565%" y="341" width="5.6112%" height="15" fill="rgb(206,201,31)" fg:x="783350029" fg:w="56168504"/><text x="78.5065%" y="351.50">&lt;core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (56,168,504 samples, 5.61%)</title><rect x="78.2565%" y="325" width="5.6112%" height="15" fill="rgb(231,57,52)" fg:x="783350029" fg:w="56168504"/><text x="78.5065%" y="335.50">core::s..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (45,135,405 samples, 4.51%)</title><rect x="79.3587%" y="309" width="4.5090%" height="15" fill="rgb(248,177,22)" fg:x="794383128" fg:w="45135405"/><text x="79.6087%" y="319.50">&lt;core..</text></g><g><title>core::slice::memchr::memchr (25,075,225 samples, 2.51%)</title><rect x="81.3627%" y="293" width="2.5050%" height="15" fill="rgb(215,211,37)" fg:x="814443308" fg:w="25075225"/><text x="81.6127%" y="303.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned (22,066,198 samples, 2.20%)</title><rect x="81.6633%" y="277" width="2.2044%" height="15" fill="rgb(241,128,51)" fg:x="817452335" fg:w="22066198"/><text x="81.9133%" y="287.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (15,045,135 samples, 1.50%)</title><rect x="82.3647%" y="261" width="1.5030%" height="15" fill="rgb(227,165,31)" fg:x="824473398" fg:w="15045135"/><text x="82.6147%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (10,030,090 samples, 1.00%)</title><rect x="82.8657%" y="245" width="1.0020%" height="15" fill="rgb(228,167,24)" fg:x="829488443" fg:w="10030090"/><text x="83.1157%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (5,015,045 samples, 0.50%)</title><rect x="89.4790%" y="341" width="0.5010%" height="15" fill="rgb(228,143,12)" fg:x="895687037" fg:w="5015045"/><text x="89.7290%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,015,045 samples, 0.50%)</title><rect x="89.4790%" y="325" width="0.5010%" height="15" fill="rgb(249,149,8)" fg:x="895687037" fg:w="5015045"/><text x="89.7290%" y="335.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="89.5792%" y="309" width="0.4008%" height="15" fill="rgb(243,35,44)" fg:x="896690046" fg:w="4012036"/><text x="89.8292%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,012,036 samples, 0.40%)</title><rect x="89.9800%" y="341" width="0.4008%" height="15" fill="rgb(246,89,9)" fg:x="900702082" fg:w="4012036"/><text x="90.2300%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,012,036 samples, 0.40%)</title><rect x="89.9800%" y="325" width="0.4008%" height="15" fill="rgb(233,213,13)" fg:x="900702082" fg:w="4012036"/><text x="90.2300%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,012,036 samples, 0.40%)</title><rect x="89.9800%" y="309" width="0.4008%" height="15" fill="rgb(233,141,41)" fg:x="900702082" fg:w="4012036"/><text x="90.2300%" y="319.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (7,021,063 samples, 0.70%)</title><rect x="90.3808%" y="341" width="0.7014%" height="15" fill="rgb(239,167,4)" fg:x="904714118" fg:w="7021063"/><text x="90.6308%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,021,063 samples, 0.70%)</title><rect x="90.3808%" y="325" width="0.7014%" height="15" fill="rgb(209,217,16)" fg:x="904714118" fg:w="7021063"/><text x="90.6308%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (73,219,657 samples, 7.31%)</title><rect x="83.8677%" y="405" width="7.3146%" height="15" fill="rgb(219,88,35)" fg:x="839518533" fg:w="73219657"/><text x="84.1177%" y="415.50">core::str:..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (26,078,234 samples, 2.61%)</title><rect x="88.5772%" y="389" width="2.6052%" height="15" fill="rgb(220,193,23)" fg:x="886659956" fg:w="26078234"/><text x="88.8272%" y="399.50">&lt;&amp;..</text></g><g><title>core::str::pattern::StrSearcher::new (26,078,234 samples, 2.61%)</title><rect x="88.5772%" y="373" width="2.6052%" height="15" fill="rgb(230,90,52)" fg:x="886659956" fg:w="26078234"/><text x="88.8272%" y="383.50">co..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (17,051,153 samples, 1.70%)</title><rect x="89.4790%" y="357" width="1.7034%" height="15" fill="rgb(252,106,19)" fg:x="895687037" fg:w="17051153"/><text x="89.7290%" y="367.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1,003,009 samples, 0.10%)</title><rect x="91.0822%" y="341" width="0.1002%" height="15" fill="rgb(206,74,20)" fg:x="911735181" fg:w="1003009"/><text x="91.3322%" y="351.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.60%)</title><rect x="91.7836%" y="325" width="0.6012%" height="15" fill="rgb(230,138,44)" fg:x="918756244" fg:w="6018054"/><text x="92.0336%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (6,018,054 samples, 0.60%)</title><rect x="91.7836%" y="309" width="0.6012%" height="15" fill="rgb(235,182,43)" fg:x="918756244" fg:w="6018054"/><text x="92.0336%" y="319.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (9,027,081 samples, 0.90%)</title><rect x="92.3848%" y="325" width="0.9018%" height="15" fill="rgb(242,16,51)" fg:x="924774298" fg:w="9027081"/><text x="92.6348%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9,027,081 samples, 0.90%)</title><rect x="92.3848%" y="309" width="0.9018%" height="15" fill="rgb(248,9,4)" fg:x="924774298" fg:w="9027081"/><text x="92.6348%" y="319.50"></text></g><g><title>hashbrown::control::tag::Tag::full (9,027,081 samples, 0.90%)</title><rect x="93.2866%" y="325" width="0.9018%" height="15" fill="rgb(210,31,22)" fg:x="933801379" fg:w="9027081"/><text x="93.5366%" y="335.50"></text></g><g><title>core::intrinsics::unlikely (1,003,009 samples, 0.10%)</title><rect x="94.1884%" y="309" width="0.1002%" height="15" fill="rgb(239,54,39)" fg:x="942828460" fg:w="1003009"/><text x="94.4384%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (33,099,297 samples, 3.31%)</title><rect x="91.6834%" y="373" width="3.3066%" height="15" fill="rgb(230,99,41)" fg:x="917753235" fg:w="33099297"/><text x="91.9334%" y="383.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (33,099,297 samples, 3.31%)</title><rect x="91.6834%" y="357" width="3.3066%" height="15" fill="rgb(253,106,12)" fg:x="917753235" fg:w="33099297"/><text x="91.9334%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (33,099,297 samples, 3.31%)</title><rect x="91.6834%" y="341" width="3.3066%" height="15" fill="rgb(213,46,41)" fg:x="917753235" fg:w="33099297"/><text x="91.9334%" y="351.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (8,024,072 samples, 0.80%)</title><rect x="94.1884%" y="325" width="0.8016%" height="15" fill="rgb(215,133,35)" fg:x="942828460" fg:w="8024072"/><text x="94.4384%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (7,021,063 samples, 0.70%)</title><rect x="94.2886%" y="309" width="0.7014%" height="15" fill="rgb(213,28,5)" fg:x="943831469" fg:w="7021063"/><text x="94.5386%" y="319.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (7,021,063 samples, 0.70%)</title><rect x="94.2886%" y="293" width="0.7014%" height="15" fill="rgb(215,77,49)" fg:x="943831469" fg:w="7021063"/><text x="94.5386%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="94.9900%" y="325" width="0.2004%" height="15" fill="rgb(248,100,22)" fg:x="950852532" fg:w="2006018"/><text x="95.2400%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="95.0902%" y="309" width="0.1002%" height="15" fill="rgb(208,67,9)" fg:x="951855541" fg:w="1003009"/><text x="95.3402%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (8,024,072 samples, 0.80%)</title><rect x="94.9900%" y="341" width="0.8016%" height="15" fill="rgb(219,133,21)" fg:x="950852532" fg:w="8024072"/><text x="95.2400%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.60%)</title><rect x="95.1904%" y="325" width="0.6012%" height="15" fill="rgb(246,46,29)" fg:x="952858550" fg:w="6018054"/><text x="95.4404%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.10%)</title><rect x="96.6934%" y="293" width="0.1002%" height="15" fill="rgb(246,185,52)" fg:x="967903685" fg:w="1003009"/><text x="96.9434%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,003,009 samples, 0.10%)</title><rect x="96.6934%" y="277" width="0.1002%" height="15" fill="rgb(252,136,11)" fg:x="967903685" fg:w="1003009"/><text x="96.9434%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,003,009 samples, 0.10%)</title><rect x="96.6934%" y="261" width="0.1002%" height="15" fill="rgb(219,138,53)" fg:x="967903685" fg:w="1003009"/><text x="96.9434%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,003,009 samples, 0.10%)</title><rect x="96.6934%" y="245" width="0.1002%" height="15" fill="rgb(211,51,23)" fg:x="967903685" fg:w="1003009"/><text x="96.9434%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="96.6934%" y="229" width="0.1002%" height="15" fill="rgb(247,221,28)" fg:x="967903685" fg:w="1003009"/><text x="96.9434%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="96.6934%" y="213" width="0.1002%" height="15" fill="rgb(251,222,45)" fg:x="967903685" fg:w="1003009"/><text x="96.9434%" y="223.50"></text></g><g><title>ahash::operations::folded_multiply (6,018,054 samples, 0.60%)</title><rect x="96.8938%" y="245" width="0.6012%" height="15" fill="rgb(217,162,53)" fg:x="969909703" fg:w="6018054"/><text x="97.1438%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="97.3948%" y="229" width="0.1002%" height="15" fill="rgb(229,93,14)" fg:x="974924748" fg:w="1003009"/><text x="97.6448%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (29,087,261 samples, 2.91%)</title><rect x="94.9900%" y="373" width="2.9058%" height="15" fill="rgb(209,67,49)" fg:x="950852532" fg:w="29087261"/><text x="95.2400%" y="383.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (29,087,261 samples, 2.91%)</title><rect x="94.9900%" y="357" width="2.9058%" height="15" fill="rgb(213,87,29)" fg:x="950852532" fg:w="29087261"/><text x="95.2400%" y="367.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (21,063,189 samples, 2.10%)</title><rect x="95.7916%" y="341" width="2.1042%" height="15" fill="rgb(205,151,52)" fg:x="958876604" fg:w="21063189"/><text x="96.0416%" y="351.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (21,063,189 samples, 2.10%)</title><rect x="95.7916%" y="325" width="2.1042%" height="15" fill="rgb(253,215,39)" fg:x="958876604" fg:w="21063189"/><text x="96.0416%" y="335.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (21,063,189 samples, 2.10%)</title><rect x="95.7916%" y="309" width="2.1042%" height="15" fill="rgb(221,220,41)" fg:x="958876604" fg:w="21063189"/><text x="96.0416%" y="319.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (11,033,099 samples, 1.10%)</title><rect x="96.7936%" y="293" width="1.1022%" height="15" fill="rgb(218,133,21)" fg:x="968906694" fg:w="11033099"/><text x="97.0436%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (11,033,099 samples, 1.10%)</title><rect x="96.7936%" y="277" width="1.1022%" height="15" fill="rgb(221,193,43)" fg:x="968906694" fg:w="11033099"/><text x="97.0436%" y="287.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (11,033,099 samples, 1.10%)</title><rect x="96.7936%" y="261" width="1.1022%" height="15" fill="rgb(240,128,52)" fg:x="968906694" fg:w="11033099"/><text x="97.0436%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.40%)</title><rect x="97.4950%" y="245" width="0.4008%" height="15" fill="rgb(253,114,12)" fg:x="975927757" fg:w="4012036"/><text x="97.7450%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (14,042,126 samples, 1.40%)</title><rect x="97.8958%" y="357" width="1.4028%" height="15" fill="rgb(215,223,47)" fg:x="979939793" fg:w="14042126"/><text x="98.1458%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (14,042,126 samples, 1.40%)</title><rect x="97.8958%" y="341" width="1.4028%" height="15" fill="rgb(248,225,23)" fg:x="979939793" fg:w="14042126"/><text x="98.1458%" y="351.50"></text></g><g><title>core::ptr::write (14,042,126 samples, 1.40%)</title><rect x="97.8958%" y="325" width="1.4028%" height="15" fill="rgb(250,108,0)" fg:x="979939793" fg:w="14042126"/><text x="98.1458%" y="335.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (997,993,955 samples, 99.70%)</title><rect x="0.1002%" y="453" width="99.6994%" height="15" fill="rgb(228,208,7)" fg:x="1003009" fg:w="997993955"/><text x="0.3502%" y="463.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1 (997,993,955 samples, 99.70%)</title><rect x="0.1002%" y="437" width="99.6994%" height="15" fill="rgb(244,45,10)" fg:x="1003009" fg:w="997993955"/><text x="0.3502%" y="447.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day5::part1 (997,993,955 samples, 99.70%)</title><rect x="0.1002%" y="421" width="99.6994%" height="15" fill="rgb(207,125,25)" fg:x="1003009" fg:w="997993955"/><text x="0.3502%" y="431.50">aoc_2024_megaproject::problems::day5::part1</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (86,258,774 samples, 8.62%)</title><rect x="91.1824%" y="405" width="8.6172%" height="15" fill="rgb(210,195,18)" fg:x="912738190" fg:w="86258774"/><text x="91.4324%" y="415.50">std::collect..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84,252,756 samples, 8.42%)</title><rect x="91.3828%" y="389" width="8.4168%" height="15" fill="rgb(249,80,12)" fg:x="914744208" fg:w="84252756"/><text x="91.6328%" y="399.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (19,057,171 samples, 1.90%)</title><rect x="97.8958%" y="373" width="1.9038%" height="15" fill="rgb(221,65,9)" fg:x="979939793" fg:w="19057171"/><text x="98.1458%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (5,015,045 samples, 0.50%)</title><rect x="99.2986%" y="357" width="0.5010%" height="15" fill="rgb(235,49,36)" fg:x="993981919" fg:w="5015045"/><text x="99.5486%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (2,006,018 samples, 0.20%)</title><rect x="99.5992%" y="341" width="0.2004%" height="15" fill="rgb(225,32,20)" fg:x="996990946" fg:w="2006018"/><text x="99.8492%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2,006,018 samples, 0.20%)</title><rect x="99.5992%" y="325" width="0.2004%" height="15" fill="rgb(215,141,46)" fg:x="996990946" fg:w="2006018"/><text x="99.8492%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="309" width="0.1002%" height="15" fill="rgb(250,160,47)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="453" width="0.1002%" height="15" fill="rgb(216,222,40)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="437" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="421" width="0.1002%" height="15" fill="rgb(207,178,40)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="431.50"></text></g><g><title>aoc_2024_megaproject::repeat_part::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="405" width="0.1002%" height="15" fill="rgb(221,136,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="389" width="0.1002%" height="15" fill="rgb(249,199,10)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="373" width="0.1002%" height="15" fill="rgb(249,222,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="357" width="0.1002%" height="15" fill="rgb(244,185,38)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(236,202,9)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="325" width="0.1002%" height="15" fill="rgb(250,229,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="309" width="0.1002%" height="15" fill="rgb(206,174,23)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="293" width="0.1002%" height="15" fill="rgb(211,33,43)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="303.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="277" width="0.1002%" height="15" fill="rgb(245,58,50)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="287.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="783.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="741" width="99.8998%" height="15" fill="rgb(212,155,44)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="751.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="725" width="99.8998%" height="15" fill="rgb(226,2,50)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="735.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="709" width="99.8998%" height="15" fill="rgb(234,177,6)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="719.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="693" width="99.8998%" height="15" fill="rgb(217,24,9)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="677" width="99.8998%" height="15" fill="rgb(220,13,46)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="661" width="99.8998%" height="15" fill="rgb(239,221,27)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="645" width="99.8998%" height="15" fill="rgb(222,198,25)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="629" width="99.8998%" height="15" fill="rgb(211,99,13)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="613" width="99.8998%" height="15" fill="rgb(232,111,31)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="623.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="597" width="99.8998%" height="15" fill="rgb(245,82,37)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="581" width="99.8998%" height="15" fill="rgb(227,149,46)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="565" width="99.8998%" height="15" fill="rgb(218,36,50)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="549" width="99.8998%" height="15" fill="rgb(226,80,48)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="533" width="99.8998%" height="15" fill="rgb(238,224,15)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="543.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="517" width="99.8998%" height="15" fill="rgb(241,136,10)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="527.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="501" width="99.8998%" height="15" fill="rgb(208,32,45)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="485" width="99.8998%" height="15" fill="rgb(207,135,9)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="495.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="469" width="99.8998%" height="15" fill="rgb(206,86,44)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="479.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="453" width="0.1002%" height="15" fill="rgb(245,177,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="463.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="437" width="0.1002%" height="15" fill="rgb(206,64,50)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="447.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="421" width="0.1002%" height="15" fill="rgb(234,36,40)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="405" width="0.1002%" height="15" fill="rgb(213,64,8)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="389" width="0.1002%" height="15" fill="rgb(210,75,36)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="373" width="0.1002%" height="15" fill="rgb(229,88,21)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="357" width="0.1002%" height="15" fill="rgb(252,204,47)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="341" width="0.1002%" height="15" fill="rgb(208,77,27)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="325" width="0.1002%" height="15" fill="rgb(221,76,26)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="309" width="0.1002%" height="15" fill="rgb(225,139,18)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="293" width="0.1002%" height="15" fill="rgb(230,137,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="277" width="0.1002%" height="15" fill="rgb(212,28,1)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="261" width="0.1002%" height="15" fill="rgb(248,164,17)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="245" width="0.1002%" height="15" fill="rgb(222,171,42)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="229" width="0.1002%" height="15" fill="rgb(243,84,45)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(252,49,23)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="197" width="0.1002%" height="15" fill="rgb(215,19,7)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="181" width="0.1002%" height="15" fill="rgb(238,81,41)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="165" width="0.1002%" height="15" fill="rgb(210,199,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="149" width="0.1002%" height="15" fill="rgb(244,192,49)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="133" width="0.1002%" height="15" fill="rgb(226,211,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="117" width="0.1002%" height="15" fill="rgb(236,162,54)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="101" width="0.1002%" height="15" fill="rgb(220,229,9)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="85" width="0.1002%" height="15" fill="rgb(250,87,22)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="69" width="0.1002%" height="15" fill="rgb(239,43,17)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="53" width="0.1002%" height="15" fill="rgb(231,177,25)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="63.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="37" width="0.1002%" height="15" fill="rgb(219,179,1)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="47.50"></text></g></svg></svg>