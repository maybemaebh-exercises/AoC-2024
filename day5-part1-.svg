<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="999999973"><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="965" width="0.1003%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="975.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="949" width="0.1003%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="959.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="933" width="0.1003%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="943.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="917" width="0.1003%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="901" width="0.1003%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="911.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="885" width="0.1003%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="895.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="869" width="0.1003%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="879.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="853" width="0.1003%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="863.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="837" width="0.1003%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="821" width="0.1003%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="805" width="0.1003%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="789" width="0.1003%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="773" width="0.1003%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="757" width="0.1003%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="741" width="0.1003%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="725" width="0.1003%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="709" width="0.1003%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="693" width="0.1003%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="11.2337%" y="501" width="0.2006%" height="15" fill="rgb(221,200,47)" fg:x="112337008" fg:w="2006018"/><text x="11.4837%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (2,006,018 samples, 0.20%)</title><rect x="11.2337%" y="485" width="0.2006%" height="15" fill="rgb(226,26,5)" fg:x="112337008" fg:w="2006018"/><text x="11.4837%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (2,006,018 samples, 0.20%)</title><rect x="11.2337%" y="469" width="0.2006%" height="15" fill="rgb(249,33,26)" fg:x="112337008" fg:w="2006018"/><text x="11.4837%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="11.2337%" y="453" width="0.2006%" height="15" fill="rgb(235,183,28)" fg:x="112337008" fg:w="2006018"/><text x="11.4837%" y="463.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (2,006,018 samples, 0.20%)</title><rect x="11.4343%" y="501" width="0.2006%" height="15" fill="rgb(221,5,38)" fg:x="114343026" fg:w="2006018"/><text x="11.6843%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="11.6349%" y="501" width="0.2006%" height="15" fill="rgb(247,18,42)" fg:x="116349044" fg:w="2006018"/><text x="11.8849%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="11.6349%" y="485" width="0.2006%" height="15" fill="rgb(241,131,45)" fg:x="116349044" fg:w="2006018"/><text x="11.8849%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="11.6349%" y="469" width="0.2006%" height="15" fill="rgb(249,31,29)" fg:x="116349044" fg:w="2006018"/><text x="11.8849%" y="479.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (90,270,810 samples, 9.03%)</title><rect x="2.9087%" y="533" width="9.0271%" height="15" fill="rgb(225,111,53)" fg:x="29087261" fg:w="90270810"/><text x="3.1587%" y="543.50">&lt;core::str::p..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (65,195,585 samples, 6.52%)</title><rect x="5.4162%" y="517" width="6.5196%" height="15" fill="rgb(238,160,17)" fg:x="54162486" fg:w="65195585"/><text x="5.6662%" y="527.50">core::str..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="11.8355%" y="501" width="0.1003%" height="15" fill="rgb(214,148,48)" fg:x="118355062" fg:w="1003009"/><text x="12.0855%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="11.8355%" y="485" width="0.1003%" height="15" fill="rgb(232,36,49)" fg:x="118355062" fg:w="1003009"/><text x="12.0855%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (2,006,018 samples, 0.20%)</title><rect x="11.9358%" y="533" width="0.2006%" height="15" fill="rgb(209,103,24)" fg:x="119358071" fg:w="2006018"/><text x="12.1858%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2,006,018 samples, 0.20%)</title><rect x="11.9358%" y="517" width="0.2006%" height="15" fill="rgb(229,88,8)" fg:x="119358071" fg:w="2006018"/><text x="12.1858%" y="527.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (110,330,990 samples, 11.03%)</title><rect x="1.2036%" y="565" width="11.0331%" height="15" fill="rgb(213,181,19)" fg:x="12036108" fg:w="110330990"/><text x="1.4536%" y="575.50">&lt;core::str::iter..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (109,327,981 samples, 10.93%)</title><rect x="1.3039%" y="549" width="10.9328%" height="15" fill="rgb(254,191,54)" fg:x="13039117" fg:w="109327981"/><text x="1.5539%" y="559.50">core::str::iter:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="12.1364%" y="533" width="0.1003%" height="15" fill="rgb(241,83,37)" fg:x="121364089" fg:w="1003009"/><text x="12.3864%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (132,397,188 samples, 13.24%)</title><rect x="0.9027%" y="581" width="13.2397%" height="15" fill="rgb(233,36,39)" fg:x="9027081" fg:w="132397188"/><text x="1.1527%" y="591.50">&lt;core::iter::adapter..</text></g><g><title>core::option::Option&lt;T&gt;::map (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="565" width="1.9057%" height="15" fill="rgb(226,3,54)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="575.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="549" width="1.9057%" height="15" fill="rgb(245,192,40)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="559.50">c..</text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="533" width="1.9057%" height="15" fill="rgb(238,167,29)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="543.50">a..</text></g><g><title>core::str::&lt;impl str&gt;::parse (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="517" width="1.9057%" height="15" fill="rgb(232,182,51)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="527.50">c..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="501" width="1.9057%" height="15" fill="rgb(231,60,39)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="511.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="485" width="1.9057%" height="15" fill="rgb(208,69,12)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="495.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (19,057,171 samples, 1.91%)</title><rect x="12.2367%" y="469" width="1.9057%" height="15" fill="rgb(235,93,37)" fg:x="122367098" fg:w="19057171"/><text x="12.4867%" y="479.50">c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (6,018,054 samples, 0.60%)</title><rect x="13.5406%" y="453" width="0.6018%" height="15" fill="rgb(213,116,39)" fg:x="135406215" fg:w="6018054"/><text x="13.7906%" y="463.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (6,018,054 samples, 0.60%)</title><rect x="13.5406%" y="437" width="0.6018%" height="15" fill="rgb(222,207,29)" fg:x="135406215" fg:w="6018054"/><text x="13.7906%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (140,421,260 samples, 14.04%)</title><rect x="0.4012%" y="629" width="14.0421%" height="15" fill="rgb(206,96,30)" fg:x="4012036" fg:w="140421260"/><text x="0.6512%" y="639.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (140,421,260 samples, 14.04%)</title><rect x="0.4012%" y="613" width="14.0421%" height="15" fill="rgb(218,138,4)" fg:x="4012036" fg:w="140421260"/><text x="0.6512%" y="623.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (139,418,251 samples, 13.94%)</title><rect x="0.5015%" y="597" width="13.9418%" height="15" fill="rgb(250,191,14)" fg:x="5015045" fg:w="139418251"/><text x="0.7515%" y="607.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>core::ptr::write (3,009,027 samples, 0.30%)</title><rect x="14.1424%" y="581" width="0.3009%" height="15" fill="rgb(239,60,40)" fg:x="141424269" fg:w="3009027"/><text x="14.3924%" y="591.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (52,156,468 samples, 5.22%)</title><rect x="14.5436%" y="613" width="5.2156%" height="15" fill="rgb(206,27,48)" fg:x="145436305" fg:w="52156468"/><text x="14.7936%" y="623.50">&lt;core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (52,156,468 samples, 5.22%)</title><rect x="14.5436%" y="597" width="5.2156%" height="15" fill="rgb(225,35,8)" fg:x="145436305" fg:w="52156468"/><text x="14.7936%" y="607.50">core::..</text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (38,114,342 samples, 3.81%)</title><rect x="15.9478%" y="581" width="3.8114%" height="15" fill="rgb(250,213,24)" fg:x="159478431" fg:w="38114342"/><text x="16.1978%" y="591.50">&lt;cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (25,075,225 samples, 2.51%)</title><rect x="17.2518%" y="565" width="2.5075%" height="15" fill="rgb(247,123,22)" fg:x="172517548" fg:w="25075225"/><text x="17.5018%" y="575.50">co..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="19.6590%" y="549" width="0.1003%" height="15" fill="rgb(231,138,38)" fg:x="196589764" fg:w="1003009"/><text x="19.9090%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="19.6590%" y="533" width="0.1003%" height="15" fill="rgb(231,145,46)" fg:x="196589764" fg:w="1003009"/><text x="19.9090%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="19.6590%" y="517" width="0.1003%" height="15" fill="rgb(251,118,11)" fg:x="196589764" fg:w="1003009"/><text x="19.9090%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62,186,558 samples, 6.22%)</title><rect x="14.4433%" y="629" width="6.2187%" height="15" fill="rgb(217,147,25)" fg:x="144433296" fg:w="62186558"/><text x="14.6933%" y="639.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (9,027,081 samples, 0.90%)</title><rect x="19.7593%" y="613" width="0.9027%" height="15" fill="rgb(247,81,37)" fg:x="197592773" fg:w="9027081"/><text x="20.0093%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8,024,072 samples, 0.80%)</title><rect x="19.8596%" y="597" width="0.8024%" height="15" fill="rgb(209,12,38)" fg:x="198595782" fg:w="8024072"/><text x="20.1096%" y="607.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (8,024,072 samples, 0.80%)</title><rect x="19.8596%" y="581" width="0.8024%" height="15" fill="rgb(227,1,9)" fg:x="198595782" fg:w="8024072"/><text x="20.1096%" y="591.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (8,024,072 samples, 0.80%)</title><rect x="19.8596%" y="565" width="0.8024%" height="15" fill="rgb(248,47,43)" fg:x="198595782" fg:w="8024072"/><text x="20.1096%" y="575.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (8,024,072 samples, 0.80%)</title><rect x="19.8596%" y="549" width="0.8024%" height="15" fill="rgb(221,10,30)" fg:x="198595782" fg:w="8024072"/><text x="20.1096%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (8,024,072 samples, 0.80%)</title><rect x="19.8596%" y="533" width="0.8024%" height="15" fill="rgb(210,229,1)" fg:x="198595782" fg:w="8024072"/><text x="20.1096%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (8,024,072 samples, 0.80%)</title><rect x="19.8596%" y="517" width="0.8024%" height="15" fill="rgb(222,148,37)" fg:x="198595782" fg:w="8024072"/><text x="20.1096%" y="527.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (3,009,027 samples, 0.30%)</title><rect x="20.3611%" y="501" width="0.3009%" height="15" fill="rgb(234,67,33)" fg:x="203610827" fg:w="3009027"/><text x="20.6111%" y="511.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (3,009,027 samples, 0.30%)</title><rect x="20.3611%" y="485" width="0.3009%" height="15" fill="rgb(247,98,35)" fg:x="203610827" fg:w="3009027"/><text x="20.6111%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="21.8656%" y="549" width="0.6018%" height="15" fill="rgb(247,138,52)" fg:x="218655962" fg:w="6018054"/><text x="22.1156%" y="559.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="21.8656%" y="533" width="0.6018%" height="15" fill="rgb(213,79,30)" fg:x="218655962" fg:w="6018054"/><text x="22.1156%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,018,054 samples, 0.60%)</title><rect x="21.8656%" y="517" width="0.6018%" height="15" fill="rgb(246,177,23)" fg:x="218655962" fg:w="6018054"/><text x="22.1156%" y="527.50"></text></g><g><title>[libc.so.6] (5,015,045 samples, 0.50%)</title><rect x="21.9659%" y="501" width="0.5015%" height="15" fill="rgb(230,62,27)" fg:x="219658971" fg:w="5015045"/><text x="22.2159%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="22.4674%" y="549" width="0.1003%" height="15" fill="rgb(216,154,8)" fg:x="224674016" fg:w="1003009"/><text x="22.7174%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="22.4674%" y="533" width="0.1003%" height="15" fill="rgb(244,35,45)" fg:x="224674016" fg:w="1003009"/><text x="22.7174%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,003,009 samples, 0.10%)</title><rect x="22.4674%" y="517" width="0.1003%" height="15" fill="rgb(251,115,12)" fg:x="224674016" fg:w="1003009"/><text x="22.7174%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (1,003,009 samples, 0.10%)</title><rect x="23.8716%" y="501" width="0.1003%" height="15" fill="rgb(240,54,50)" fg:x="238716142" fg:w="1003009"/><text x="24.1216%" y="511.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="23.9719%" y="501" width="0.1003%" height="15" fill="rgb(233,84,52)" fg:x="239719151" fg:w="1003009"/><text x="24.2219%" y="511.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (38,114,342 samples, 3.81%)</title><rect x="20.6620%" y="597" width="3.8114%" height="15" fill="rgb(207,117,47)" fg:x="206619854" fg:w="38114342"/><text x="20.9120%" y="607.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (38,114,342 samples, 3.81%)</title><rect x="20.6620%" y="581" width="3.8114%" height="15" fill="rgb(249,43,39)" fg:x="206619854" fg:w="38114342"/><text x="20.9120%" y="591.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (30,090,270 samples, 3.01%)</title><rect x="21.4644%" y="565" width="3.0090%" height="15" fill="rgb(209,38,44)" fg:x="214643926" fg:w="30090270"/><text x="21.7144%" y="575.50">&lt;co..</text></g><g><title>core::slice::memchr::memchr (19,057,171 samples, 1.91%)</title><rect x="22.5677%" y="549" width="1.9057%" height="15" fill="rgb(236,212,23)" fg:x="225677025" fg:w="19057171"/><text x="22.8177%" y="559.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (19,057,171 samples, 1.91%)</title><rect x="22.5677%" y="533" width="1.9057%" height="15" fill="rgb(242,79,21)" fg:x="225677025" fg:w="19057171"/><text x="22.8177%" y="543.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (13,039,117 samples, 1.30%)</title><rect x="23.1695%" y="517" width="1.3039%" height="15" fill="rgb(211,96,35)" fg:x="231695079" fg:w="13039117"/><text x="23.4195%" y="527.50"></text></g><g><title>core::slice::memchr::memchr_naive (4,012,036 samples, 0.40%)</title><rect x="24.0722%" y="501" width="0.4012%" height="15" fill="rgb(253,215,40)" fg:x="240722160" fg:w="4012036"/><text x="24.3222%" y="511.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (39,117,351 samples, 3.91%)</title><rect x="20.6620%" y="629" width="3.9117%" height="15" fill="rgb(211,81,21)" fg:x="206619854" fg:w="39117351"/><text x="20.9120%" y="639.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39,117,351 samples, 3.91%)</title><rect x="20.6620%" y="613" width="3.9117%" height="15" fill="rgb(208,190,38)" fg:x="206619854" fg:w="39117351"/><text x="20.9120%" y="623.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="597" width="0.1003%" height="15" fill="rgb(235,213,38)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="581" width="0.1003%" height="15" fill="rgb(237,122,38)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="591.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="565" width="0.1003%" height="15" fill="rgb(244,218,35)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="575.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="549" width="0.1003%" height="15" fill="rgb(240,68,47)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="533" width="0.1003%" height="15" fill="rgb(210,16,53)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="543.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="517" width="0.1003%" height="15" fill="rgb(235,124,12)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="527.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="501" width="0.1003%" height="15" fill="rgb(224,169,11)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="511.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="485" width="0.1003%" height="15" fill="rgb(250,166,2)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,003,009 samples, 0.10%)</title><rect x="24.4734%" y="469" width="0.1003%" height="15" fill="rgb(242,216,29)" fg:x="244734196" fg:w="1003009"/><text x="24.7234%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="27.7834%" y="613" width="0.2006%" height="15" fill="rgb(230,116,27)" fg:x="277833493" fg:w="2006018"/><text x="28.0334%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="27.8837%" y="597" width="0.1003%" height="15" fill="rgb(228,99,48)" fg:x="278836502" fg:w="1003009"/><text x="28.1337%" y="607.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="27.8837%" y="581" width="0.1003%" height="15" fill="rgb(253,11,6)" fg:x="278836502" fg:w="1003009"/><text x="28.1337%" y="591.50"></text></g><g><title>ahash::operations::folded_multiply (14,042,126 samples, 1.40%)</title><rect x="29.9900%" y="453" width="1.4042%" height="15" fill="rgb(247,143,39)" fg:x="299899691" fg:w="14042126"/><text x="30.2400%" y="463.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="31.1936%" y="437" width="0.2006%" height="15" fill="rgb(236,97,10)" fg:x="311935799" fg:w="2006018"/><text x="31.4436%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (25,075,225 samples, 2.51%)</title><rect x="29.9900%" y="469" width="2.5075%" height="15" fill="rgb(233,208,19)" fg:x="299899691" fg:w="25075225"/><text x="30.2400%" y="479.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11,033,099 samples, 1.10%)</title><rect x="31.3942%" y="453" width="1.1033%" height="15" fill="rgb(216,164,2)" fg:x="313941817" fg:w="11033099"/><text x="31.6442%" y="463.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (7,021,063 samples, 0.70%)</title><rect x="32.4975%" y="469" width="0.7021%" height="15" fill="rgb(220,129,5)" fg:x="324974916" fg:w="7021063"/><text x="32.7475%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (7,021,063 samples, 0.70%)</title><rect x="32.4975%" y="453" width="0.7021%" height="15" fill="rgb(242,17,10)" fg:x="324974916" fg:w="7021063"/><text x="32.7475%" y="463.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="33.1996%" y="421" width="0.2006%" height="15" fill="rgb(242,107,0)" fg:x="331995979" fg:w="2006018"/><text x="33.4496%" y="431.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="33.1996%" y="405" width="0.2006%" height="15" fill="rgb(251,28,31)" fg:x="331995979" fg:w="2006018"/><text x="33.4496%" y="415.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="33.1996%" y="389" width="0.2006%" height="15" fill="rgb(233,223,10)" fg:x="331995979" fg:w="2006018"/><text x="33.4496%" y="399.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="33.1996%" y="373" width="0.2006%" height="15" fill="rgb(215,21,27)" fg:x="331995979" fg:w="2006018"/><text x="33.4496%" y="383.50"></text></g><g><title>ahash::operations::folded_multiply (16,048,144 samples, 1.60%)</title><rect x="34.1023%" y="373" width="1.6048%" height="15" fill="rgb(232,23,21)" fg:x="341023060" fg:w="16048144"/><text x="34.3523%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (24,072,216 samples, 2.41%)</title><rect x="33.4002%" y="389" width="2.4072%" height="15" fill="rgb(244,5,23)" fg:x="334001997" fg:w="24072216"/><text x="33.6502%" y="399.50">ah..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="35.7071%" y="373" width="0.1003%" height="15" fill="rgb(226,81,46)" fg:x="357071204" fg:w="1003009"/><text x="35.9571%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (64,192,576 samples, 6.42%)</title><rect x="29.9900%" y="501" width="6.4193%" height="15" fill="rgb(247,70,30)" fg:x="299899691" fg:w="64192576"/><text x="30.2400%" y="511.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (64,192,576 samples, 6.42%)</title><rect x="29.9900%" y="485" width="6.4193%" height="15" fill="rgb(212,68,19)" fg:x="299899691" fg:w="64192576"/><text x="30.2400%" y="495.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (32,096,288 samples, 3.21%)</title><rect x="33.1996%" y="469" width="3.2096%" height="15" fill="rgb(240,187,13)" fg:x="331995979" fg:w="32096288"/><text x="33.4496%" y="479.50">cor..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (32,096,288 samples, 3.21%)</title><rect x="33.1996%" y="453" width="3.2096%" height="15" fill="rgb(223,113,26)" fg:x="331995979" fg:w="32096288"/><text x="33.4496%" y="463.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (32,096,288 samples, 3.21%)</title><rect x="33.1996%" y="437" width="3.2096%" height="15" fill="rgb(206,192,2)" fg:x="331995979" fg:w="32096288"/><text x="33.4496%" y="447.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (30,090,270 samples, 3.01%)</title><rect x="33.4002%" y="421" width="3.0090%" height="15" fill="rgb(241,108,4)" fg:x="334001997" fg:w="30090270"/><text x="33.6502%" y="431.50">cor..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (30,090,270 samples, 3.01%)</title><rect x="33.4002%" y="405" width="3.0090%" height="15" fill="rgb(247,173,49)" fg:x="334001997" fg:w="30090270"/><text x="33.6502%" y="415.50">&lt;ah..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (6,018,054 samples, 0.60%)</title><rect x="35.8074%" y="389" width="0.6018%" height="15" fill="rgb(224,114,35)" fg:x="358074213" fg:w="6018054"/><text x="36.0574%" y="399.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12,036,108 samples, 1.20%)</title><rect x="37.6128%" y="453" width="1.2036%" height="15" fill="rgb(245,159,27)" fg:x="376128375" fg:w="12036108"/><text x="37.8628%" y="463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (12,036,108 samples, 1.20%)</title><rect x="37.6128%" y="437" width="1.2036%" height="15" fill="rgb(245,172,44)" fg:x="376128375" fg:w="12036108"/><text x="37.8628%" y="447.50"></text></g><g><title>core::intrinsics::likely (9,027,081 samples, 0.90%)</title><rect x="38.8164%" y="453" width="0.9027%" height="15" fill="rgb(236,23,11)" fg:x="388164483" fg:w="9027081"/><text x="39.0664%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (10,030,090 samples, 1.00%)</title><rect x="39.7192%" y="453" width="1.0030%" height="15" fill="rgb(205,117,38)" fg:x="397191564" fg:w="10030090"/><text x="39.9692%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10,030,090 samples, 1.00%)</title><rect x="39.7192%" y="437" width="1.0030%" height="15" fill="rgb(237,72,25)" fg:x="397191564" fg:w="10030090"/><text x="39.9692%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10,030,090 samples, 1.00%)</title><rect x="39.7192%" y="421" width="1.0030%" height="15" fill="rgb(244,70,9)" fg:x="397191564" fg:w="10030090"/><text x="39.9692%" y="431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,003,009 samples, 0.10%)</title><rect x="40.7222%" y="453" width="0.1003%" height="15" fill="rgb(217,125,39)" fg:x="407221654" fg:w="1003009"/><text x="40.9722%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="40.7222%" y="437" width="0.1003%" height="15" fill="rgb(235,36,10)" fg:x="407221654" fg:w="1003009"/><text x="40.9722%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="40.7222%" y="421" width="0.1003%" height="15" fill="rgb(251,123,47)" fg:x="407221654" fg:w="1003009"/><text x="40.9722%" y="431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,012,036 samples, 0.40%)</title><rect x="40.8225%" y="453" width="0.4012%" height="15" fill="rgb(221,13,13)" fg:x="408224663" fg:w="4012036"/><text x="41.0725%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.40%)</title><rect x="40.8225%" y="437" width="0.4012%" height="15" fill="rgb(238,131,9)" fg:x="408224663" fg:w="4012036"/><text x="41.0725%" y="447.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.30%)</title><rect x="41.2237%" y="453" width="0.3009%" height="15" fill="rgb(211,50,8)" fg:x="412236699" fg:w="3009027"/><text x="41.4737%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (98,294,882 samples, 9.83%)</title><rect x="41.5246%" y="437" width="9.8295%" height="15" fill="rgb(245,182,24)" fg:x="415245726" fg:w="98294882"/><text x="41.7746%" y="447.50">hashbrown::map..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (98,294,882 samples, 9.83%)</title><rect x="41.5246%" y="421" width="9.8295%" height="15" fill="rgb(242,14,37)" fg:x="415245726" fg:w="98294882"/><text x="41.7746%" y="431.50">&lt;Q as hashbrow..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (98,294,882 samples, 9.83%)</title><rect x="41.5246%" y="405" width="9.8295%" height="15" fill="rgb(246,228,12)" fg:x="415245726" fg:w="98294882"/><text x="41.7746%" y="415.50">core::cmp::imp..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (98,294,882 samples, 9.83%)</title><rect x="41.5246%" y="389" width="9.8295%" height="15" fill="rgb(213,55,15)" fg:x="415245726" fg:w="98294882"/><text x="41.7746%" y="399.50">core::array::e..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (98,294,882 samples, 9.83%)</title><rect x="41.5246%" y="373" width="9.8295%" height="15" fill="rgb(209,9,3)" fg:x="415245726" fg:w="98294882"/><text x="41.7746%" y="383.50">&lt;T as core::ar..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13,039,117 samples, 1.30%)</title><rect x="51.3541%" y="437" width="1.3039%" height="15" fill="rgb(230,59,30)" fg:x="513540608" fg:w="13039117"/><text x="51.6041%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13,039,117 samples, 1.30%)</title><rect x="51.3541%" y="421" width="1.3039%" height="15" fill="rgb(209,121,21)" fg:x="513540608" fg:w="13039117"/><text x="51.6041%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13,039,117 samples, 1.30%)</title><rect x="51.3541%" y="405" width="1.3039%" height="15" fill="rgb(220,109,13)" fg:x="513540608" fg:w="13039117"/><text x="51.6041%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (116,349,044 samples, 11.63%)</title><rect x="41.5246%" y="453" width="11.6349%" height="15" fill="rgb(232,18,1)" fg:x="415245726" fg:w="116349044"/><text x="41.7746%" y="463.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5,015,045 samples, 0.50%)</title><rect x="52.6580%" y="437" width="0.5015%" height="15" fill="rgb(215,41,42)" fg:x="526579725" fg:w="5015045"/><text x="52.9080%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5,015,045 samples, 0.50%)</title><rect x="52.6580%" y="421" width="0.5015%" height="15" fill="rgb(224,123,36)" fg:x="526579725" fg:w="5015045"/><text x="52.9080%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5,015,045 samples, 0.50%)</title><rect x="52.6580%" y="405" width="0.5015%" height="15" fill="rgb(240,125,3)" fg:x="526579725" fg:w="5015045"/><text x="52.9080%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (268,806,412 samples, 26.88%)</title><rect x="27.9840%" y="613" width="26.8806%" height="15" fill="rgb(205,98,50)" fg:x="279839511" fg:w="268806412"/><text x="28.2340%" y="623.50">core::cmp::impls::&lt;impl core::cmp::PartialO..</text></g><g><title>core::cmp::PartialOrd::gt (268,806,412 samples, 26.88%)</title><rect x="27.9840%" y="597" width="26.8806%" height="15" fill="rgb(205,185,37)" fg:x="279839511" fg:w="268806412"/><text x="28.2340%" y="607.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (265,797,385 samples, 26.58%)</title><rect x="28.2849%" y="581" width="26.5797%" height="15" fill="rgb(238,207,15)" fg:x="282848538" fg:w="265797385"/><text x="28.5349%" y="591.50">&lt;aoc_2024_megaproject::problems::day5::Page..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (264,794,376 samples, 26.48%)</title><rect x="28.3852%" y="565" width="26.4794%" height="15" fill="rgb(213,199,42)" fg:x="283851547" fg:w="264794376"/><text x="28.6352%" y="575.50">aoc_2024_megaproject::problems::day5::Page..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (263,791,367 samples, 26.38%)</title><rect x="28.4855%" y="549" width="26.3791%" height="15" fill="rgb(235,201,11)" fg:x="284854556" fg:w="263791367"/><text x="28.7355%" y="559.50">std::collections::hash::map::HashMap&lt;K,V,S..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (263,791,367 samples, 26.38%)</title><rect x="28.4855%" y="533" width="26.3791%" height="15" fill="rgb(207,46,11)" fg:x="284854556" fg:w="263791367"/><text x="28.7355%" y="543.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (263,791,367 samples, 26.38%)</title><rect x="28.4855%" y="517" width="26.3791%" height="15" fill="rgb(241,35,35)" fg:x="284854556" fg:w="263791367"/><text x="28.7355%" y="527.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (184,553,656 samples, 18.46%)</title><rect x="36.4092%" y="501" width="18.4554%" height="15" fill="rgb(243,32,47)" fg:x="364092267" fg:w="184553656"/><text x="36.6592%" y="511.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (184,553,656 samples, 18.46%)</title><rect x="36.4092%" y="485" width="18.4554%" height="15" fill="rgb(247,202,23)" fg:x="364092267" fg:w="184553656"/><text x="36.6592%" y="495.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (184,553,656 samples, 18.46%)</title><rect x="36.4092%" y="469" width="18.4554%" height="15" fill="rgb(219,102,11)" fg:x="364092267" fg:w="184553656"/><text x="36.6592%" y="479.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (17,051,153 samples, 1.71%)</title><rect x="53.1595%" y="453" width="1.7051%" height="15" fill="rgb(243,110,44)" fg:x="531594770" fg:w="17051153"/><text x="53.4095%" y="463.50"></text></g><g><title>ahash::operations::folded_multiply (13,039,117 samples, 1.30%)</title><rect x="57.3721%" y="453" width="1.3039%" height="15" fill="rgb(222,74,54)" fg:x="573721148" fg:w="13039117"/><text x="57.6221%" y="463.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="58.4754%" y="437" width="0.2006%" height="15" fill="rgb(216,99,12)" fg:x="584754247" fg:w="2006018"/><text x="58.7254%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (17,051,153 samples, 1.71%)</title><rect x="57.3721%" y="469" width="1.7051%" height="15" fill="rgb(226,22,26)" fg:x="573721148" fg:w="17051153"/><text x="57.6221%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.40%)</title><rect x="58.6760%" y="453" width="0.4012%" height="15" fill="rgb(217,163,10)" fg:x="586760265" fg:w="4012036"/><text x="58.9260%" y="463.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (12,036,108 samples, 1.20%)</title><rect x="59.0772%" y="469" width="1.2036%" height="15" fill="rgb(213,25,53)" fg:x="590772301" fg:w="12036108"/><text x="59.3272%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (12,036,108 samples, 1.20%)</title><rect x="59.0772%" y="453" width="1.2036%" height="15" fill="rgb(252,105,26)" fg:x="590772301" fg:w="12036108"/><text x="59.3272%" y="463.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4,012,036 samples, 0.40%)</title><rect x="60.2808%" y="421" width="0.4012%" height="15" fill="rgb(220,39,43)" fg:x="602808409" fg:w="4012036"/><text x="60.5308%" y="431.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (4,012,036 samples, 0.40%)</title><rect x="60.2808%" y="405" width="0.4012%" height="15" fill="rgb(229,68,48)" fg:x="602808409" fg:w="4012036"/><text x="60.5308%" y="415.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (4,012,036 samples, 0.40%)</title><rect x="60.2808%" y="389" width="0.4012%" height="15" fill="rgb(252,8,32)" fg:x="602808409" fg:w="4012036"/><text x="60.5308%" y="399.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (4,012,036 samples, 0.40%)</title><rect x="60.2808%" y="373" width="0.4012%" height="15" fill="rgb(223,20,43)" fg:x="602808409" fg:w="4012036"/><text x="60.5308%" y="383.50"></text></g><g><title>ahash::operations::folded_multiply (4,012,036 samples, 0.40%)</title><rect x="60.2808%" y="357" width="0.4012%" height="15" fill="rgb(229,81,49)" fg:x="602808409" fg:w="4012036"/><text x="60.5308%" y="367.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="60.4814%" y="341" width="0.2006%" height="15" fill="rgb(236,28,36)" fg:x="604814427" fg:w="2006018"/><text x="60.7314%" y="351.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (9,027,081 samples, 0.90%)</title><rect x="60.6820%" y="389" width="0.9027%" height="15" fill="rgb(249,185,26)" fg:x="606820445" fg:w="9027081"/><text x="60.9320%" y="399.50"></text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="60.6820%" y="373" width="0.9027%" height="15" fill="rgb(249,174,33)" fg:x="606820445" fg:w="9027081"/><text x="60.9320%" y="383.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="61.4845%" y="357" width="0.1003%" height="15" fill="rgb(233,201,37)" fg:x="614844517" fg:w="1003009"/><text x="61.7345%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (52,156,468 samples, 5.22%)</title><rect x="57.3721%" y="501" width="5.2156%" height="15" fill="rgb(221,78,26)" fg:x="573721148" fg:w="52156468"/><text x="57.6221%" y="511.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (52,156,468 samples, 5.22%)</title><rect x="57.3721%" y="485" width="5.2156%" height="15" fill="rgb(250,127,30)" fg:x="573721148" fg:w="52156468"/><text x="57.6221%" y="495.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (23,069,207 samples, 2.31%)</title><rect x="60.2808%" y="469" width="2.3069%" height="15" fill="rgb(230,49,44)" fg:x="602808409" fg:w="23069207"/><text x="60.5308%" y="479.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (23,069,207 samples, 2.31%)</title><rect x="60.2808%" y="453" width="2.3069%" height="15" fill="rgb(229,67,23)" fg:x="602808409" fg:w="23069207"/><text x="60.5308%" y="463.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (23,069,207 samples, 2.31%)</title><rect x="60.2808%" y="437" width="2.3069%" height="15" fill="rgb(249,83,47)" fg:x="602808409" fg:w="23069207"/><text x="60.5308%" y="447.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (19,057,171 samples, 1.91%)</title><rect x="60.6820%" y="421" width="1.9057%" height="15" fill="rgb(215,43,3)" fg:x="606820445" fg:w="19057171"/><text x="60.9320%" y="431.50">c..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (19,057,171 samples, 1.91%)</title><rect x="60.6820%" y="405" width="1.9057%" height="15" fill="rgb(238,154,13)" fg:x="606820445" fg:w="19057171"/><text x="60.9320%" y="415.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (10,030,090 samples, 1.00%)</title><rect x="61.5848%" y="389" width="1.0030%" height="15" fill="rgb(219,56,2)" fg:x="615847526" fg:w="10030090"/><text x="61.8348%" y="399.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17,051,153 samples, 1.71%)</title><rect x="64.4935%" y="453" width="1.7051%" height="15" fill="rgb(233,0,4)" fg:x="644934787" fg:w="17051153"/><text x="64.7435%" y="463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (17,051,153 samples, 1.71%)</title><rect x="64.4935%" y="437" width="1.7051%" height="15" fill="rgb(235,30,7)" fg:x="644934787" fg:w="17051153"/><text x="64.7435%" y="447.50"></text></g><g><title>core::intrinsics::likely (15,045,135 samples, 1.50%)</title><rect x="66.1986%" y="453" width="1.5045%" height="15" fill="rgb(250,79,13)" fg:x="661985940" fg:w="15045135"/><text x="66.4486%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,003,009 samples, 0.10%)</title><rect x="67.7031%" y="453" width="0.1003%" height="15" fill="rgb(211,146,34)" fg:x="677031075" fg:w="1003009"/><text x="67.9531%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="67.7031%" y="437" width="0.1003%" height="15" fill="rgb(228,22,38)" fg:x="677031075" fg:w="1003009"/><text x="67.9531%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="67.7031%" y="421" width="0.1003%" height="15" fill="rgb(235,168,5)" fg:x="677031075" fg:w="1003009"/><text x="67.9531%" y="431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (11,033,099 samples, 1.10%)</title><rect x="67.8034%" y="453" width="1.1033%" height="15" fill="rgb(221,155,16)" fg:x="678034084" fg:w="11033099"/><text x="68.0534%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11,033,099 samples, 1.10%)</title><rect x="67.8034%" y="437" width="1.1033%" height="15" fill="rgb(215,215,53)" fg:x="678034084" fg:w="11033099"/><text x="68.0534%" y="447.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.30%)</title><rect x="68.9067%" y="453" width="0.3009%" height="15" fill="rgb(223,4,10)" fg:x="689067183" fg:w="3009027"/><text x="69.1567%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (71,213,639 samples, 7.12%)</title><rect x="69.2076%" y="437" width="7.1214%" height="15" fill="rgb(234,103,6)" fg:x="692076210" fg:w="71213639"/><text x="69.4576%" y="447.50">hashbrown:..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (71,213,639 samples, 7.12%)</title><rect x="69.2076%" y="421" width="7.1214%" height="15" fill="rgb(227,97,0)" fg:x="692076210" fg:w="71213639"/><text x="69.4576%" y="431.50">&lt;Q as hash..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71,213,639 samples, 7.12%)</title><rect x="69.2076%" y="405" width="7.1214%" height="15" fill="rgb(234,150,53)" fg:x="692076210" fg:w="71213639"/><text x="69.4576%" y="415.50">core::cmp:..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (71,213,639 samples, 7.12%)</title><rect x="69.2076%" y="389" width="7.1214%" height="15" fill="rgb(228,201,54)" fg:x="692076210" fg:w="71213639"/><text x="69.4576%" y="399.50">core::arra..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (71,213,639 samples, 7.12%)</title><rect x="69.2076%" y="373" width="7.1214%" height="15" fill="rgb(222,22,37)" fg:x="692076210" fg:w="71213639"/><text x="69.4576%" y="383.50">&lt;T as core..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (12,036,108 samples, 1.20%)</title><rect x="76.3290%" y="437" width="1.2036%" height="15" fill="rgb(237,53,32)" fg:x="763289849" fg:w="12036108"/><text x="76.5790%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (12,036,108 samples, 1.20%)</title><rect x="76.3290%" y="421" width="1.2036%" height="15" fill="rgb(233,25,53)" fg:x="763289849" fg:w="12036108"/><text x="76.5790%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,036,108 samples, 1.20%)</title><rect x="76.3290%" y="405" width="1.2036%" height="15" fill="rgb(210,40,34)" fg:x="763289849" fg:w="12036108"/><text x="76.5790%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (96,288,864 samples, 9.63%)</title><rect x="69.2076%" y="453" width="9.6289%" height="15" fill="rgb(241,220,44)" fg:x="692076210" fg:w="96288864"/><text x="69.4576%" y="463.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (13,039,117 samples, 1.30%)</title><rect x="77.5326%" y="437" width="1.3039%" height="15" fill="rgb(235,28,35)" fg:x="775325957" fg:w="13039117"/><text x="77.7826%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13,039,117 samples, 1.30%)</title><rect x="77.5326%" y="421" width="1.3039%" height="15" fill="rgb(210,56,17)" fg:x="775325957" fg:w="13039117"/><text x="77.7826%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13,039,117 samples, 1.30%)</title><rect x="77.5326%" y="405" width="1.3039%" height="15" fill="rgb(224,130,29)" fg:x="775325957" fg:w="13039117"/><text x="77.7826%" y="415.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (559,679,022 samples, 55.97%)</title><rect x="24.5737%" y="629" width="55.9679%" height="15" fill="rgb(235,212,8)" fg:x="245737205" fg:w="559679022"/><text x="24.8237%" y="639.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (256,770,304 samples, 25.68%)</title><rect x="54.8646%" y="613" width="25.6770%" height="15" fill="rgb(223,33,50)" fg:x="548645923" fg:w="256770304"/><text x="55.1146%" y="623.50">core::cmp::impls::&lt;impl core::cmp::Partia..</text></g><g><title>core::cmp::PartialOrd::lt (256,770,304 samples, 25.68%)</title><rect x="54.8646%" y="597" width="25.6770%" height="15" fill="rgb(219,149,13)" fg:x="548645923" fg:w="256770304"/><text x="55.1146%" y="607.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (255,767,295 samples, 25.58%)</title><rect x="54.9649%" y="581" width="25.5767%" height="15" fill="rgb(250,156,29)" fg:x="549648932" fg:w="255767295"/><text x="55.2149%" y="591.50">&lt;aoc_2024_megaproject::problems::day5::Pa..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (250,752,250 samples, 25.08%)</title><rect x="55.4664%" y="565" width="25.0752%" height="15" fill="rgb(216,193,19)" fg:x="554663977" fg:w="250752250"/><text x="55.7164%" y="575.50">aoc_2024_megaproject::problems::day5::Pa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (246,740,214 samples, 24.67%)</title><rect x="55.8676%" y="549" width="24.6740%" height="15" fill="rgb(216,135,14)" fg:x="558676013" fg:w="246740214"/><text x="56.1176%" y="559.50">std::collections::hash::map::HashMap&lt;K,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (246,740,214 samples, 24.67%)</title><rect x="55.8676%" y="533" width="24.6740%" height="15" fill="rgb(241,47,5)" fg:x="558676013" fg:w="246740214"/><text x="56.1176%" y="543.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (246,740,214 samples, 24.67%)</title><rect x="55.8676%" y="517" width="24.6740%" height="15" fill="rgb(233,42,35)" fg:x="558676013" fg:w="246740214"/><text x="56.1176%" y="527.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_i..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (179,538,611 samples, 17.95%)</title><rect x="62.5878%" y="501" width="17.9539%" height="15" fill="rgb(231,13,6)" fg:x="625877616" fg:w="179538611"/><text x="62.8378%" y="511.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (179,538,611 samples, 17.95%)</title><rect x="62.5878%" y="485" width="17.9539%" height="15" fill="rgb(207,181,40)" fg:x="625877616" fg:w="179538611"/><text x="62.8378%" y="495.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (179,538,611 samples, 17.95%)</title><rect x="62.5878%" y="469" width="17.9539%" height="15" fill="rgb(254,173,49)" fg:x="625877616" fg:w="179538611"/><text x="62.8378%" y="479.50">hashbrown::raw::RawTableInne..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (17,051,153 samples, 1.71%)</title><rect x="78.8365%" y="453" width="1.7051%" height="15" fill="rgb(221,1,38)" fg:x="788365074" fg:w="17051153"/><text x="79.0865%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12,036,108 samples, 1.20%)</title><rect x="82.8485%" y="517" width="1.2036%" height="15" fill="rgb(206,124,46)" fg:x="828485434" fg:w="12036108"/><text x="83.0985%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (12,036,108 samples, 1.20%)</title><rect x="82.8485%" y="501" width="1.2036%" height="15" fill="rgb(249,21,11)" fg:x="828485434" fg:w="12036108"/><text x="83.0985%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12,036,108 samples, 1.20%)</title><rect x="82.8485%" y="485" width="1.2036%" height="15" fill="rgb(222,201,40)" fg:x="828485434" fg:w="12036108"/><text x="83.0985%" y="495.50"></text></g><g><title>[libc.so.6] (7,021,063 samples, 0.70%)</title><rect x="83.3501%" y="469" width="0.7021%" height="15" fill="rgb(235,61,29)" fg:x="833500479" fg:w="7021063"/><text x="83.6001%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,009,027 samples, 0.30%)</title><rect x="84.0522%" y="517" width="0.3009%" height="15" fill="rgb(219,207,3)" fg:x="840521542" fg:w="3009027"/><text x="84.3022%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,009,027 samples, 0.30%)</title><rect x="84.0522%" y="501" width="0.3009%" height="15" fill="rgb(222,56,46)" fg:x="840521542" fg:w="3009027"/><text x="84.3022%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,009,027 samples, 0.30%)</title><rect x="84.0522%" y="485" width="0.3009%" height="15" fill="rgb(239,76,54)" fg:x="840521542" fg:w="3009027"/><text x="84.3022%" y="495.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="85.3561%" y="469" width="0.1003%" height="15" fill="rgb(231,124,27)" fg:x="853560659" fg:w="1003009"/><text x="85.6061%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (2,006,018 samples, 0.20%)</title><rect x="85.4564%" y="469" width="0.2006%" height="15" fill="rgb(249,195,6)" fg:x="854563668" fg:w="2006018"/><text x="85.7064%" y="479.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2,006,018 samples, 0.20%)</title><rect x="85.6570%" y="469" width="0.2006%" height="15" fill="rgb(237,174,47)" fg:x="856569686" fg:w="2006018"/><text x="85.9070%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (59,177,531 samples, 5.92%)</title><rect x="80.5416%" y="629" width="5.9178%" height="15" fill="rgb(206,201,31)" fg:x="805416227" fg:w="59177531"/><text x="80.7916%" y="639.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (59,177,531 samples, 5.92%)</title><rect x="80.5416%" y="613" width="5.9178%" height="15" fill="rgb(231,57,52)" fg:x="805416227" fg:w="59177531"/><text x="80.7916%" y="623.50">core::it..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.92%)</title><rect x="80.5416%" y="597" width="5.9178%" height="15" fill="rgb(248,177,22)" fg:x="805416227" fg:w="59177531"/><text x="80.7916%" y="607.50">&lt;core::s..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.92%)</title><rect x="80.5416%" y="581" width="5.9178%" height="15" fill="rgb(215,211,37)" fg:x="805416227" fg:w="59177531"/><text x="80.7916%" y="591.50">&lt;core::i..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.92%)</title><rect x="80.5416%" y="565" width="5.9178%" height="15" fill="rgb(241,128,51)" fg:x="805416227" fg:w="59177531"/><text x="80.7916%" y="575.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (59,177,531 samples, 5.92%)</title><rect x="80.5416%" y="549" width="5.9178%" height="15" fill="rgb(227,165,31)" fg:x="805416227" fg:w="59177531"/><text x="80.7916%" y="559.50">core::st..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (48,144,432 samples, 4.81%)</title><rect x="81.6449%" y="533" width="4.8144%" height="15" fill="rgb(228,167,24)" fg:x="816449326" fg:w="48144432"/><text x="81.8949%" y="543.50">&lt;core:..</text></g><g><title>core::slice::memchr::memchr (21,063,189 samples, 2.11%)</title><rect x="84.3531%" y="517" width="2.1063%" height="15" fill="rgb(228,143,12)" fg:x="843530569" fg:w="21063189"/><text x="84.6031%" y="527.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (18,054,162 samples, 1.81%)</title><rect x="84.6540%" y="501" width="1.8054%" height="15" fill="rgb(249,149,8)" fg:x="846539596" fg:w="18054162"/><text x="84.9040%" y="511.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (13,039,117 samples, 1.30%)</title><rect x="85.1555%" y="485" width="1.3039%" height="15" fill="rgb(243,35,44)" fg:x="851554641" fg:w="13039117"/><text x="85.4055%" y="495.50"></text></g><g><title>core::slice::memchr::memchr_naive (6,018,054 samples, 0.60%)</title><rect x="85.8576%" y="469" width="0.6018%" height="15" fill="rgb(246,89,9)" fg:x="858575704" fg:w="6018054"/><text x="86.1076%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (2,006,018 samples, 0.20%)</title><rect x="86.4594%" y="629" width="0.2006%" height="15" fill="rgb(233,213,13)" fg:x="864593758" fg:w="2006018"/><text x="86.7094%" y="639.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (2,006,018 samples, 0.20%)</title><rect x="86.4594%" y="613" width="0.2006%" height="15" fill="rgb(233,141,41)" fg:x="864593758" fg:w="2006018"/><text x="86.7094%" y="623.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="90.8726%" y="565" width="0.6018%" height="15" fill="rgb(239,167,4)" fg:x="908726154" fg:w="6018054"/><text x="91.1226%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,018,054 samples, 0.60%)</title><rect x="90.8726%" y="549" width="0.6018%" height="15" fill="rgb(209,217,16)" fg:x="908726154" fg:w="6018054"/><text x="91.1226%" y="559.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="91.1735%" y="533" width="0.3009%" height="15" fill="rgb(219,88,35)" fg:x="911735181" fg:w="3009027"/><text x="91.4235%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="565" width="0.1003%" height="15" fill="rgb(220,193,23)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="575.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="549" width="0.1003%" height="15" fill="rgb(230,90,52)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="533" width="0.1003%" height="15" fill="rgb(252,106,19)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="543.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (6,018,054 samples, 0.60%)</title><rect x="91.5747%" y="565" width="0.6018%" height="15" fill="rgb(206,74,20)" fg:x="915747217" fg:w="6018054"/><text x="91.8247%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,018,054 samples, 0.60%)</title><rect x="91.5747%" y="549" width="0.6018%" height="15" fill="rgb(230,138,44)" fg:x="915747217" fg:w="6018054"/><text x="91.8247%" y="559.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="92.0762%" y="533" width="0.1003%" height="15" fill="rgb(235,182,43)" fg:x="920762262" fg:w="1003009"/><text x="92.3262%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (57,171,513 samples, 5.72%)</title><rect x="86.6600%" y="629" width="5.7172%" height="15" fill="rgb(242,16,51)" fg:x="866599776" fg:w="57171513"/><text x="86.9100%" y="639.50">core::s..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (27,081,243 samples, 2.71%)</title><rect x="89.6690%" y="613" width="2.7081%" height="15" fill="rgb(248,9,4)" fg:x="896690046" fg:w="27081243"/><text x="89.9190%" y="623.50">&lt;&amp;..</text></g><g><title>core::str::pattern::StrSearcher::new (27,081,243 samples, 2.71%)</title><rect x="89.6690%" y="597" width="2.7081%" height="15" fill="rgb(210,31,22)" fg:x="896690046" fg:w="27081243"/><text x="89.9190%" y="607.50">co..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (21,063,189 samples, 2.11%)</title><rect x="90.2708%" y="581" width="2.1063%" height="15" fill="rgb(239,54,39)" fg:x="902708100" fg:w="21063189"/><text x="90.5208%" y="591.50">c..</text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (2,006,018 samples, 0.20%)</title><rect x="92.1765%" y="565" width="0.2006%" height="15" fill="rgb(230,99,41)" fg:x="921765271" fg:w="2006018"/><text x="92.4265%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,003,009 samples, 0.10%)</title><rect x="92.6780%" y="565" width="0.1003%" height="15" fill="rgb(253,106,12)" fg:x="926780316" fg:w="1003009"/><text x="92.9280%" y="575.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="93.1795%" y="549" width="0.8024%" height="15" fill="rgb(213,46,41)" fg:x="931795361" fg:w="8024072"/><text x="93.4295%" y="559.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.80%)</title><rect x="93.1795%" y="533" width="0.8024%" height="15" fill="rgb(215,133,35)" fg:x="931795361" fg:w="8024072"/><text x="93.4295%" y="543.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="93.9819%" y="549" width="0.1003%" height="15" fill="rgb(213,28,5)" fg:x="939819433" fg:w="1003009"/><text x="94.2319%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="93.9819%" y="533" width="0.1003%" height="15" fill="rgb(215,77,49)" fg:x="939819433" fg:w="1003009"/><text x="94.2319%" y="543.50"></text></g><g><title>hashbrown::control::tag::Tag::full (9,027,081 samples, 0.90%)</title><rect x="94.0822%" y="549" width="0.9027%" height="15" fill="rgb(248,100,22)" fg:x="940822442" fg:w="9027081"/><text x="94.3322%" y="559.50"></text></g><g><title>core::intrinsics::unlikely (4,012,036 samples, 0.40%)</title><rect x="94.9850%" y="533" width="0.4012%" height="15" fill="rgb(208,67,9)" fg:x="949849523" fg:w="4012036"/><text x="95.2350%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (31,093,279 samples, 3.11%)</title><rect x="92.6780%" y="597" width="3.1093%" height="15" fill="rgb(219,133,21)" fg:x="926780316" fg:w="31093279"/><text x="92.9280%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (31,093,279 samples, 3.11%)</title><rect x="92.6780%" y="581" width="3.1093%" height="15" fill="rgb(246,46,29)" fg:x="926780316" fg:w="31093279"/><text x="92.9280%" y="591.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (30,090,270 samples, 3.01%)</title><rect x="92.7783%" y="565" width="3.0090%" height="15" fill="rgb(246,185,52)" fg:x="927783325" fg:w="30090270"/><text x="93.0283%" y="575.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (8,024,072 samples, 0.80%)</title><rect x="94.9850%" y="549" width="0.8024%" height="15" fill="rgb(252,136,11)" fg:x="949849523" fg:w="8024072"/><text x="95.2350%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4,012,036 samples, 0.40%)</title><rect x="95.3862%" y="533" width="0.4012%" height="15" fill="rgb(219,138,53)" fg:x="953861559" fg:w="4012036"/><text x="95.6362%" y="543.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (4,012,036 samples, 0.40%)</title><rect x="95.3862%" y="517" width="0.4012%" height="15" fill="rgb(211,51,23)" fg:x="953861559" fg:w="4012036"/><text x="95.6362%" y="527.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="95.7874%" y="549" width="0.1003%" height="15" fill="rgb(247,221,28)" fg:x="957873595" fg:w="1003009"/><text x="96.0374%" y="559.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="95.7874%" y="533" width="0.1003%" height="15" fill="rgb(251,222,45)" fg:x="957873595" fg:w="1003009"/><text x="96.0374%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (10,030,090 samples, 1.00%)</title><rect x="95.7874%" y="565" width="1.0030%" height="15" fill="rgb(217,162,53)" fg:x="957873595" fg:w="10030090"/><text x="96.0374%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9,027,081 samples, 0.90%)</title><rect x="95.8877%" y="549" width="0.9027%" height="15" fill="rgb(229,93,14)" fg:x="958876604" fg:w="9027081"/><text x="96.1377%" y="559.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="96.9910%" y="517" width="0.2006%" height="15" fill="rgb(209,67,49)" fg:x="969909703" fg:w="2006018"/><text x="97.2410%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="96.9910%" y="501" width="0.2006%" height="15" fill="rgb(213,87,29)" fg:x="969909703" fg:w="2006018"/><text x="97.2410%" y="511.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="96.9910%" y="485" width="0.2006%" height="15" fill="rgb(205,151,52)" fg:x="969909703" fg:w="2006018"/><text x="97.2410%" y="495.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="96.9910%" y="469" width="0.2006%" height="15" fill="rgb(253,215,39)" fg:x="969909703" fg:w="2006018"/><text x="97.2410%" y="479.50"></text></g><g><title>ahash::operations::folded_multiply (7,021,063 samples, 0.70%)</title><rect x="97.2919%" y="469" width="0.7021%" height="15" fill="rgb(221,220,41)" fg:x="972918730" fg:w="7021063"/><text x="97.5419%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="97.8937%" y="453" width="0.1003%" height="15" fill="rgb(218,133,21)" fg:x="978936784" fg:w="1003009"/><text x="98.1437%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (23,069,207 samples, 2.31%)</title><rect x="95.7874%" y="597" width="2.3069%" height="15" fill="rgb(221,193,43)" fg:x="957873595" fg:w="23069207"/><text x="96.0374%" y="607.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (23,069,207 samples, 2.31%)</title><rect x="95.7874%" y="581" width="2.3069%" height="15" fill="rgb(240,128,52)" fg:x="957873595" fg:w="23069207"/><text x="96.0374%" y="591.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13,039,117 samples, 1.30%)</title><rect x="96.7904%" y="565" width="1.3039%" height="15" fill="rgb(253,114,12)" fg:x="967903685" fg:w="13039117"/><text x="97.0404%" y="575.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (13,039,117 samples, 1.30%)</title><rect x="96.7904%" y="549" width="1.3039%" height="15" fill="rgb(215,223,47)" fg:x="967903685" fg:w="13039117"/><text x="97.0404%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (13,039,117 samples, 1.30%)</title><rect x="96.7904%" y="533" width="1.3039%" height="15" fill="rgb(248,225,23)" fg:x="967903685" fg:w="13039117"/><text x="97.0404%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (9,027,081 samples, 0.90%)</title><rect x="97.1916%" y="517" width="0.9027%" height="15" fill="rgb(250,108,0)" fg:x="971915721" fg:w="9027081"/><text x="97.4416%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (9,027,081 samples, 0.90%)</title><rect x="97.1916%" y="501" width="0.9027%" height="15" fill="rgb(228,208,7)" fg:x="971915721" fg:w="9027081"/><text x="97.4416%" y="511.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (9,027,081 samples, 0.90%)</title><rect x="97.1916%" y="485" width="0.9027%" height="15" fill="rgb(244,45,10)" fg:x="971915721" fg:w="9027081"/><text x="97.4416%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="97.9940%" y="469" width="0.1003%" height="15" fill="rgb(207,125,25)" fg:x="979939793" fg:w="1003009"/><text x="98.2440%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (11,033,099 samples, 1.10%)</title><rect x="98.0943%" y="581" width="1.1033%" height="15" fill="rgb(210,195,18)" fg:x="980942802" fg:w="11033099"/><text x="98.3443%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (11,033,099 samples, 1.10%)</title><rect x="98.0943%" y="565" width="1.1033%" height="15" fill="rgb(249,80,12)" fg:x="980942802" fg:w="11033099"/><text x="98.3443%" y="575.50"></text></g><g><title>core::ptr::write (11,033,099 samples, 1.10%)</title><rect x="98.0943%" y="549" width="1.1033%" height="15" fill="rgb(221,65,9)" fg:x="980942802" fg:w="11033099"/><text x="98.3443%" y="559.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (997,993,955 samples, 99.80%)</title><rect x="0.1003%" y="677" width="99.7994%" height="15" fill="rgb(235,49,36)" fg:x="1003009" fg:w="997993955"/><text x="0.3503%" y="687.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1 (997,993,955 samples, 99.80%)</title><rect x="0.1003%" y="661" width="99.7994%" height="15" fill="rgb(225,32,20)" fg:x="1003009" fg:w="997993955"/><text x="0.3503%" y="671.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day5::part1 (997,993,955 samples, 99.80%)</title><rect x="0.1003%" y="645" width="99.7994%" height="15" fill="rgb(215,141,46)" fg:x="1003009" fg:w="997993955"/><text x="0.3503%" y="655.50">aoc_2024_megaproject::problems::day5::part1</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (75,225,675 samples, 7.52%)</title><rect x="92.3771%" y="629" width="7.5226%" height="15" fill="rgb(250,160,47)" fg:x="923771289" fg:w="75225675"/><text x="92.6271%" y="639.50">std::colle..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (74,222,666 samples, 7.42%)</title><rect x="92.4774%" y="613" width="7.4223%" height="15" fill="rgb(216,222,40)" fg:x="924774298" fg:w="74222666"/><text x="92.7274%" y="623.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (18,054,162 samples, 1.81%)</title><rect x="98.0943%" y="597" width="1.8054%" height="15" fill="rgb(234,217,39)" fg:x="980942802" fg:w="18054162"/><text x="98.3443%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (7,021,063 samples, 0.70%)</title><rect x="99.1976%" y="581" width="0.7021%" height="15" fill="rgb(207,178,40)" fg:x="991975901" fg:w="7021063"/><text x="99.4476%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="565" width="0.1003%" height="15" fill="rgb(221,136,13)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="549" width="0.1003%" height="15" fill="rgb(249,199,10)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="533" width="0.1003%" height="15" fill="rgb(249,222,13)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="543.50"></text></g><g><title>all (999,999,973 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1007.50"></text></g><g><title>aoc-2024-megapr (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="991.50">aoc-2024-megapr</text></g><g><title>_start (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="965" width="99.8997%" height="15" fill="rgb(250,229,37)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="975.50">_start</text></g><g><title>__libc_start_main (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="949" width="99.8997%" height="15" fill="rgb(206,174,23)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="959.50">__libc_start_main</text></g><g><title>[libc.so.6] (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="933" width="99.8997%" height="15" fill="rgb(211,33,43)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="943.50">[libc.so.6]</text></g><g><title>main (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="917" width="99.8997%" height="15" fill="rgb(245,58,50)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="901" width="99.8997%" height="15" fill="rgb(244,68,36)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="885" width="99.8997%" height="15" fill="rgb(232,229,15)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="869" width="99.8997%" height="15" fill="rgb(254,30,23)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="853" width="99.8997%" height="15" fill="rgb(235,160,14)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="837" width="99.8997%" height="15" fill="rgb(212,155,44)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="847.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="821" width="99.8997%" height="15" fill="rgb(226,2,50)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="805" width="99.8997%" height="15" fill="rgb(234,177,6)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="789" width="99.8997%" height="15" fill="rgb(217,24,9)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="773" width="99.8997%" height="15" fill="rgb(220,13,46)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="757" width="99.8997%" height="15" fill="rgb(239,221,27)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="741" width="99.8997%" height="15" fill="rgb(222,198,25)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="751.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="725" width="99.8997%" height="15" fill="rgb(211,99,13)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="735.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="709" width="99.8997%" height="15" fill="rgb(232,111,31)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="719.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (998,996,964 samples, 99.90%)</title><rect x="0.1003%" y="693" width="99.8997%" height="15" fill="rgb(245,82,37)" fg:x="1003009" fg:w="998996964"/><text x="0.3503%" y="703.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="677" width="0.1003%" height="15" fill="rgb(227,149,46)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="687.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="661" width="0.1003%" height="15" fill="rgb(218,36,50)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="671.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="645" width="0.1003%" height="15" fill="rgb(226,80,48)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="655.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="629" width="0.1003%" height="15" fill="rgb(238,224,15)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="639.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="613" width="0.1003%" height="15" fill="rgb(241,136,10)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="623.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="597" width="0.1003%" height="15" fill="rgb(208,32,45)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="607.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="581" width="0.1003%" height="15" fill="rgb(207,135,9)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="591.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="565" width="0.1003%" height="15" fill="rgb(206,86,44)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="549" width="0.1003%" height="15" fill="rgb(245,177,15)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="533" width="0.1003%" height="15" fill="rgb(206,64,50)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="517" width="0.1003%" height="15" fill="rgb(234,36,40)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="501" width="0.1003%" height="15" fill="rgb(213,64,8)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="485" width="0.1003%" height="15" fill="rgb(210,75,36)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="469" width="0.1003%" height="15" fill="rgb(229,88,21)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="453" width="0.1003%" height="15" fill="rgb(252,204,47)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="437" width="0.1003%" height="15" fill="rgb(208,77,27)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="421" width="0.1003%" height="15" fill="rgb(221,76,26)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="405" width="0.1003%" height="15" fill="rgb(225,139,18)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="389" width="0.1003%" height="15" fill="rgb(230,137,11)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="373" width="0.1003%" height="15" fill="rgb(212,28,1)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="357" width="0.1003%" height="15" fill="rgb(248,164,17)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="341" width="0.1003%" height="15" fill="rgb(222,171,42)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="325" width="0.1003%" height="15" fill="rgb(243,84,45)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="309" width="0.1003%" height="15" fill="rgb(252,49,23)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="293" width="0.1003%" height="15" fill="rgb(215,19,7)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="277" width="0.1003%" height="15" fill="rgb(238,81,41)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="261" width="0.1003%" height="15" fill="rgb(210,199,37)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="245" width="0.1003%" height="15" fill="rgb(244,192,49)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="229" width="0.1003%" height="15" fill="rgb(226,211,11)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="239.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="213" width="0.1003%" height="15" fill="rgb(236,162,54)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="223.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="197" width="0.1003%" height="15" fill="rgb(220,229,9)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="181" width="0.1003%" height="15" fill="rgb(250,87,22)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="191.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="165" width="0.1003%" height="15" fill="rgb(239,43,17)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="149" width="0.1003%" height="15" fill="rgb(231,177,25)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="133" width="0.1003%" height="15" fill="rgb(219,179,1)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="117" width="0.1003%" height="15" fill="rgb(238,219,53)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="101" width="0.1003%" height="15" fill="rgb(232,167,36)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="85" width="0.1003%" height="15" fill="rgb(244,19,51)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="69" width="0.1003%" height="15" fill="rgb(224,6,22)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="53" width="0.1003%" height="15" fill="rgb(224,145,5)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="37" width="0.1003%" height="15" fill="rgb(234,130,49)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="47.50"></text></g></svg></svg>