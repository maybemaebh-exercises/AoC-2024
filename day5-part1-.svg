<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>[ld-linux-x86-64.so.2] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="693" width="0.1002%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="677" width="0.1002%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="661" width="0.1002%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="671.50"></text></g><g><title>__cpu_indicator_init (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="645" width="0.1002%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="629" width="0.1002%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="613" width="0.1002%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="597" width="0.1002%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="581" width="0.1002%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="565" width="0.1002%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="549" width="0.1002%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="533" width="0.1002%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="517" width="0.1002%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="501" width="0.1002%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="0.0000%" y="485" width="0.1002%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="11.6232%" y="229" width="0.3006%" height="15" fill="rgb(217,207,13)" fg:x="116349044" fg:w="3009027"/><text x="11.8732%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (3,009,027 samples, 0.30%)</title><rect x="11.6232%" y="213" width="0.3006%" height="15" fill="rgb(231,73,38)" fg:x="116349044" fg:w="3009027"/><text x="11.8732%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3,009,027 samples, 0.30%)</title><rect x="11.6232%" y="197" width="0.3006%" height="15" fill="rgb(225,20,46)" fg:x="116349044" fg:w="3009027"/><text x="11.8732%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="11.6232%" y="181" width="0.3006%" height="15" fill="rgb(210,31,41)" fg:x="116349044" fg:w="3009027"/><text x="11.8732%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="11.9238%" y="229" width="0.1002%" height="15" fill="rgb(221,200,47)" fg:x="119358071" fg:w="1003009"/><text x="12.1738%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="11.9238%" y="213" width="0.1002%" height="15" fill="rgb(226,26,5)" fg:x="119358071" fg:w="1003009"/><text x="12.1738%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="11.9238%" y="197" width="0.1002%" height="15" fill="rgb(249,33,26)" fg:x="119358071" fg:w="1003009"/><text x="12.1738%" y="207.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (87,261,783 samples, 8.72%)</title><rect x="3.6072%" y="261" width="8.7174%" height="15" fill="rgb(235,183,28)" fg:x="36108324" fg:w="87261783"/><text x="3.8572%" y="271.50">&lt;core::str::..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (72,216,648 samples, 7.21%)</title><rect x="5.1102%" y="245" width="7.2144%" height="15" fill="rgb(221,5,38)" fg:x="51153459" fg:w="72216648"/><text x="5.3602%" y="255.50">core::str:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,009,027 samples, 0.30%)</title><rect x="12.0240%" y="229" width="0.3006%" height="15" fill="rgb(247,18,42)" fg:x="120361080" fg:w="3009027"/><text x="12.2740%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,009,027 samples, 0.30%)</title><rect x="12.0240%" y="213" width="0.3006%" height="15" fill="rgb(241,131,45)" fg:x="120361080" fg:w="3009027"/><text x="12.2740%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (2,006,018 samples, 0.20%)</title><rect x="12.3246%" y="261" width="0.2004%" height="15" fill="rgb(249,31,29)" fg:x="123370107" fg:w="2006018"/><text x="12.5746%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2,006,018 samples, 0.20%)</title><rect x="12.3246%" y="245" width="0.2004%" height="15" fill="rgb(225,111,53)" fg:x="123370107" fg:w="2006018"/><text x="12.5746%" y="255.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (114,343,026 samples, 11.42%)</title><rect x="1.2024%" y="293" width="11.4228%" height="15" fill="rgb(238,160,17)" fg:x="12036108" fg:w="114343026"/><text x="1.4524%" y="303.50">&lt;core::str::iter:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (108,324,972 samples, 10.82%)</title><rect x="1.8036%" y="277" width="10.8216%" height="15" fill="rgb(214,148,48)" fg:x="18054162" fg:w="108324972"/><text x="2.0536%" y="287.50">core::str::iter:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="12.5251%" y="261" width="0.1002%" height="15" fill="rgb(232,36,49)" fg:x="125376125" fg:w="1003009"/><text x="12.7751%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (138,415,242 samples, 13.83%)</title><rect x="0.9018%" y="309" width="13.8277%" height="15" fill="rgb(209,103,24)" fg:x="9027081" fg:w="138415242"/><text x="1.1518%" y="319.50">&lt;core::iter::adapters..</text></g><g><title>core::option::Option&lt;T&gt;::map (21,063,189 samples, 2.10%)</title><rect x="12.6253%" y="293" width="2.1042%" height="15" fill="rgb(229,88,8)" fg:x="126379134" fg:w="21063189"/><text x="12.8753%" y="303.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18,054,162 samples, 1.80%)</title><rect x="12.9259%" y="277" width="1.8036%" height="15" fill="rgb(213,181,19)" fg:x="129388161" fg:w="18054162"/><text x="13.1759%" y="287.50">c..</text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (18,054,162 samples, 1.80%)</title><rect x="12.9259%" y="261" width="1.8036%" height="15" fill="rgb(254,191,54)" fg:x="129388161" fg:w="18054162"/><text x="13.1759%" y="271.50">a..</text></g><g><title>core::str::&lt;impl str&gt;::parse (18,054,162 samples, 1.80%)</title><rect x="12.9259%" y="245" width="1.8036%" height="15" fill="rgb(241,83,37)" fg:x="129388161" fg:w="18054162"/><text x="13.1759%" y="255.50">c..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (18,054,162 samples, 1.80%)</title><rect x="12.9259%" y="229" width="1.8036%" height="15" fill="rgb(233,36,39)" fg:x="129388161" fg:w="18054162"/><text x="13.1759%" y="239.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (18,054,162 samples, 1.80%)</title><rect x="12.9259%" y="213" width="1.8036%" height="15" fill="rgb(226,3,54)" fg:x="129388161" fg:w="18054162"/><text x="13.1759%" y="223.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (18,054,162 samples, 1.80%)</title><rect x="12.9259%" y="197" width="1.8036%" height="15" fill="rgb(245,192,40)" fg:x="129388161" fg:w="18054162"/><text x="13.1759%" y="207.50">c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (5,015,045 samples, 0.50%)</title><rect x="14.2285%" y="181" width="0.5010%" height="15" fill="rgb(238,167,29)" fg:x="142427278" fg:w="5015045"/><text x="14.4785%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (5,015,045 samples, 0.50%)</title><rect x="14.2285%" y="165" width="0.5010%" height="15" fill="rgb(232,182,51)" fg:x="142427278" fg:w="5015045"/><text x="14.4785%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1,003,009 samples, 0.10%)</title><rect x="14.7295%" y="309" width="0.1002%" height="15" fill="rgb(231,60,39)" fg:x="147442323" fg:w="1003009"/><text x="14.9795%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (149,448,341 samples, 14.93%)</title><rect x="0.5010%" y="357" width="14.9299%" height="15" fill="rgb(208,69,12)" fg:x="5015045" fg:w="149448341"/><text x="0.7510%" y="367.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (149,448,341 samples, 14.93%)</title><rect x="0.5010%" y="341" width="14.9299%" height="15" fill="rgb(235,93,37)" fg:x="5015045" fg:w="149448341"/><text x="0.7510%" y="351.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (148,445,332 samples, 14.83%)</title><rect x="0.6012%" y="325" width="14.8297%" height="15" fill="rgb(213,116,39)" fg:x="6018054" fg:w="148445332"/><text x="0.8512%" y="335.50">alloc::vec::Vec&lt;T,A&gt;::e..</text></g><g><title>core::ptr::write (6,018,054 samples, 0.60%)</title><rect x="14.8297%" y="309" width="0.6012%" height="15" fill="rgb(222,207,29)" fg:x="148445332" fg:w="6018054"/><text x="15.0797%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="20.5411%" y="277" width="0.2004%" height="15" fill="rgb(206,96,30)" fg:x="205616845" fg:w="2006018"/><text x="20.7911%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="20.5411%" y="261" width="0.2004%" height="15" fill="rgb(218,138,4)" fg:x="205616845" fg:w="2006018"/><text x="20.7911%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="20.5411%" y="245" width="0.2004%" height="15" fill="rgb(250,191,14)" fg:x="205616845" fg:w="2006018"/><text x="20.7911%" y="255.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (39,117,351 samples, 3.91%)</title><rect x="17.0341%" y="309" width="3.9078%" height="15" fill="rgb(239,60,40)" fg:x="170511530" fg:w="39117351"/><text x="17.2841%" y="319.50">&lt;cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (36,108,324 samples, 3.61%)</title><rect x="17.3347%" y="293" width="3.6072%" height="15" fill="rgb(206,27,48)" fg:x="173520557" fg:w="36108324"/><text x="17.5847%" y="303.50">core..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="20.7415%" y="277" width="0.2004%" height="15" fill="rgb(225,35,8)" fg:x="207622863" fg:w="2006018"/><text x="20.9915%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="20.7415%" y="261" width="0.2004%" height="15" fill="rgb(250,213,24)" fg:x="207622863" fg:w="2006018"/><text x="20.9915%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (55,165,495 samples, 5.51%)</title><rect x="15.5311%" y="341" width="5.5110%" height="15" fill="rgb(247,123,22)" fg:x="155466395" fg:w="55165495"/><text x="15.7811%" y="351.50">&lt;core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (54,162,486 samples, 5.41%)</title><rect x="15.6313%" y="325" width="5.4108%" height="15" fill="rgb(231,138,38)" fg:x="156469404" fg:w="54162486"/><text x="15.8813%" y="335.50">core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="20.9419%" y="309" width="0.1002%" height="15" fill="rgb(231,145,46)" fg:x="209628881" fg:w="1003009"/><text x="21.1919%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (70,210,630 samples, 7.01%)</title><rect x="15.4309%" y="357" width="7.0140%" height="15" fill="rgb(251,118,11)" fg:x="154463386" fg:w="70210630"/><text x="15.6809%" y="367.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (14,042,126 samples, 1.40%)</title><rect x="21.0421%" y="341" width="1.4028%" height="15" fill="rgb(217,147,25)" fg:x="210631890" fg:w="14042126"/><text x="21.2921%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13,039,117 samples, 1.30%)</title><rect x="21.1423%" y="325" width="1.3026%" height="15" fill="rgb(247,81,37)" fg:x="211634899" fg:w="13039117"/><text x="21.3923%" y="335.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part1::_{{closure}} (13,039,117 samples, 1.30%)</title><rect x="21.1423%" y="309" width="1.3026%" height="15" fill="rgb(209,12,38)" fg:x="211634899" fg:w="13039117"/><text x="21.3923%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (13,039,117 samples, 1.30%)</title><rect x="21.1423%" y="293" width="1.3026%" height="15" fill="rgb(227,1,9)" fg:x="211634899" fg:w="13039117"/><text x="21.3923%" y="303.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (13,039,117 samples, 1.30%)</title><rect x="21.1423%" y="277" width="1.3026%" height="15" fill="rgb(248,47,43)" fg:x="211634899" fg:w="13039117"/><text x="21.3923%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (13,039,117 samples, 1.30%)</title><rect x="21.1423%" y="261" width="1.3026%" height="15" fill="rgb(221,10,30)" fg:x="211634899" fg:w="13039117"/><text x="21.3923%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (13,039,117 samples, 1.30%)</title><rect x="21.1423%" y="245" width="1.3026%" height="15" fill="rgb(210,229,1)" fg:x="211634899" fg:w="13039117"/><text x="21.3923%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2,006,018 samples, 0.20%)</title><rect x="22.2445%" y="229" width="0.2004%" height="15" fill="rgb(222,148,37)" fg:x="222667998" fg:w="2006018"/><text x="22.4945%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="22.2445%" y="213" width="0.2004%" height="15" fill="rgb(234,67,33)" fg:x="222667998" fg:w="2006018"/><text x="22.4945%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="23.4469%" y="277" width="0.6012%" height="15" fill="rgb(247,98,35)" fg:x="234704106" fg:w="6018054"/><text x="23.6969%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="23.4469%" y="261" width="0.6012%" height="15" fill="rgb(247,138,52)" fg:x="234704106" fg:w="6018054"/><text x="23.6969%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,018,054 samples, 0.60%)</title><rect x="23.4469%" y="245" width="0.6012%" height="15" fill="rgb(213,79,30)" fg:x="234704106" fg:w="6018054"/><text x="23.6969%" y="255.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="23.7475%" y="229" width="0.3006%" height="15" fill="rgb(246,177,23)" fg:x="237713133" fg:w="3009027"/><text x="23.9975%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,009,027 samples, 0.30%)</title><rect x="24.0481%" y="277" width="0.3006%" height="15" fill="rgb(230,62,27)" fg:x="240722160" fg:w="3009027"/><text x="24.2981%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,009,027 samples, 0.30%)</title><rect x="24.0481%" y="261" width="0.3006%" height="15" fill="rgb(216,154,8)" fg:x="240722160" fg:w="3009027"/><text x="24.2981%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,009,027 samples, 0.30%)</title><rect x="24.0481%" y="245" width="0.3006%" height="15" fill="rgb(244,35,45)" fg:x="240722160" fg:w="3009027"/><text x="24.2981%" y="255.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="25.0501%" y="229" width="0.1002%" height="15" fill="rgb(251,115,12)" fg:x="250752250" fg:w="1003009"/><text x="25.3001%" y="239.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (43,129,387 samples, 4.31%)</title><rect x="22.4449%" y="325" width="4.3086%" height="15" fill="rgb(240,54,50)" fg:x="224674016" fg:w="43129387"/><text x="22.6949%" y="335.50">&lt;core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (43,129,387 samples, 4.31%)</title><rect x="22.4449%" y="309" width="4.3086%" height="15" fill="rgb(233,84,52)" fg:x="224674016" fg:w="43129387"/><text x="22.6949%" y="319.50">core:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (38,114,342 samples, 3.81%)</title><rect x="22.9459%" y="293" width="3.8076%" height="15" fill="rgb(207,117,47)" fg:x="229689061" fg:w="38114342"/><text x="23.1959%" y="303.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (24,072,216 samples, 2.40%)</title><rect x="24.3487%" y="277" width="2.4048%" height="15" fill="rgb(249,43,39)" fg:x="243731187" fg:w="24072216"/><text x="24.5987%" y="287.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned (24,072,216 samples, 2.40%)</title><rect x="24.3487%" y="261" width="2.4048%" height="15" fill="rgb(209,38,44)" fg:x="243731187" fg:w="24072216"/><text x="24.5987%" y="271.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (22,066,198 samples, 2.20%)</title><rect x="24.5491%" y="245" width="2.2044%" height="15" fill="rgb(236,212,23)" fg:x="245737205" fg:w="22066198"/><text x="24.7991%" y="255.50">c..</text></g><g><title>core::slice::memchr::memchr_naive (16,048,144 samples, 1.60%)</title><rect x="25.1503%" y="229" width="1.6032%" height="15" fill="rgb(242,79,21)" fg:x="251755259" fg:w="16048144"/><text x="25.4003%" y="239.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (45,135,405 samples, 4.51%)</title><rect x="22.4449%" y="357" width="4.5090%" height="15" fill="rgb(211,96,35)" fg:x="224674016" fg:w="45135405"/><text x="22.6949%" y="367.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,135,405 samples, 4.51%)</title><rect x="22.4449%" y="341" width="4.5090%" height="15" fill="rgb(253,215,40)" fg:x="224674016" fg:w="45135405"/><text x="22.6949%" y="351.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,006,018 samples, 0.20%)</title><rect x="26.7535%" y="325" width="0.2004%" height="15" fill="rgb(211,81,21)" fg:x="267803403" fg:w="2006018"/><text x="27.0035%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="309" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="319.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="293" width="0.1002%" height="15" fill="rgb(235,213,38)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="303.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="277" width="0.1002%" height="15" fill="rgb(237,122,38)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="261" width="0.1002%" height="15" fill="rgb(244,218,35)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="271.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="245" width="0.1002%" height="15" fill="rgb(240,68,47)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="255.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="229" width="0.1002%" height="15" fill="rgb(210,16,53)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="239.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="213" width="0.1002%" height="15" fill="rgb(235,124,12)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,003,009 samples, 0.10%)</title><rect x="26.8537%" y="197" width="0.1002%" height="15" fill="rgb(224,169,11)" fg:x="268806412" fg:w="1003009"/><text x="27.1037%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="357" width="0.1002%" height="15" fill="rgb(250,166,2)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="341" width="0.1002%" height="15" fill="rgb(242,216,29)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="325" width="0.1002%" height="15" fill="rgb(230,116,27)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="309" width="0.1002%" height="15" fill="rgb(228,99,48)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="293" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="277" width="0.1002%" height="15" fill="rgb(247,143,39)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="261" width="0.1002%" height="15" fill="rgb(236,97,10)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="245" width="0.1002%" height="15" fill="rgb(233,208,19)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="255.50"></text></g><g><title>__rustc::__rust_alloc (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="229" width="0.1002%" height="15" fill="rgb(216,164,2)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="239.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="213" width="0.1002%" height="15" fill="rgb(220,129,5)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="197" width="0.1002%" height="15" fill="rgb(242,17,10)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="207.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="26.9539%" y="181" width="0.1002%" height="15" fill="rgb(242,107,0)" fg:x="269809421" fg:w="1003009"/><text x="27.2039%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="29.6593%" y="341" width="0.1002%" height="15" fill="rgb(251,28,31)" fg:x="296890664" fg:w="1003009"/><text x="29.9093%" y="351.50"></text></g><g><title>ahash::operations::folded_multiply (14,042,126 samples, 1.40%)</title><rect x="31.5631%" y="181" width="1.4028%" height="15" fill="rgb(233,223,10)" fg:x="315947835" fg:w="14042126"/><text x="31.8131%" y="191.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="32.7655%" y="165" width="0.2004%" height="15" fill="rgb(215,21,27)" fg:x="327983943" fg:w="2006018"/><text x="33.0155%" y="175.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (20,060,180 samples, 2.00%)</title><rect x="31.5631%" y="197" width="2.0040%" height="15" fill="rgb(232,23,21)" fg:x="315947835" fg:w="20060180"/><text x="31.8131%" y="207.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.60%)</title><rect x="32.9659%" y="181" width="0.6012%" height="15" fill="rgb(244,5,23)" fg:x="329989961" fg:w="6018054"/><text x="33.2159%" y="191.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (8,024,072 samples, 0.80%)</title><rect x="33.5671%" y="197" width="0.8016%" height="15" fill="rgb(226,81,46)" fg:x="336008015" fg:w="8024072"/><text x="33.8171%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (8,024,072 samples, 0.80%)</title><rect x="33.5671%" y="181" width="0.8016%" height="15" fill="rgb(247,70,30)" fg:x="336008015" fg:w="8024072"/><text x="33.8171%" y="191.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="34.3687%" y="149" width="0.2004%" height="15" fill="rgb(212,68,19)" fg:x="344032087" fg:w="2006018"/><text x="34.6187%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="34.3687%" y="133" width="0.2004%" height="15" fill="rgb(240,187,13)" fg:x="344032087" fg:w="2006018"/><text x="34.6187%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="34.3687%" y="117" width="0.2004%" height="15" fill="rgb(223,113,26)" fg:x="344032087" fg:w="2006018"/><text x="34.6187%" y="127.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="34.3687%" y="101" width="0.2004%" height="15" fill="rgb(206,192,2)" fg:x="344032087" fg:w="2006018"/><text x="34.6187%" y="111.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="34.4689%" y="85" width="0.1002%" height="15" fill="rgb(241,108,4)" fg:x="345035096" fg:w="1003009"/><text x="34.7189%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="34.4689%" y="69" width="0.1002%" height="15" fill="rgb(247,173,49)" fg:x="345035096" fg:w="1003009"/><text x="34.7189%" y="79.50"></text></g><g><title>ahash::operations::folded_multiply (6,018,054 samples, 0.60%)</title><rect x="34.9699%" y="101" width="0.6012%" height="15" fill="rgb(224,114,35)" fg:x="350050141" fg:w="6018054"/><text x="35.2199%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (11,033,099 samples, 1.10%)</title><rect x="34.5691%" y="117" width="1.1022%" height="15" fill="rgb(245,159,27)" fg:x="346038105" fg:w="11033099"/><text x="34.8191%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="35.5711%" y="101" width="0.1002%" height="15" fill="rgb(245,172,44)" fg:x="356068195" fg:w="1003009"/><text x="35.8211%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (62,186,558 samples, 6.21%)</title><rect x="31.5631%" y="229" width="6.2124%" height="15" fill="rgb(236,23,11)" fg:x="315947835" fg:w="62186558"/><text x="31.8131%" y="239.50">hashbrow..</text></g><g><title>core::hash::BuildHasher::hash_one (62,186,558 samples, 6.21%)</title><rect x="31.5631%" y="213" width="6.2124%" height="15" fill="rgb(205,117,38)" fg:x="315947835" fg:w="62186558"/><text x="31.8131%" y="223.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (34,102,306 samples, 3.41%)</title><rect x="34.3687%" y="197" width="3.4068%" height="15" fill="rgb(237,72,25)" fg:x="344032087" fg:w="34102306"/><text x="34.6187%" y="207.50">cor..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (34,102,306 samples, 3.41%)</title><rect x="34.3687%" y="181" width="3.4068%" height="15" fill="rgb(244,70,9)" fg:x="344032087" fg:w="34102306"/><text x="34.6187%" y="191.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (34,102,306 samples, 3.41%)</title><rect x="34.3687%" y="165" width="3.4068%" height="15" fill="rgb(217,125,39)" fg:x="344032087" fg:w="34102306"/><text x="34.6187%" y="175.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (32,096,288 samples, 3.21%)</title><rect x="34.5691%" y="149" width="3.2064%" height="15" fill="rgb(235,36,10)" fg:x="346038105" fg:w="32096288"/><text x="34.8191%" y="159.50">cor..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (32,096,288 samples, 3.21%)</title><rect x="34.5691%" y="133" width="3.2064%" height="15" fill="rgb(251,123,47)" fg:x="346038105" fg:w="32096288"/><text x="34.8191%" y="143.50">&lt;ah..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (21,063,189 samples, 2.10%)</title><rect x="35.6713%" y="117" width="2.1042%" height="15" fill="rgb(221,13,13)" fg:x="357071204" fg:w="21063189"/><text x="35.9213%" y="127.50">c..</text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13,039,117 samples, 1.30%)</title><rect x="39.0782%" y="181" width="1.3026%" height="15" fill="rgb(238,131,9)" fg:x="391173510" fg:w="13039117"/><text x="39.3282%" y="191.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (13,039,117 samples, 1.30%)</title><rect x="39.0782%" y="165" width="1.3026%" height="15" fill="rgb(211,50,8)" fg:x="391173510" fg:w="13039117"/><text x="39.3282%" y="175.50"></text></g><g><title>core::intrinsics::likely (13,039,117 samples, 1.30%)</title><rect x="40.3808%" y="181" width="1.3026%" height="15" fill="rgb(245,182,24)" fg:x="404212627" fg:w="13039117"/><text x="40.6308%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (11,033,099 samples, 1.10%)</title><rect x="41.6834%" y="181" width="1.1022%" height="15" fill="rgb(242,14,37)" fg:x="417251744" fg:w="11033099"/><text x="41.9334%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11,033,099 samples, 1.10%)</title><rect x="41.6834%" y="165" width="1.1022%" height="15" fill="rgb(246,228,12)" fg:x="417251744" fg:w="11033099"/><text x="41.9334%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,033,099 samples, 1.10%)</title><rect x="41.6834%" y="149" width="1.1022%" height="15" fill="rgb(213,55,15)" fg:x="417251744" fg:w="11033099"/><text x="41.9334%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,012,036 samples, 0.40%)</title><rect x="42.7856%" y="181" width="0.4008%" height="15" fill="rgb(209,9,3)" fg:x="428284843" fg:w="4012036"/><text x="43.0356%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.40%)</title><rect x="42.7856%" y="165" width="0.4008%" height="15" fill="rgb(230,59,30)" fg:x="428284843" fg:w="4012036"/><text x="43.0356%" y="175.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,006,018 samples, 0.20%)</title><rect x="43.1864%" y="181" width="0.2004%" height="15" fill="rgb(209,121,21)" fg:x="432296879" fg:w="2006018"/><text x="43.4364%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (81,243,729 samples, 8.12%)</title><rect x="43.3868%" y="165" width="8.1162%" height="15" fill="rgb(220,109,13)" fg:x="434302897" fg:w="81243729"/><text x="43.6368%" y="175.50">hashbrown::..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (81,243,729 samples, 8.12%)</title><rect x="43.3868%" y="149" width="8.1162%" height="15" fill="rgb(232,18,1)" fg:x="434302897" fg:w="81243729"/><text x="43.6368%" y="159.50">&lt;Q as hashb..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81,243,729 samples, 8.12%)</title><rect x="43.3868%" y="133" width="8.1162%" height="15" fill="rgb(215,41,42)" fg:x="434302897" fg:w="81243729"/><text x="43.6368%" y="143.50">core::cmp::..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (81,243,729 samples, 8.12%)</title><rect x="43.3868%" y="117" width="8.1162%" height="15" fill="rgb(224,123,36)" fg:x="434302897" fg:w="81243729"/><text x="43.6368%" y="127.50">core::array..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (81,243,729 samples, 8.12%)</title><rect x="43.3868%" y="101" width="8.1162%" height="15" fill="rgb(240,125,3)" fg:x="434302897" fg:w="81243729"/><text x="43.6368%" y="111.50">&lt;T as core:..</text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="51.4028%" y="85" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="514543617" fg:w="1003009"/><text x="51.6528%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="51.4028%" y="69" width="0.1002%" height="15" fill="rgb(205,185,37)" fg:x="514543617" fg:w="1003009"/><text x="51.6528%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="51.4028%" y="53" width="0.1002%" height="15" fill="rgb(238,207,15)" fg:x="514543617" fg:w="1003009"/><text x="51.6528%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="51.4028%" y="37" width="0.1002%" height="15" fill="rgb(213,199,42)" fg:x="514543617" fg:w="1003009"/><text x="51.6528%" y="47.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13,039,117 samples, 1.30%)</title><rect x="51.5030%" y="165" width="1.3026%" height="15" fill="rgb(235,201,11)" fg:x="515546626" fg:w="13039117"/><text x="51.7530%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13,039,117 samples, 1.30%)</title><rect x="51.5030%" y="149" width="1.3026%" height="15" fill="rgb(207,46,11)" fg:x="515546626" fg:w="13039117"/><text x="51.7530%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13,039,117 samples, 1.30%)</title><rect x="51.5030%" y="133" width="1.3026%" height="15" fill="rgb(241,35,35)" fg:x="515546626" fg:w="13039117"/><text x="51.7530%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (100,300,900 samples, 10.02%)</title><rect x="43.3868%" y="181" width="10.0200%" height="15" fill="rgb(243,32,47)" fg:x="434302897" fg:w="100300900"/><text x="43.6368%" y="191.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (6,018,054 samples, 0.60%)</title><rect x="52.8056%" y="165" width="0.6012%" height="15" fill="rgb(247,202,23)" fg:x="528585743" fg:w="6018054"/><text x="53.0556%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6,018,054 samples, 0.60%)</title><rect x="52.8056%" y="149" width="0.6012%" height="15" fill="rgb(219,102,11)" fg:x="528585743" fg:w="6018054"/><text x="53.0556%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6,018,054 samples, 0.60%)</title><rect x="52.8056%" y="133" width="0.6012%" height="15" fill="rgb(243,110,44)" fg:x="528585743" fg:w="6018054"/><text x="53.0556%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (261,785,349 samples, 26.15%)</title><rect x="29.7595%" y="341" width="26.1523%" height="15" fill="rgb(222,74,54)" fg:x="297893673" fg:w="261785349"/><text x="30.0095%" y="351.50">core::cmp::impls::&lt;impl core::cmp::Partial..</text></g><g><title>core::cmp::PartialOrd::gt (261,785,349 samples, 26.15%)</title><rect x="29.7595%" y="325" width="26.1523%" height="15" fill="rgb(216,99,12)" fg:x="297893673" fg:w="261785349"/><text x="30.0095%" y="335.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (259,779,331 samples, 25.95%)</title><rect x="29.9599%" y="309" width="25.9519%" height="15" fill="rgb(226,22,26)" fg:x="299899691" fg:w="259779331"/><text x="30.2099%" y="319.50">&lt;aoc_2024_megaproject::problems::day5::Pa..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (255,767,295 samples, 25.55%)</title><rect x="30.3607%" y="293" width="25.5511%" height="15" fill="rgb(217,163,10)" fg:x="303911727" fg:w="255767295"/><text x="30.6107%" y="303.50">aoc_2024_megaproject::problems::day5::Pag..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (254,764,286 samples, 25.45%)</title><rect x="30.4609%" y="277" width="25.4509%" height="15" fill="rgb(213,25,53)" fg:x="304914736" fg:w="254764286"/><text x="30.7109%" y="287.50">std::collections::hash::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (254,764,286 samples, 25.45%)</title><rect x="30.4609%" y="261" width="25.4509%" height="15" fill="rgb(252,105,26)" fg:x="304914736" fg:w="254764286"/><text x="30.7109%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (254,764,286 samples, 25.45%)</title><rect x="30.4609%" y="245" width="25.4509%" height="15" fill="rgb(220,39,43)" fg:x="304914736" fg:w="254764286"/><text x="30.7109%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inn..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (181,544,629 samples, 18.14%)</title><rect x="37.7756%" y="229" width="18.1363%" height="15" fill="rgb(229,68,48)" fg:x="378134393" fg:w="181544629"/><text x="38.0256%" y="239.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (181,544,629 samples, 18.14%)</title><rect x="37.7756%" y="213" width="18.1363%" height="15" fill="rgb(252,8,32)" fg:x="378134393" fg:w="181544629"/><text x="38.0256%" y="223.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (181,544,629 samples, 18.14%)</title><rect x="37.7756%" y="197" width="18.1363%" height="15" fill="rgb(223,20,43)" fg:x="378134393" fg:w="181544629"/><text x="38.0256%" y="207.50">hashbrown::raw::RawTableInne..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (25,075,225 samples, 2.51%)</title><rect x="53.4068%" y="181" width="2.5050%" height="15" fill="rgb(229,81,49)" fg:x="534603797" fg:w="25075225"/><text x="53.6568%" y="191.50">ha..</text></g><g><title>ahash::operations::folded_multiply (12,036,108 samples, 1.20%)</title><rect x="57.8156%" y="181" width="1.2024%" height="15" fill="rgb(236,28,36)" fg:x="578736193" fg:w="12036108"/><text x="58.0656%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (15,045,135 samples, 1.50%)</title><rect x="57.8156%" y="197" width="1.5030%" height="15" fill="rgb(249,185,26)" fg:x="578736193" fg:w="15045135"/><text x="58.0656%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.30%)</title><rect x="59.0180%" y="181" width="0.3006%" height="15" fill="rgb(249,174,33)" fg:x="590772301" fg:w="3009027"/><text x="59.2680%" y="191.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (9,027,081 samples, 0.90%)</title><rect x="59.3186%" y="197" width="0.9018%" height="15" fill="rgb(233,201,37)" fg:x="593781328" fg:w="9027081"/><text x="59.5686%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (9,027,081 samples, 0.90%)</title><rect x="59.3186%" y="181" width="0.9018%" height="15" fill="rgb(221,78,26)" fg:x="593781328" fg:w="9027081"/><text x="59.5686%" y="191.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.10%)</title><rect x="60.2204%" y="149" width="0.1002%" height="15" fill="rgb(250,127,30)" fg:x="602808409" fg:w="1003009"/><text x="60.4704%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,003,009 samples, 0.10%)</title><rect x="60.2204%" y="133" width="0.1002%" height="15" fill="rgb(230,49,44)" fg:x="602808409" fg:w="1003009"/><text x="60.4704%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,003,009 samples, 0.10%)</title><rect x="60.2204%" y="117" width="0.1002%" height="15" fill="rgb(229,67,23)" fg:x="602808409" fg:w="1003009"/><text x="60.4704%" y="127.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,003,009 samples, 0.10%)</title><rect x="60.2204%" y="101" width="0.1002%" height="15" fill="rgb(249,83,47)" fg:x="602808409" fg:w="1003009"/><text x="60.4704%" y="111.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="60.2204%" y="85" width="0.1002%" height="15" fill="rgb(215,43,3)" fg:x="602808409" fg:w="1003009"/><text x="60.4704%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="60.2204%" y="69" width="0.1002%" height="15" fill="rgb(238,154,13)" fg:x="602808409" fg:w="1003009"/><text x="60.4704%" y="79.50"></text></g><g><title>ahash::operations::folded_multiply (12,036,108 samples, 1.20%)</title><rect x="60.5210%" y="101" width="1.2024%" height="15" fill="rgb(219,56,2)" fg:x="605817436" fg:w="12036108"/><text x="60.7710%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (5,015,045 samples, 0.50%)</title><rect x="61.2224%" y="85" width="0.5010%" height="15" fill="rgb(233,0,4)" fg:x="612838499" fg:w="5015045"/><text x="61.4724%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (16,048,144 samples, 1.60%)</title><rect x="60.3206%" y="117" width="1.6032%" height="15" fill="rgb(235,30,7)" fg:x="603811418" fg:w="16048144"/><text x="60.5706%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="61.7234%" y="101" width="0.2004%" height="15" fill="rgb(250,79,13)" fg:x="617853544" fg:w="2006018"/><text x="61.9734%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (53,159,477 samples, 5.31%)</title><rect x="57.8156%" y="229" width="5.3106%" height="15" fill="rgb(211,146,34)" fg:x="578736193" fg:w="53159477"/><text x="58.0656%" y="239.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (53,159,477 samples, 5.31%)</title><rect x="57.8156%" y="213" width="5.3106%" height="15" fill="rgb(228,22,38)" fg:x="578736193" fg:w="53159477"/><text x="58.0656%" y="223.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (29,087,261 samples, 2.91%)</title><rect x="60.2204%" y="197" width="2.9058%" height="15" fill="rgb(235,168,5)" fg:x="602808409" fg:w="29087261"/><text x="60.4704%" y="207.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (29,087,261 samples, 2.91%)</title><rect x="60.2204%" y="181" width="2.9058%" height="15" fill="rgb(221,155,16)" fg:x="602808409" fg:w="29087261"/><text x="60.4704%" y="191.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (29,087,261 samples, 2.91%)</title><rect x="60.2204%" y="165" width="2.9058%" height="15" fill="rgb(215,215,53)" fg:x="602808409" fg:w="29087261"/><text x="60.4704%" y="175.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (28,084,252 samples, 2.81%)</title><rect x="60.3206%" y="149" width="2.8056%" height="15" fill="rgb(223,4,10)" fg:x="603811418" fg:w="28084252"/><text x="60.5706%" y="159.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (28,084,252 samples, 2.81%)</title><rect x="60.3206%" y="133" width="2.8056%" height="15" fill="rgb(234,103,6)" fg:x="603811418" fg:w="28084252"/><text x="60.5706%" y="143.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (12,036,108 samples, 1.20%)</title><rect x="61.9238%" y="117" width="1.2024%" height="15" fill="rgb(227,97,0)" fg:x="619859562" fg:w="12036108"/><text x="62.1738%" y="127.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13,039,117 samples, 1.30%)</title><rect x="64.6293%" y="181" width="1.3026%" height="15" fill="rgb(234,150,53)" fg:x="646940805" fg:w="13039117"/><text x="64.8793%" y="191.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (13,039,117 samples, 1.30%)</title><rect x="64.6293%" y="165" width="1.3026%" height="15" fill="rgb(228,201,54)" fg:x="646940805" fg:w="13039117"/><text x="64.8793%" y="175.50"></text></g><g><title>core::intrinsics::likely (10,030,090 samples, 1.00%)</title><rect x="65.9319%" y="181" width="1.0020%" height="15" fill="rgb(222,22,37)" fg:x="659979922" fg:w="10030090"/><text x="66.1819%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (14,042,126 samples, 1.40%)</title><rect x="66.9339%" y="181" width="1.4028%" height="15" fill="rgb(237,53,32)" fg:x="670010012" fg:w="14042126"/><text x="67.1839%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14,042,126 samples, 1.40%)</title><rect x="66.9339%" y="165" width="1.4028%" height="15" fill="rgb(233,25,53)" fg:x="670010012" fg:w="14042126"/><text x="67.1839%" y="175.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,003,009 samples, 0.10%)</title><rect x="68.3367%" y="181" width="0.1002%" height="15" fill="rgb(210,40,34)" fg:x="684052138" fg:w="1003009"/><text x="68.5867%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (66,198,594 samples, 6.61%)</title><rect x="68.4369%" y="165" width="6.6132%" height="15" fill="rgb(241,220,44)" fg:x="685055147" fg:w="66198594"/><text x="68.6869%" y="175.50">hashbrown..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (66,198,594 samples, 6.61%)</title><rect x="68.4369%" y="149" width="6.6132%" height="15" fill="rgb(235,28,35)" fg:x="685055147" fg:w="66198594"/><text x="68.6869%" y="159.50">&lt;Q as has..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66,198,594 samples, 6.61%)</title><rect x="68.4369%" y="133" width="6.6132%" height="15" fill="rgb(210,56,17)" fg:x="685055147" fg:w="66198594"/><text x="68.6869%" y="143.50">core::cmp..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (66,198,594 samples, 6.61%)</title><rect x="68.4369%" y="117" width="6.6132%" height="15" fill="rgb(224,130,29)" fg:x="685055147" fg:w="66198594"/><text x="68.6869%" y="127.50">core::arr..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (66,198,594 samples, 6.61%)</title><rect x="68.4369%" y="101" width="6.6132%" height="15" fill="rgb(235,212,8)" fg:x="685055147" fg:w="66198594"/><text x="68.6869%" y="111.50">&lt;T as cor..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (11,033,099 samples, 1.10%)</title><rect x="75.0501%" y="165" width="1.1022%" height="15" fill="rgb(223,33,50)" fg:x="751253741" fg:w="11033099"/><text x="75.3001%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (11,033,099 samples, 1.10%)</title><rect x="75.0501%" y="149" width="1.1022%" height="15" fill="rgb(219,149,13)" fg:x="751253741" fg:w="11033099"/><text x="75.3001%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11,033,099 samples, 1.10%)</title><rect x="75.0501%" y="133" width="1.1022%" height="15" fill="rgb(250,156,29)" fg:x="751253741" fg:w="11033099"/><text x="75.3001%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (88,264,792 samples, 8.82%)</title><rect x="68.4369%" y="181" width="8.8176%" height="15" fill="rgb(216,193,19)" fg:x="685055147" fg:w="88264792"/><text x="68.6869%" y="191.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (11,033,099 samples, 1.10%)</title><rect x="76.1523%" y="165" width="1.1022%" height="15" fill="rgb(216,135,14)" fg:x="762286840" fg:w="11033099"/><text x="76.4023%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (11,033,099 samples, 1.10%)</title><rect x="76.1523%" y="149" width="1.1022%" height="15" fill="rgb(241,47,5)" fg:x="762286840" fg:w="11033099"/><text x="76.4023%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11,033,099 samples, 1.10%)</title><rect x="76.1523%" y="133" width="1.1022%" height="15" fill="rgb(233,42,35)" fg:x="762286840" fg:w="11033099"/><text x="76.4023%" y="143.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (520,561,671 samples, 52.00%)</title><rect x="27.0541%" y="357" width="52.0040%" height="15" fill="rgb(231,13,6)" fg:x="270812430" fg:w="520561671"/><text x="27.3041%" y="367.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (231,695,079 samples, 23.15%)</title><rect x="55.9118%" y="341" width="23.1463%" height="15" fill="rgb(207,181,40)" fg:x="559679022" fg:w="231695079"/><text x="56.1618%" y="351.50">core::cmp::impls::&lt;impl core::cmp::Pa..</text></g><g><title>core::cmp::PartialOrd::lt (231,695,079 samples, 23.15%)</title><rect x="55.9118%" y="325" width="23.1463%" height="15" fill="rgb(254,173,49)" fg:x="559679022" fg:w="231695079"/><text x="56.1618%" y="335.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (230,692,070 samples, 23.05%)</title><rect x="56.0120%" y="309" width="23.0461%" height="15" fill="rgb(221,1,38)" fg:x="560682031" fg:w="230692070"/><text x="56.2620%" y="319.50">&lt;aoc_2024_megaproject::problems::day5..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (226,680,034 samples, 22.65%)</title><rect x="56.4128%" y="293" width="22.6453%" height="15" fill="rgb(206,124,46)" fg:x="564694067" fg:w="226680034"/><text x="56.6628%" y="303.50">aoc_2024_megaproject::problems::day5..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (222,667,998 samples, 22.24%)</title><rect x="56.8136%" y="277" width="22.2445%" height="15" fill="rgb(249,21,11)" fg:x="568706103" fg:w="222667998"/><text x="57.0636%" y="287.50">std::collections::hash::map::HashMa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (222,667,998 samples, 22.24%)</title><rect x="56.8136%" y="261" width="22.2445%" height="15" fill="rgb(222,201,40)" fg:x="568706103" fg:w="222667998"/><text x="57.0636%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::g..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (222,667,998 samples, 22.24%)</title><rect x="56.8136%" y="245" width="22.2445%" height="15" fill="rgb(235,61,29)" fg:x="568706103" fg:w="222667998"/><text x="57.0636%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::g..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (159,478,431 samples, 15.93%)</title><rect x="63.1263%" y="229" width="15.9319%" height="15" fill="rgb(219,207,3)" fg:x="631895670" fg:w="159478431"/><text x="63.3763%" y="239.50">hashbrown::raw::RawTable&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (159,478,431 samples, 15.93%)</title><rect x="63.1263%" y="213" width="15.9319%" height="15" fill="rgb(222,56,46)" fg:x="631895670" fg:w="159478431"/><text x="63.3763%" y="223.50">hashbrown::raw::RawTable&lt;..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (159,478,431 samples, 15.93%)</title><rect x="63.1263%" y="197" width="15.9319%" height="15" fill="rgb(239,76,54)" fg:x="631895670" fg:w="159478431"/><text x="63.3763%" y="207.50">hashbrown::raw::RawTableI..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (18,054,162 samples, 1.80%)</title><rect x="77.2545%" y="181" width="1.8036%" height="15" fill="rgb(231,124,27)" fg:x="773319939" fg:w="18054162"/><text x="77.5045%" y="191.50">h..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10,030,090 samples, 1.00%)</title><rect x="81.7635%" y="245" width="1.0020%" height="15" fill="rgb(249,195,6)" fg:x="818455344" fg:w="10030090"/><text x="82.0135%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (10,030,090 samples, 1.00%)</title><rect x="81.7635%" y="229" width="1.0020%" height="15" fill="rgb(237,174,47)" fg:x="818455344" fg:w="10030090"/><text x="82.0135%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10,030,090 samples, 1.00%)</title><rect x="81.7635%" y="213" width="1.0020%" height="15" fill="rgb(206,201,31)" fg:x="818455344" fg:w="10030090"/><text x="82.0135%" y="223.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="82.1643%" y="197" width="0.6012%" height="15" fill="rgb(231,57,52)" fg:x="822467380" fg:w="6018054"/><text x="82.4143%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,009,027 samples, 0.30%)</title><rect x="82.7655%" y="245" width="0.3006%" height="15" fill="rgb(248,177,22)" fg:x="828485434" fg:w="3009027"/><text x="83.0155%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,009,027 samples, 0.30%)</title><rect x="82.7655%" y="229" width="0.3006%" height="15" fill="rgb(215,211,37)" fg:x="828485434" fg:w="3009027"/><text x="83.0155%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,009,027 samples, 0.30%)</title><rect x="82.7655%" y="213" width="0.3006%" height="15" fill="rgb(241,128,51)" fg:x="828485434" fg:w="3009027"/><text x="83.0155%" y="223.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="84.4689%" y="197" width="0.1002%" height="15" fill="rgb(227,165,31)" fg:x="845536587" fg:w="1003009"/><text x="84.7189%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (1,003,009 samples, 0.10%)</title><rect x="84.5691%" y="197" width="0.1002%" height="15" fill="rgb(228,167,24)" fg:x="846539596" fg:w="1003009"/><text x="84.8191%" y="207.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="84.6693%" y="197" width="0.1002%" height="15" fill="rgb(228,143,12)" fg:x="847542605" fg:w="1003009"/><text x="84.9193%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (69,207,621 samples, 6.91%)</title><rect x="79.0581%" y="357" width="6.9138%" height="15" fill="rgb(249,149,8)" fg:x="791374101" fg:w="69207621"/><text x="79.3081%" y="367.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (69,207,621 samples, 6.91%)</title><rect x="79.0581%" y="341" width="6.9138%" height="15" fill="rgb(243,35,44)" fg:x="791374101" fg:w="69207621"/><text x="79.3081%" y="351.50">core::ite..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (69,207,621 samples, 6.91%)</title><rect x="79.0581%" y="325" width="6.9138%" height="15" fill="rgb(246,89,9)" fg:x="791374101" fg:w="69207621"/><text x="79.3081%" y="335.50">&lt;core::st..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69,207,621 samples, 6.91%)</title><rect x="79.0581%" y="309" width="6.9138%" height="15" fill="rgb(233,213,13)" fg:x="791374101" fg:w="69207621"/><text x="79.3081%" y="319.50">&lt;core::it..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (69,207,621 samples, 6.91%)</title><rect x="79.0581%" y="293" width="6.9138%" height="15" fill="rgb(233,141,41)" fg:x="791374101" fg:w="69207621"/><text x="79.3081%" y="303.50">&lt;core::st..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (69,207,621 samples, 6.91%)</title><rect x="79.0581%" y="277" width="6.9138%" height="15" fill="rgb(239,167,4)" fg:x="791374101" fg:w="69207621"/><text x="79.3081%" y="287.50">core::str..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (55,165,495 samples, 5.51%)</title><rect x="80.4609%" y="261" width="5.5110%" height="15" fill="rgb(209,217,16)" fg:x="805416227" fg:w="55165495"/><text x="80.7109%" y="271.50">&lt;core::..</text></g><g><title>core::slice::memchr::memchr (29,087,261 samples, 2.91%)</title><rect x="83.0661%" y="245" width="2.9058%" height="15" fill="rgb(219,88,35)" fg:x="831494461" fg:w="29087261"/><text x="83.3161%" y="255.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned (27,081,243 samples, 2.71%)</title><rect x="83.2665%" y="229" width="2.7054%" height="15" fill="rgb(220,193,23)" fg:x="833500479" fg:w="27081243"/><text x="83.5165%" y="239.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (22,066,198 samples, 2.20%)</title><rect x="83.7675%" y="213" width="2.2044%" height="15" fill="rgb(230,90,52)" fg:x="838515524" fg:w="22066198"/><text x="84.0175%" y="223.50">c..</text></g><g><title>core::slice::memchr::memchr_naive (12,036,108 samples, 1.20%)</title><rect x="84.7695%" y="197" width="1.2024%" height="15" fill="rgb(252,106,19)" fg:x="848545614" fg:w="12036108"/><text x="85.0195%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (4,012,036 samples, 0.40%)</title><rect x="85.9719%" y="357" width="0.4008%" height="15" fill="rgb(206,74,20)" fg:x="860581722" fg:w="4012036"/><text x="86.2219%" y="367.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (4,012,036 samples, 0.40%)</title><rect x="85.9719%" y="341" width="0.4008%" height="15" fill="rgb(230,138,44)" fg:x="860581722" fg:w="4012036"/><text x="86.2219%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (7,021,063 samples, 0.70%)</title><rect x="90.6814%" y="293" width="0.7014%" height="15" fill="rgb(235,182,43)" fg:x="907723145" fg:w="7021063"/><text x="90.9314%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7,021,063 samples, 0.70%)</title><rect x="90.6814%" y="277" width="0.7014%" height="15" fill="rgb(242,16,51)" fg:x="907723145" fg:w="7021063"/><text x="90.9314%" y="287.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="90.7816%" y="261" width="0.6012%" height="15" fill="rgb(248,9,4)" fg:x="908726154" fg:w="6018054"/><text x="91.0316%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.10%)</title><rect x="91.3828%" y="293" width="0.1002%" height="15" fill="rgb(210,31,22)" fg:x="914744208" fg:w="1003009"/><text x="91.6328%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="91.3828%" y="277" width="0.1002%" height="15" fill="rgb(239,54,39)" fg:x="914744208" fg:w="1003009"/><text x="91.6328%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="91.3828%" y="261" width="0.1002%" height="15" fill="rgb(230,99,41)" fg:x="914744208" fg:w="1003009"/><text x="91.6328%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (54,162,486 samples, 5.41%)</title><rect x="86.3727%" y="357" width="5.4108%" height="15" fill="rgb(253,106,12)" fg:x="864593758" fg:w="54162486"/><text x="86.6227%" y="367.50">core::s..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (23,069,207 samples, 2.30%)</title><rect x="89.4790%" y="341" width="2.3046%" height="15" fill="rgb(213,46,41)" fg:x="895687037" fg:w="23069207"/><text x="89.7290%" y="351.50">&lt;..</text></g><g><title>core::str::pattern::StrSearcher::new (23,069,207 samples, 2.30%)</title><rect x="89.4790%" y="325" width="2.3046%" height="15" fill="rgb(215,133,35)" fg:x="895687037" fg:w="23069207"/><text x="89.7290%" y="335.50">c..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (15,045,135 samples, 1.50%)</title><rect x="90.2806%" y="309" width="1.5030%" height="15" fill="rgb(213,28,5)" fg:x="903711109" fg:w="15045135"/><text x="90.5306%" y="319.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (3,009,027 samples, 0.30%)</title><rect x="91.4830%" y="293" width="0.3006%" height="15" fill="rgb(215,77,49)" fg:x="915747217" fg:w="3009027"/><text x="91.7330%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.30%)</title><rect x="91.4830%" y="277" width="0.3006%" height="15" fill="rgb(248,100,22)" fg:x="915747217" fg:w="3009027"/><text x="91.7330%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,006,018 samples, 0.20%)</title><rect x="91.9840%" y="293" width="0.2004%" height="15" fill="rgb(208,67,9)" fg:x="920762262" fg:w="2006018"/><text x="92.2340%" y="303.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7,021,063 samples, 0.70%)</title><rect x="92.3848%" y="277" width="0.7014%" height="15" fill="rgb(219,133,21)" fg:x="924774298" fg:w="7021063"/><text x="92.6348%" y="287.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (7,021,063 samples, 0.70%)</title><rect x="92.3848%" y="261" width="0.7014%" height="15" fill="rgb(246,46,29)" fg:x="924774298" fg:w="7021063"/><text x="92.6348%" y="271.50"></text></g><g><title>core::intrinsics::likely (1,003,009 samples, 0.10%)</title><rect x="93.0862%" y="277" width="0.1002%" height="15" fill="rgb(246,185,52)" fg:x="931795361" fg:w="1003009"/><text x="93.3362%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (6,018,054 samples, 0.60%)</title><rect x="93.1864%" y="277" width="0.6012%" height="15" fill="rgb(252,136,11)" fg:x="932798370" fg:w="6018054"/><text x="93.4364%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,018,054 samples, 0.60%)</title><rect x="93.1864%" y="261" width="0.6012%" height="15" fill="rgb(219,138,53)" fg:x="932798370" fg:w="6018054"/><text x="93.4364%" y="271.50"></text></g><g><title>hashbrown::control::tag::Tag::full (11,033,099 samples, 1.10%)</title><rect x="93.7876%" y="277" width="1.1022%" height="15" fill="rgb(211,51,23)" fg:x="938816424" fg:w="11033099"/><text x="94.0376%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="277" width="0.1002%" height="15" fill="rgb(247,221,28)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="261" width="0.1002%" height="15" fill="rgb(251,222,45)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="245" width="0.1002%" height="15" fill="rgb(217,162,53)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="229" width="0.1002%" height="15" fill="rgb(229,93,14)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="239.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="213" width="0.1002%" height="15" fill="rgb(209,67,49)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="223.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="197" width="0.1002%" height="15" fill="rgb(213,87,29)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="207.50"></text></g><g><title>core::intrinsics::unlikely (3,009,027 samples, 0.30%)</title><rect x="94.9900%" y="261" width="0.3006%" height="15" fill="rgb(205,151,52)" fg:x="950852532" fg:w="3009027"/><text x="95.2400%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (38,114,342 samples, 3.81%)</title><rect x="91.9840%" y="325" width="3.8076%" height="15" fill="rgb(253,215,39)" fg:x="920762262" fg:w="38114342"/><text x="92.2340%" y="335.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (38,114,342 samples, 3.81%)</title><rect x="91.9840%" y="309" width="3.8076%" height="15" fill="rgb(221,220,41)" fg:x="920762262" fg:w="38114342"/><text x="92.2340%" y="319.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (36,108,324 samples, 3.61%)</title><rect x="92.1844%" y="293" width="3.6072%" height="15" fill="rgb(218,133,21)" fg:x="922768280" fg:w="36108324"/><text x="92.4344%" y="303.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (8,024,072 samples, 0.80%)</title><rect x="94.9900%" y="277" width="0.8016%" height="15" fill="rgb(221,193,43)" fg:x="950852532" fg:w="8024072"/><text x="95.2400%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (5,015,045 samples, 0.50%)</title><rect x="95.2906%" y="261" width="0.5010%" height="15" fill="rgb(240,128,52)" fg:x="953861559" fg:w="5015045"/><text x="95.5406%" y="271.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (5,015,045 samples, 0.50%)</title><rect x="95.2906%" y="245" width="0.5010%" height="15" fill="rgb(253,114,12)" fg:x="953861559" fg:w="5015045"/><text x="95.5406%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="95.7916%" y="277" width="0.2004%" height="15" fill="rgb(215,223,47)" fg:x="958876604" fg:w="2006018"/><text x="96.0416%" y="287.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="95.8918%" y="261" width="0.1002%" height="15" fill="rgb(248,225,23)" fg:x="959879613" fg:w="1003009"/><text x="96.1418%" y="271.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.70%)</title><rect x="95.7916%" y="293" width="0.7014%" height="15" fill="rgb(250,108,0)" fg:x="958876604" fg:w="7021063"/><text x="96.0416%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.50%)</title><rect x="95.9920%" y="277" width="0.5010%" height="15" fill="rgb(228,208,7)" fg:x="960882622" fg:w="5015045"/><text x="96.2420%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="97.6954%" y="197" width="0.5010%" height="15" fill="rgb(244,45,10)" fg:x="977933775" fg:w="5015045"/><text x="97.9454%" y="207.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3,009,027 samples, 0.30%)</title><rect x="97.8958%" y="181" width="0.3006%" height="15" fill="rgb(207,125,25)" fg:x="979939793" fg:w="3009027"/><text x="98.1458%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (25,075,225 samples, 2.51%)</title><rect x="95.7916%" y="325" width="2.5050%" height="15" fill="rgb(210,195,18)" fg:x="958876604" fg:w="25075225"/><text x="96.0416%" y="335.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (25,075,225 samples, 2.51%)</title><rect x="95.7916%" y="309" width="2.5050%" height="15" fill="rgb(249,80,12)" fg:x="958876604" fg:w="25075225"/><text x="96.0416%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18,054,162 samples, 1.80%)</title><rect x="96.4930%" y="293" width="1.8036%" height="15" fill="rgb(221,65,9)" fg:x="965897667" fg:w="18054162"/><text x="96.7430%" y="303.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (18,054,162 samples, 1.80%)</title><rect x="96.4930%" y="277" width="1.8036%" height="15" fill="rgb(235,49,36)" fg:x="965897667" fg:w="18054162"/><text x="96.7430%" y="287.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (18,054,162 samples, 1.80%)</title><rect x="96.4930%" y="261" width="1.8036%" height="15" fill="rgb(225,32,20)" fg:x="965897667" fg:w="18054162"/><text x="96.7430%" y="271.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (10,030,090 samples, 1.00%)</title><rect x="97.2946%" y="245" width="1.0020%" height="15" fill="rgb(215,141,46)" fg:x="973921739" fg:w="10030090"/><text x="97.5446%" y="255.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (10,030,090 samples, 1.00%)</title><rect x="97.2946%" y="229" width="1.0020%" height="15" fill="rgb(250,160,47)" fg:x="973921739" fg:w="10030090"/><text x="97.5446%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (10,030,090 samples, 1.00%)</title><rect x="97.2946%" y="213" width="1.0020%" height="15" fill="rgb(216,222,40)" fg:x="973921739" fg:w="10030090"/><text x="97.5446%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="98.1964%" y="197" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="982948820" fg:w="1003009"/><text x="98.4464%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (11,033,099 samples, 1.10%)</title><rect x="98.2966%" y="309" width="1.1022%" height="15" fill="rgb(207,178,40)" fg:x="983951829" fg:w="11033099"/><text x="98.5466%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (11,033,099 samples, 1.10%)</title><rect x="98.2966%" y="293" width="1.1022%" height="15" fill="rgb(221,136,13)" fg:x="983951829" fg:w="11033099"/><text x="98.5466%" y="303.50"></text></g><g><title>core::ptr::write (11,033,099 samples, 1.10%)</title><rect x="98.2966%" y="277" width="1.1022%" height="15" fill="rgb(249,199,10)" fg:x="983951829" fg:w="11033099"/><text x="98.5466%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (80,240,720 samples, 8.02%)</title><rect x="91.7836%" y="357" width="8.0160%" height="15" fill="rgb(249,222,13)" fg:x="918756244" fg:w="80240720"/><text x="92.0336%" y="367.50">std::collec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (80,240,720 samples, 8.02%)</title><rect x="91.7836%" y="341" width="8.0160%" height="15" fill="rgb(244,185,38)" fg:x="918756244" fg:w="80240720"/><text x="92.0336%" y="351.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (15,045,135 samples, 1.50%)</title><rect x="98.2966%" y="325" width="1.5030%" height="15" fill="rgb(236,202,9)" fg:x="983951829" fg:w="15045135"/><text x="98.5466%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (4,012,036 samples, 0.40%)</title><rect x="99.3988%" y="309" width="0.4008%" height="15" fill="rgb(250,229,37)" fg:x="994984928" fg:w="4012036"/><text x="99.6488%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (3,009,027 samples, 0.30%)</title><rect x="99.4990%" y="293" width="0.3006%" height="15" fill="rgb(206,174,23)" fg:x="995987937" fg:w="3009027"/><text x="99.7490%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3,009,027 samples, 0.30%)</title><rect x="99.4990%" y="277" width="0.3006%" height="15" fill="rgb(211,33,43)" fg:x="995987937" fg:w="3009027"/><text x="99.7490%" y="287.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(245,58,50)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="229" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="239.50"></text></g><g><title>core::intrinsics::write_bytes (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="213" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="223.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="197" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="207.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="693" width="99.8998%" height="15" fill="rgb(234,177,6)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="703.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="677" width="99.8998%" height="15" fill="rgb(217,24,9)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="687.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="661" width="99.8998%" height="15" fill="rgb(220,13,46)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="671.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="645" width="99.8998%" height="15" fill="rgb(239,221,27)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="629" width="99.8998%" height="15" fill="rgb(222,198,25)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="613" width="99.8998%" height="15" fill="rgb(211,99,13)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="597" width="99.8998%" height="15" fill="rgb(232,111,31)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="581" width="99.8998%" height="15" fill="rgb(245,82,37)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="565" width="99.8998%" height="15" fill="rgb(227,149,46)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="575.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="549" width="99.8998%" height="15" fill="rgb(218,36,50)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="533" width="99.8998%" height="15" fill="rgb(226,80,48)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="517" width="99.8998%" height="15" fill="rgb(238,224,15)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="501" width="99.8998%" height="15" fill="rgb(241,136,10)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="485" width="99.8998%" height="15" fill="rgb(208,32,45)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="495.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="469" width="99.8998%" height="15" fill="rgb(207,135,9)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="453" width="99.8998%" height="15" fill="rgb(206,86,44)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="437" width="99.8998%" height="15" fill="rgb(245,177,15)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="447.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="421" width="99.8998%" height="15" fill="rgb(206,64,50)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="431.50">aoc_2024_megaproject::repeat_part</text></g><g><title>aoc_2024_megaproject::Day::run_part (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="405" width="99.8998%" height="15" fill="rgb(234,36,40)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="415.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1 (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="389" width="99.8998%" height="15" fill="rgb(213,64,8)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="399.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day5::part1 (999,999,973 samples, 99.90%)</title><rect x="0.1002%" y="373" width="99.8998%" height="15" fill="rgb(210,75,36)" fg:x="1003009" fg:w="999999973"/><text x="0.3502%" y="383.50">aoc_2024_megaproject::problems::day5::part1</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="357" width="0.2004%" height="15" fill="rgb(229,88,21)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="341" width="0.2004%" height="15" fill="rgb(252,204,47)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="325" width="0.2004%" height="15" fill="rgb(208,77,27)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="309" width="0.2004%" height="15" fill="rgb(221,76,26)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="293" width="0.2004%" height="15" fill="rgb(225,139,18)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="277" width="0.2004%" height="15" fill="rgb(230,137,11)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="261" width="0.1002%" height="15" fill="rgb(212,28,1)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="245" width="0.1002%" height="15" fill="rgb(248,164,17)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="229" width="0.1002%" height="15" fill="rgb(222,171,42)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(243,84,45)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="197" width="0.1002%" height="15" fill="rgb(252,49,23)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="207.50"></text></g><g><title>__rustc::__rust_alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="181" width="0.1002%" height="15" fill="rgb(215,19,7)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="191.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="165" width="0.1002%" height="15" fill="rgb(238,81,41)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="149" width="0.1002%" height="15" fill="rgb(210,199,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="159.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="133" width="0.1002%" height="15" fill="rgb(244,192,49)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="143.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="117" width="0.1002%" height="15" fill="rgb(226,211,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="127.50"></text></g></svg></svg>