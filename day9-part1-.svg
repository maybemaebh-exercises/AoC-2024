<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (87,261,783 samples, 8.72%)</title><rect x="1.2024%" y="565" width="8.7174%" height="15" fill="rgb(227,0,7)" fg:x="12036108" fg:w="87261783"/><text x="1.4524%" y="575.50">&lt;core::str::..</text></g><g><title>core::str::validations::next_code_point (87,261,783 samples, 8.72%)</title><rect x="1.2024%" y="549" width="8.7174%" height="15" fill="rgb(217,0,24)" fg:x="12036108" fg:w="87261783"/><text x="1.4524%" y="559.50">core::str::v..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (114,343,026 samples, 11.42%)</title><rect x="0.2004%" y="629" width="11.4228%" height="15" fill="rgb(221,193,54)" fg:x="2006018" fg:w="114343026"/><text x="0.4504%" y="639.50">&lt;core::iter::adap..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (114,343,026 samples, 11.42%)</title><rect x="0.2004%" y="613" width="11.4228%" height="15" fill="rgb(248,212,6)" fg:x="2006018" fg:w="114343026"/><text x="0.4504%" y="623.50">&lt;core::iter::adap..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (114,343,026 samples, 11.42%)</title><rect x="0.2004%" y="597" width="11.4228%" height="15" fill="rgb(208,68,35)" fg:x="2006018" fg:w="114343026"/><text x="0.4504%" y="607.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (114,343,026 samples, 11.42%)</title><rect x="0.2004%" y="581" width="11.4228%" height="15" fill="rgb(232,128,0)" fg:x="2006018" fg:w="114343026"/><text x="0.4504%" y="591.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (17,051,153 samples, 1.70%)</title><rect x="9.9198%" y="565" width="1.7034%" height="15" fill="rgb(207,160,47)" fg:x="99297891" fg:w="17051153"/><text x="10.1698%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17,051,153 samples, 1.70%)</title><rect x="9.9198%" y="549" width="1.7034%" height="15" fill="rgb(228,23,34)" fg:x="99297891" fg:w="17051153"/><text x="10.1698%" y="559.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part1PackedData::new::_{{closure}} (17,051,153 samples, 1.70%)</title><rect x="9.9198%" y="533" width="1.7034%" height="15" fill="rgb(218,30,26)" fg:x="99297891" fg:w="17051153"/><text x="10.1698%" y="543.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (17,051,153 samples, 1.70%)</title><rect x="9.9198%" y="517" width="1.7034%" height="15" fill="rgb(220,122,19)" fg:x="99297891" fg:w="17051153"/><text x="10.1698%" y="527.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (14,042,126 samples, 1.40%)</title><rect x="10.2204%" y="501" width="1.4028%" height="15" fill="rgb(250,228,42)" fg:x="102306918" fg:w="14042126"/><text x="10.4704%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (76,228,684 samples, 7.62%)</title><rect x="12.2244%" y="613" width="7.6152%" height="15" fill="rgb(240,193,28)" fg:x="122367098" fg:w="76228684"/><text x="12.4744%" y="623.50">alloc::col..</text></g><g><title>core::ptr::write (76,228,684 samples, 7.62%)</title><rect x="12.2244%" y="597" width="7.6152%" height="15" fill="rgb(216,20,37)" fg:x="122367098" fg:w="76228684"/><text x="12.4744%" y="607.50">core::ptr:..</text></g><g><title>aoc_2024_megaproject::problems::day9::Part1PackedData::new (208,625,872 samples, 20.84%)</title><rect x="0.0000%" y="677" width="20.8417%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="208625872"/><text x="0.2500%" y="687.50">aoc_2024_megaproject::problems::d..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (208,625,872 samples, 20.84%)</title><rect x="0.0000%" y="661" width="20.8417%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="208625872"/><text x="0.2500%" y="671.50">&lt;alloc::collections::vec_deque::V..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (208,625,872 samples, 20.84%)</title><rect x="0.0000%" y="645" width="20.8417%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="208625872"/><text x="0.2500%" y="655.50">&lt;alloc::collections::vec_deque::V..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_unchecked (92,276,828 samples, 9.22%)</title><rect x="11.6232%" y="629" width="9.2184%" height="15" fill="rgb(225,20,46)" fg:x="116349044" fg:w="92276828"/><text x="11.8732%" y="639.50">alloc::collec..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (10,030,090 samples, 1.00%)</title><rect x="19.8397%" y="613" width="1.0020%" height="15" fill="rgb(210,31,41)" fg:x="198595782" fg:w="10030090"/><text x="20.0897%" y="623.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (10,030,090 samples, 1.00%)</title><rect x="19.8397%" y="597" width="1.0020%" height="15" fill="rgb(221,200,47)" fg:x="198595782" fg:w="10030090"/><text x="20.0897%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (10,030,090 samples, 1.00%)</title><rect x="19.8397%" y="581" width="1.0020%" height="15" fill="rgb(226,26,5)" fg:x="198595782" fg:w="10030090"/><text x="20.0897%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (21,063,189 samples, 2.10%)</title><rect x="40.5812%" y="485" width="2.1042%" height="15" fill="rgb(249,33,26)" fg:x="406218645" fg:w="21063189"/><text x="40.8312%" y="495.50">&lt;..</text></g><g><title>aoc_2024_megaproject::problems::commons::EnumeratedVecDeque&lt;T&gt;::back (51,153,459 samples, 5.11%)</title><rect x="40.5812%" y="501" width="5.1102%" height="15" fill="rgb(235,183,28)" fg:x="406218645" fg:w="51153459"/><text x="40.8312%" y="511.50">aoc_20..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back (30,090,270 samples, 3.01%)</title><rect x="42.6854%" y="485" width="3.0060%" height="15" fill="rgb(221,5,38)" fg:x="427281834" fg:w="30090270"/><text x="42.9354%" y="495.50">all..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (30,090,270 samples, 3.01%)</title><rect x="42.6854%" y="469" width="3.0060%" height="15" fill="rgb(247,18,42)" fg:x="427281834" fg:w="30090270"/><text x="42.9354%" y="479.50">all..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (25,075,225 samples, 2.51%)</title><rect x="43.1864%" y="453" width="2.5050%" height="15" fill="rgb(241,131,45)" fg:x="432296879" fg:w="25075225"/><text x="43.4364%" y="463.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (10,030,090 samples, 1.00%)</title><rect x="44.6894%" y="437" width="1.0020%" height="15" fill="rgb(249,31,29)" fg:x="447342014" fg:w="10030090"/><text x="44.9394%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (10,030,090 samples, 1.00%)</title><rect x="44.6894%" y="421" width="1.0020%" height="15" fill="rgb(225,111,53)" fg:x="447342014" fg:w="10030090"/><text x="44.9394%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3,009,027 samples, 0.30%)</title><rect x="45.6914%" y="421" width="0.3006%" height="15" fill="rgb(238,160,17)" fg:x="457372104" fg:w="3009027"/><text x="45.9414%" y="431.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::EnumeratedVecDeque&lt;T&gt;::back_mut (14,042,126 samples, 1.40%)</title><rect x="45.6914%" y="501" width="1.4028%" height="15" fill="rgb(214,148,48)" fg:x="457372104" fg:w="14042126"/><text x="45.9414%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back_mut (14,042,126 samples, 1.40%)</title><rect x="45.6914%" y="485" width="1.4028%" height="15" fill="rgb(232,36,49)" fg:x="457372104" fg:w="14042126"/><text x="45.9414%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (14,042,126 samples, 1.40%)</title><rect x="45.6914%" y="469" width="1.4028%" height="15" fill="rgb(209,103,24)" fg:x="457372104" fg:w="14042126"/><text x="45.9414%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (14,042,126 samples, 1.40%)</title><rect x="45.6914%" y="453" width="1.4028%" height="15" fill="rgb(229,88,8)" fg:x="457372104" fg:w="14042126"/><text x="45.9414%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (14,042,126 samples, 1.40%)</title><rect x="45.6914%" y="437" width="1.4028%" height="15" fill="rgb(213,181,19)" fg:x="457372104" fg:w="14042126"/><text x="45.9414%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (11,033,099 samples, 1.10%)</title><rect x="45.9920%" y="421" width="1.1022%" height="15" fill="rgb(254,191,54)" fg:x="460381131" fg:w="11033099"/><text x="46.2420%" y="431.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::EnumeratedVecDeque&lt;T&gt;::front (88,264,792 samples, 8.82%)</title><rect x="47.0942%" y="501" width="8.8176%" height="15" fill="rgb(241,83,37)" fg:x="471414230" fg:w="88264792"/><text x="47.3442%" y="511.50">aoc_2024_meg..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::front (88,264,792 samples, 8.82%)</title><rect x="47.0942%" y="485" width="8.8176%" height="15" fill="rgb(233,36,39)" fg:x="471414230" fg:w="88264792"/><text x="47.3442%" y="495.50">alloc::colle..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (88,264,792 samples, 8.82%)</title><rect x="47.0942%" y="469" width="8.8176%" height="15" fill="rgb(226,3,54)" fg:x="471414230" fg:w="88264792"/><text x="47.3442%" y="479.50">alloc::colle..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (14,042,126 samples, 1.40%)</title><rect x="54.5090%" y="453" width="1.4028%" height="15" fill="rgb(245,192,40)" fg:x="545636896" fg:w="14042126"/><text x="54.7590%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (14,042,126 samples, 1.40%)</title><rect x="54.5090%" y="437" width="1.4028%" height="15" fill="rgb(238,167,29)" fg:x="545636896" fg:w="14042126"/><text x="54.7590%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (14,042,126 samples, 1.40%)</title><rect x="54.5090%" y="421" width="1.4028%" height="15" fill="rgb(232,182,51)" fg:x="545636896" fg:w="14042126"/><text x="54.7590%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (17,051,153 samples, 1.70%)</title><rect x="59.6192%" y="469" width="1.7034%" height="15" fill="rgb(231,60,39)" fg:x="596790355" fg:w="17051153"/><text x="59.8692%" y="479.50"></text></g><g><title>core::ptr::read (17,051,153 samples, 1.70%)</title><rect x="59.6192%" y="453" width="1.7034%" height="15" fill="rgb(208,69,12)" fg:x="596790355" fg:w="17051153"/><text x="59.8692%" y="463.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::EnumeratedVecDeque&lt;T&gt;::pop_back (57,171,513 samples, 5.71%)</title><rect x="55.9118%" y="501" width="5.7114%" height="15" fill="rgb(235,93,37)" fg:x="559679022" fg:w="57171513"/><text x="56.1618%" y="511.50">aoc_202..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_back (57,171,513 samples, 5.71%)</title><rect x="55.9118%" y="485" width="5.7114%" height="15" fill="rgb(213,116,39)" fg:x="559679022" fg:w="57171513"/><text x="56.1618%" y="495.50">alloc::..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (3,009,027 samples, 0.30%)</title><rect x="61.3226%" y="469" width="0.3006%" height="15" fill="rgb(222,207,29)" fg:x="613841508" fg:w="3009027"/><text x="61.5726%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (3,009,027 samples, 0.30%)</title><rect x="61.3226%" y="453" width="0.3006%" height="15" fill="rgb(206,96,30)" fg:x="613841508" fg:w="3009027"/><text x="61.5726%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (3,009,027 samples, 0.30%)</title><rect x="61.3226%" y="437" width="0.3006%" height="15" fill="rgb(218,138,4)" fg:x="613841508" fg:w="3009027"/><text x="61.5726%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1,003,009 samples, 0.10%)</title><rect x="64.9299%" y="469" width="0.1002%" height="15" fill="rgb(250,191,14)" fg:x="649949832" fg:w="1003009"/><text x="65.1799%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (1,003,009 samples, 0.10%)</title><rect x="64.9299%" y="453" width="0.1002%" height="15" fill="rgb(239,60,40)" fg:x="649949832" fg:w="1003009"/><text x="65.1799%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,003,009 samples, 0.10%)</title><rect x="64.9299%" y="437" width="0.1002%" height="15" fill="rgb(206,27,48)" fg:x="649949832" fg:w="1003009"/><text x="65.1799%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,003,009 samples, 0.10%)</title><rect x="64.9299%" y="421" width="0.1002%" height="15" fill="rgb(225,35,8)" fg:x="649949832" fg:w="1003009"/><text x="65.1799%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,003,009 samples, 0.10%)</title><rect x="64.9299%" y="405" width="0.1002%" height="15" fill="rgb(250,213,24)" fg:x="649949832" fg:w="1003009"/><text x="65.1799%" y="415.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::EnumeratedVecDeque&lt;T&gt;::pop_front (56,168,504 samples, 5.61%)</title><rect x="61.6232%" y="501" width="5.6112%" height="15" fill="rgb(247,123,22)" fg:x="616850535" fg:w="56168504"/><text x="61.8732%" y="511.50">aoc_202..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (30,090,270 samples, 3.01%)</title><rect x="64.2285%" y="485" width="3.0060%" height="15" fill="rgb(231,138,38)" fg:x="642928769" fg:w="30090270"/><text x="64.4785%" y="495.50">all..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (22,066,198 samples, 2.20%)</title><rect x="65.0301%" y="469" width="2.2044%" height="15" fill="rgb(231,145,46)" fg:x="650952841" fg:w="22066198"/><text x="65.2801%" y="479.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (22,066,198 samples, 2.20%)</title><rect x="65.0301%" y="453" width="2.2044%" height="15" fill="rgb(251,118,11)" fg:x="650952841" fg:w="22066198"/><text x="65.2801%" y="463.50">a..</text></g><g><title>alloc::collections::vec_deque::wrap_index (22,066,198 samples, 2.20%)</title><rect x="65.0301%" y="437" width="2.2044%" height="15" fill="rgb(217,147,25)" fg:x="650952841" fg:w="22066198"/><text x="65.2801%" y="447.50">a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (8,024,072 samples, 0.80%)</title><rect x="67.2345%" y="501" width="0.8016%" height="15" fill="rgb(247,81,37)" fg:x="673019039" fg:w="8024072"/><text x="67.4845%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (8,024,072 samples, 0.80%)</title><rect x="67.2345%" y="485" width="0.8016%" height="15" fill="rgb(209,12,38)" fg:x="673019039" fg:w="8024072"/><text x="67.4845%" y="495.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Part1PackedData as core::iter::traits::iterator::Iterator&gt;::next (436,308,915 samples, 43.59%)</title><rect x="26.5531%" y="517" width="43.5872%" height="15" fill="rgb(227,1,9)" fg:x="265797385" fg:w="436308915"/><text x="26.8031%" y="527.50">&lt;aoc_2024_megaproject::problems::day9::Part1PackedData as core::iter::t..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (21,063,189 samples, 2.10%)</title><rect x="68.0361%" y="501" width="2.1042%" height="15" fill="rgb(248,47,43)" fg:x="681043111" fg:w="21063189"/><text x="68.2861%" y="511.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="70.1403%" y="437" width="0.2004%" height="15" fill="rgb(221,10,30)" fg:x="702106300" fg:w="2006018"/><text x="70.3903%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,006,018 samples, 0.20%)</title><rect x="70.1403%" y="421" width="0.2004%" height="15" fill="rgb(210,229,1)" fg:x="702106300" fg:w="2006018"/><text x="70.3903%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="70.1403%" y="405" width="0.2004%" height="15" fill="rgb(222,148,37)" fg:x="702106300" fg:w="2006018"/><text x="70.3903%" y="415.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (995,987,937 samples, 99.50%)</title><rect x="0.0000%" y="709" width="99.4990%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="719.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Day9 as aoc_2024_megaproject::Day&gt;::part1 (995,987,937 samples, 99.50%)</title><rect x="0.0000%" y="693" width="99.4990%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="703.50">&lt;aoc_2024_megaproject::problems::day9::Day9 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>core::iter::traits::iterator::Iterator::sum (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="677" width="78.6573%" height="15" fill="rgb(247,138,52)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="687.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="661" width="78.6573%" height="15" fill="rgb(213,79,30)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="671.50">&lt;usize as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="645" width="78.6573%" height="15" fill="rgb(246,177,23)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="655.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="629" width="78.6573%" height="15" fill="rgb(230,62,27)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="639.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="613" width="78.6573%" height="15" fill="rgb(216,154,8)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="623.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="597" width="78.6573%" height="15" fill="rgb(244,35,45)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="607.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="581" width="78.6573%" height="15" fill="rgb(251,115,12)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="591.50">core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="565" width="78.6573%" height="15" fill="rgb(240,54,50)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="575.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="549" width="78.6573%" height="15" fill="rgb(233,84,52)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (787,362,065 samples, 78.66%)</title><rect x="20.8417%" y="533" width="78.6573%" height="15" fill="rgb(207,117,47)" fg:x="208625872" fg:w="787362065"/><text x="21.0917%" y="543.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (293,881,637 samples, 29.36%)</title><rect x="70.1403%" y="517" width="29.3587%" height="15" fill="rgb(249,43,39)" fg:x="702106300" fg:w="293881637"/><text x="70.3903%" y="527.50">core::iter::adapters::map::map_fold::_{{closure..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}} (293,881,637 samples, 29.36%)</title><rect x="70.1403%" y="501" width="29.3587%" height="15" fill="rgb(209,38,44)" fg:x="702106300" fg:w="293881637"/><text x="70.3903%" y="511.50">core::iter::adapters::flatten::FlattenCompat&lt;I,..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (293,881,637 samples, 29.36%)</title><rect x="70.1403%" y="485" width="29.3587%" height="15" fill="rgb(236,212,23)" fg:x="702106300" fg:w="293881637"/><text x="70.3903%" y="495.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (293,881,637 samples, 29.36%)</title><rect x="70.1403%" y="469" width="29.3587%" height="15" fill="rgb(242,79,21)" fg:x="702106300" fg:w="293881637"/><text x="70.3903%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (293,881,637 samples, 29.36%)</title><rect x="70.1403%" y="453" width="29.3587%" height="15" fill="rgb(211,96,35)" fg:x="702106300" fg:w="293881637"/><text x="70.3903%" y="463.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (291,875,619 samples, 29.16%)</title><rect x="70.3407%" y="437" width="29.1583%" height="15" fill="rgb(253,215,40)" fg:x="704112318" fg:w="291875619"/><text x="70.5907%" y="447.50">core::iter::range::&lt;impl core::iter::traits::it..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (291,875,619 samples, 29.16%)</title><rect x="70.3407%" y="421" width="29.1583%" height="15" fill="rgb(211,81,21)" fg:x="704112318" fg:w="291875619"/><text x="70.5907%" y="431.50">&lt;core::ops::range::Range&lt;T&gt; as core::iter::rang..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (45,135,405 samples, 4.51%)</title><rect x="94.9900%" y="405" width="4.5090%" height="15" fill="rgb(208,190,38)" fg:x="950852532" fg:w="45135405"/><text x="95.2400%" y="415.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::any (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="709" width="0.1002%" height="15" fill="rgb(235,213,38)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="693" width="0.1002%" height="15" fill="rgb(237,122,38)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="703.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="677" width="0.1002%" height="15" fill="rgb(244,218,35)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="661" width="0.1002%" height="15" fill="rgb(240,68,47)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="671.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="709" width="0.1002%" height="15" fill="rgb(210,16,53)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="719.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="693" width="0.1002%" height="15" fill="rgb(235,124,12)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="703.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="677" width="0.1002%" height="15" fill="rgb(224,169,11)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="687.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="661" width="0.1002%" height="15" fill="rgb(250,166,2)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="671.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="645" width="0.1002%" height="15" fill="rgb(242,216,29)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="655.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="629" width="0.1002%" height="15" fill="rgb(230,116,27)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="639.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="613" width="0.1002%" height="15" fill="rgb(228,99,48)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="623.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="597" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="581" width="0.1002%" height="15" fill="rgb(247,143,39)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="565" width="0.1002%" height="15" fill="rgb(236,97,10)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="549" width="0.1002%" height="15" fill="rgb(233,208,19)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="533" width="0.1002%" height="15" fill="rgb(216,164,2)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="517" width="0.1002%" height="15" fill="rgb(220,129,5)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="501" width="0.1002%" height="15" fill="rgb(242,17,10)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="485" width="0.1002%" height="15" fill="rgb(242,107,0)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="469" width="0.1002%" height="15" fill="rgb(251,28,31)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="453" width="0.1002%" height="15" fill="rgb(233,223,10)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="437" width="0.1002%" height="15" fill="rgb(215,21,27)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="421" width="0.1002%" height="15" fill="rgb(232,23,21)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="405" width="0.1002%" height="15" fill="rgb(244,5,23)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="389" width="0.1002%" height="15" fill="rgb(226,81,46)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="373" width="0.1002%" height="15" fill="rgb(247,70,30)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="357" width="0.1002%" height="15" fill="rgb(212,68,19)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="341" width="0.1002%" height="15" fill="rgb(240,187,13)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="325" width="0.1002%" height="15" fill="rgb(223,113,26)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="309" width="0.1002%" height="15" fill="rgb(206,192,2)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="293" width="0.1002%" height="15" fill="rgb(241,108,4)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="277" width="0.1002%" height="15" fill="rgb(247,173,49)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="261" width="0.1002%" height="15" fill="rgb(224,114,35)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="271.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="245" width="0.1002%" height="15" fill="rgb(245,159,27)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="255.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="229" width="0.1002%" height="15" fill="rgb(245,172,44)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="213" width="0.1002%" height="15" fill="rgb(236,23,11)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="223.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="197" width="0.1002%" height="15" fill="rgb(205,117,38)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="181" width="0.1002%" height="15" fill="rgb(237,72,25)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="165" width="0.1002%" height="15" fill="rgb(244,70,9)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="149" width="0.1002%" height="15" fill="rgb(217,125,39)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="133" width="0.1002%" height="15" fill="rgb(235,36,10)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="117" width="0.1002%" height="15" fill="rgb(251,123,47)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="101" width="0.1002%" height="15" fill="rgb(221,13,13)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="85" width="0.1002%" height="15" fill="rgb(238,131,9)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="69" width="0.1002%" height="15" fill="rgb(211,50,8)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="53" width="0.1002%" height="15" fill="rgb(245,182,24)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="37" width="0.1002%" height="15" fill="rgb(242,14,37)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="613" width="0.1002%" height="15" fill="rgb(246,228,12)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="597" width="0.1002%" height="15" fill="rgb(213,55,15)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="581" width="0.1002%" height="15" fill="rgb(209,9,3)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="565" width="0.1002%" height="15" fill="rgb(230,59,30)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="549" width="0.1002%" height="15" fill="rgb(209,121,21)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="533" width="0.1002%" height="15" fill="rgb(220,109,13)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="517" width="0.1002%" height="15" fill="rgb(232,18,1)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="527.50"></text></g><g><title>__rustc::__rust_alloc (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="501" width="0.1002%" height="15" fill="rgb(215,41,42)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="511.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="485" width="0.1002%" height="15" fill="rgb(224,123,36)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="495.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="469" width="0.1002%" height="15" fill="rgb(240,125,3)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="661" width="0.2004%" height="15" fill="rgb(205,98,50)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="645" width="0.2004%" height="15" fill="rgb(205,185,37)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="629" width="0.2004%" height="15" fill="rgb(238,207,15)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="613" width="0.1002%" height="15" fill="rgb(213,199,42)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="597" width="0.1002%" height="15" fill="rgb(235,201,11)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="607.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="581" width="0.1002%" height="15" fill="rgb(207,46,11)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="591.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1039.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1023.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1007.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="991.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="975.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="799.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="783.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="751.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (3,009,027 samples, 0.30%)</title><rect x="99.6994%" y="709" width="0.3006%" height="15" fill="rgb(221,78,26)" fg:x="997993955" fg:w="3009027"/><text x="99.9494%" y="719.50"></text></g><g><title>std::env::args_os (3,009,027 samples, 0.30%)</title><rect x="99.6994%" y="693" width="0.3006%" height="15" fill="rgb(250,127,30)" fg:x="997993955" fg:w="3009027"/><text x="99.9494%" y="703.50"></text></g><g><title>std::sys::args::unix::args (3,009,027 samples, 0.30%)</title><rect x="99.6994%" y="677" width="0.3006%" height="15" fill="rgb(230,49,44)" fg:x="997993955" fg:w="3009027"/><text x="99.9494%" y="687.50"></text></g><g><title>core::ffi::c_str::CStr::from_ptr (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="661" width="0.1002%" height="15" fill="rgb(229,67,23)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="671.50"></text></g><g><title>core::ffi::c_str::strlen (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="645" width="0.1002%" height="15" fill="rgb(249,83,47)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="655.50"></text></g><g><title>core::ffi::c_str::strlen::runtime (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="629" width="0.1002%" height="15" fill="rgb(215,43,3)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="639.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="613" width="0.1002%" height="15" fill="rgb(238,154,13)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="623.50"></text></g></svg></svg>