<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (11,033,099 samples, 1.10%)</title><rect x="1.6032%" y="197" width="1.1022%" height="15" fill="rgb(227,0,7)" fg:x="16048144" fg:w="11033099"/><text x="1.8532%" y="207.50"></text></g><g><title>core::str::validations::next_code_point (11,033,099 samples, 1.10%)</title><rect x="1.6032%" y="181" width="1.1022%" height="15" fill="rgb(217,0,24)" fg:x="16048144" fg:w="11033099"/><text x="1.8532%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="2.6052%" y="165" width="0.1002%" height="15" fill="rgb(221,193,54)" fg:x="26078234" fg:w="1003009"/><text x="2.8552%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 1.40%)</title><rect x="1.5030%" y="277" width="1.4028%" height="15" fill="rgb(248,212,6)" fg:x="15045135" fg:w="14042126"/><text x="1.7530%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 1.40%)</title><rect x="1.5030%" y="261" width="1.4028%" height="15" fill="rgb(208,68,35)" fg:x="15045135" fg:w="14042126"/><text x="1.7530%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 1.40%)</title><rect x="1.5030%" y="245" width="1.4028%" height="15" fill="rgb(232,128,0)" fg:x="15045135" fg:w="14042126"/><text x="1.7530%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (14,042,126 samples, 1.40%)</title><rect x="1.5030%" y="229" width="1.4028%" height="15" fill="rgb(207,160,47)" fg:x="15045135" fg:w="14042126"/><text x="1.7530%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14,042,126 samples, 1.40%)</title><rect x="1.5030%" y="213" width="1.4028%" height="15" fill="rgb(228,23,34)" fg:x="15045135" fg:w="14042126"/><text x="1.7530%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="2.7054%" y="197" width="0.2004%" height="15" fill="rgb(218,30,26)" fg:x="27081243" fg:w="2006018"/><text x="2.9554%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,006,018 samples, 0.20%)</title><rect x="2.7054%" y="181" width="0.2004%" height="15" fill="rgb(220,122,19)" fg:x="27081243" fg:w="2006018"/><text x="2.9554%" y="191.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::new::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="2.7054%" y="165" width="0.2004%" height="15" fill="rgb(250,228,42)" fg:x="27081243" fg:w="2006018"/><text x="2.9554%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2,006,018 samples, 0.20%)</title><rect x="2.7054%" y="149" width="0.2004%" height="15" fill="rgb(240,193,28)" fg:x="27081243" fg:w="2006018"/><text x="2.9554%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="2.8056%" y="133" width="0.1002%" height="15" fill="rgb(216,20,37)" fg:x="28084252" fg:w="1003009"/><text x="3.0556%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,063,189 samples, 2.10%)</title><rect x="1.5030%" y="293" width="2.1042%" height="15" fill="rgb(206,188,39)" fg:x="15045135" fg:w="21063189"/><text x="1.7530%" y="303.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (7,021,063 samples, 0.70%)</title><rect x="2.9058%" y="277" width="0.7014%" height="15" fill="rgb(217,207,13)" fg:x="29087261" fg:w="7021063"/><text x="3.1558%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,021,063 samples, 0.70%)</title><rect x="2.9058%" y="261" width="0.7014%" height="15" fill="rgb(231,73,38)" fg:x="29087261" fg:w="7021063"/><text x="3.1558%" y="271.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::new::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="2.9058%" y="245" width="0.7014%" height="15" fill="rgb(225,20,46)" fg:x="29087261" fg:w="7021063"/><text x="3.1558%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2,006,018 samples, 0.20%)</title><rect x="3.6072%" y="293" width="0.2004%" height="15" fill="rgb(210,31,41)" fg:x="36108324" fg:w="2006018"/><text x="3.8572%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,006,018 samples, 0.20%)</title><rect x="3.6072%" y="277" width="0.2004%" height="15" fill="rgb(221,200,47)" fg:x="36108324" fg:w="2006018"/><text x="3.8572%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,006,018 samples, 0.20%)</title><rect x="3.6072%" y="261" width="0.2004%" height="15" fill="rgb(226,26,5)" fg:x="36108324" fg:w="2006018"/><text x="3.8572%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,006,018 samples, 0.20%)</title><rect x="3.6072%" y="245" width="0.2004%" height="15" fill="rgb(249,33,26)" fg:x="36108324" fg:w="2006018"/><text x="3.8572%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2,006,018 samples, 0.20%)</title><rect x="3.8076%" y="293" width="0.2004%" height="15" fill="rgb(235,183,28)" fg:x="38114342" fg:w="2006018"/><text x="4.0576%" y="303.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::new (56,168,504 samples, 5.61%)</title><rect x="0.0000%" y="357" width="5.6112%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="56168504"/><text x="0.2500%" y="367.50">aoc_202..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (56,168,504 samples, 5.61%)</title><rect x="0.0000%" y="341" width="5.6112%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="56168504"/><text x="0.2500%" y="351.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (56,168,504 samples, 5.61%)</title><rect x="0.0000%" y="325" width="5.6112%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="56168504"/><text x="0.2500%" y="335.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (56,168,504 samples, 5.61%)</title><rect x="0.0000%" y="309" width="5.6112%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="56168504"/><text x="0.2500%" y="319.50">alloc::..</text></g><g><title>core::ptr::write (16,048,144 samples, 1.60%)</title><rect x="4.0080%" y="293" width="1.6032%" height="15" fill="rgb(225,111,53)" fg:x="40120360" fg:w="16048144"/><text x="4.2580%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12,036,108 samples, 1.20%)</title><rect x="12.2244%" y="245" width="1.2024%" height="15" fill="rgb(238,160,17)" fg:x="122367098" fg:w="12036108"/><text x="12.4744%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (12,036,108 samples, 1.20%)</title><rect x="12.2244%" y="229" width="1.2024%" height="15" fill="rgb(214,148,48)" fg:x="122367098" fg:w="12036108"/><text x="12.4744%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (11,033,099 samples, 1.10%)</title><rect x="13.4269%" y="245" width="1.1022%" height="15" fill="rgb(232,36,49)" fg:x="134403206" fg:w="11033099"/><text x="13.6769%" y="255.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="14.4289%" y="229" width="0.1002%" height="15" fill="rgb(209,103,24)" fg:x="144433296" fg:w="1003009"/><text x="14.6789%" y="239.50"></text></g><g><title>&lt;&amp;u16 as core::ops::arith::Add&lt;u16&gt;&gt;::add (10,030,090 samples, 1.00%)</title><rect x="17.0341%" y="229" width="1.0020%" height="15" fill="rgb(229,88,8)" fg:x="170511530" fg:w="10030090"/><text x="17.2841%" y="239.50"></text></g><g><title>&lt;u16 as core::ops::arith::Add&gt;::add (10,030,090 samples, 1.00%)</title><rect x="17.0341%" y="213" width="1.0020%" height="15" fill="rgb(213,181,19)" fg:x="170511530" fg:w="10030090"/><text x="17.2841%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (371,113,330 samples, 37.07%)</title><rect x="18.0361%" y="229" width="37.0741%" height="15" fill="rgb(254,191,54)" fg:x="180541620" fg:w="371113330"/><text x="18.2861%" y="239.50">alloc::vec::Vec&lt;T,A&gt;::insert</text></g><g><title>core::intrinsics::copy (371,113,330 samples, 37.07%)</title><rect x="18.0361%" y="213" width="37.0741%" height="15" fill="rgb(241,83,37)" fg:x="180541620" fg:w="371113330"/><text x="18.2861%" y="223.50">core::intrinsics::copy</text></g><g><title>[libc.so.6] (371,113,330 samples, 37.07%)</title><rect x="18.0361%" y="197" width="37.0741%" height="15" fill="rgb(233,36,39)" fg:x="180541620" fg:w="371113330"/><text x="18.2861%" y="207.50">[libc.so.6]</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,003,009 samples, 0.10%)</title><rect x="55.1102%" y="229" width="0.1002%" height="15" fill="rgb(226,3,54)" fg:x="551654950" fg:w="1003009"/><text x="55.3602%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.30%)</title><rect x="55.2104%" y="229" width="0.3006%" height="15" fill="rgb(245,192,40)" fg:x="552657959" fg:w="3009027"/><text x="55.4604%" y="239.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.30%)</title><rect x="55.2104%" y="213" width="0.3006%" height="15" fill="rgb(238,167,29)" fg:x="552657959" fg:w="3009027"/><text x="55.4604%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2,006,018 samples, 0.20%)</title><rect x="69.7395%" y="197" width="0.2004%" height="15" fill="rgb(232,182,51)" fg:x="698094264" fg:w="2006018"/><text x="69.9895%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (2,006,018 samples, 0.20%)</title><rect x="69.7395%" y="181" width="0.2004%" height="15" fill="rgb(231,60,39)" fg:x="698094264" fg:w="2006018"/><text x="69.9895%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2,006,018 samples, 0.20%)</title><rect x="69.7395%" y="165" width="0.2004%" height="15" fill="rgb(208,69,12)" fg:x="698094264" fg:w="2006018"/><text x="69.9895%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,006,018 samples, 0.20%)</title><rect x="69.7395%" y="149" width="0.2004%" height="15" fill="rgb(235,93,37)" fg:x="698094264" fg:w="2006018"/><text x="69.9895%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,006,018 samples, 0.20%)</title><rect x="69.7395%" y="133" width="0.2004%" height="15" fill="rgb(213,116,39)" fg:x="698094264" fg:w="2006018"/><text x="69.9895%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,006,018 samples, 0.20%)</title><rect x="69.7395%" y="117" width="0.2004%" height="15" fill="rgb(222,207,29)" fg:x="698094264" fg:w="2006018"/><text x="69.9895%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23,069,207 samples, 2.30%)</title><rect x="69.7395%" y="213" width="2.3046%" height="15" fill="rgb(206,96,30)" fg:x="698094264" fg:w="23069207"/><text x="69.9895%" y="223.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21,063,189 samples, 2.10%)</title><rect x="69.9399%" y="197" width="2.1042%" height="15" fill="rgb(218,138,4)" fg:x="700100282" fg:w="21063189"/><text x="70.1899%" y="207.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21,063,189 samples, 2.10%)</title><rect x="69.9399%" y="181" width="2.1042%" height="15" fill="rgb(250,191,14)" fg:x="700100282" fg:w="21063189"/><text x="70.1899%" y="191.50">&lt;..</text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::GapOccurrence as core::cmp::PartialEq&gt;::eq (12,036,108 samples, 1.20%)</title><rect x="72.0441%" y="213" width="1.2024%" height="15" fill="rgb(239,60,40)" fg:x="721163471" fg:w="12036108"/><text x="72.2941%" y="223.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (15,045,135 samples, 1.50%)</title><rect x="73.2465%" y="213" width="1.5030%" height="15" fill="rgb(206,27,48)" fg:x="733199579" fg:w="15045135"/><text x="73.4965%" y="223.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::first_gap_occurrence::_{{closure}} (15,045,135 samples, 1.50%)</title><rect x="73.2465%" y="197" width="1.5030%" height="15" fill="rgb(225,35,8)" fg:x="733199579" fg:w="15045135"/><text x="73.4965%" y="207.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (27,081,243 samples, 2.71%)</title><rect x="74.7495%" y="213" width="2.7054%" height="15" fill="rgb(250,213,24)" fg:x="748244714" fg:w="27081243"/><text x="74.9995%" y="223.50">co..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (27,081,243 samples, 2.71%)</title><rect x="74.7495%" y="197" width="2.7054%" height="15" fill="rgb(247,123,22)" fg:x="748244714" fg:w="27081243"/><text x="74.9995%" y="207.50">co..</text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (27,081,243 samples, 2.71%)</title><rect x="74.7495%" y="181" width="2.7054%" height="15" fill="rgb(231,138,38)" fg:x="748244714" fg:w="27081243"/><text x="74.9995%" y="191.50">&lt;c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (27,081,243 samples, 2.71%)</title><rect x="74.7495%" y="165" width="2.7054%" height="15" fill="rgb(231,145,46)" fg:x="748244714" fg:w="27081243"/><text x="74.9995%" y="175.50">&lt;c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (52,156,468 samples, 5.21%)</title><rect x="77.4549%" y="213" width="5.2104%" height="15" fill="rgb(251,118,11)" fg:x="775325957" fg:w="52156468"/><text x="77.7049%" y="223.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::ge (52,156,468 samples, 5.21%)</title><rect x="77.4549%" y="197" width="5.2104%" height="15" fill="rgb(217,147,25)" fg:x="775325957" fg:w="52156468"/><text x="77.7049%" y="207.50">core::..</text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::first_gap_occurrence (316,950,844 samples, 31.66%)</title><rect x="55.5110%" y="229" width="31.6633%" height="15" fill="rgb(247,81,37)" fg:x="555666986" fg:w="316950844"/><text x="55.7610%" y="239.50">aoc_2024_megaproject::problems::day9::Part2PackedDa..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (45,135,405 samples, 4.51%)</title><rect x="82.6653%" y="213" width="4.5090%" height="15" fill="rgb(209,12,38)" fg:x="827482425" fg:w="45135405"/><text x="82.9153%" y="223.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (45,135,405 samples, 4.51%)</title><rect x="82.6653%" y="197" width="4.5090%" height="15" fill="rgb(227,1,9)" fg:x="827482425" fg:w="45135405"/><text x="82.9153%" y="207.50">&lt;core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="87.0741%" y="181" width="0.1002%" height="15" fill="rgb(248,47,43)" fg:x="871614821" fg:w="1003009"/><text x="87.3241%" y="191.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::set_invalid::_{{closure}} (44,132,396 samples, 4.41%)</title><rect x="87.1743%" y="149" width="4.4088%" height="15" fill="rgb(221,10,30)" fg:x="872617830" fg:w="44132396"/><text x="87.4243%" y="159.50">aoc_2..</text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::GapOccurrence as core::cmp::PartialEq&gt;::eq (44,132,396 samples, 4.41%)</title><rect x="87.1743%" y="133" width="4.4088%" height="15" fill="rgb(210,229,1)" fg:x="872617830" fg:w="44132396"/><text x="87.4243%" y="143.50">&lt;aoc_..</text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::set_invalid (46,138,414 samples, 4.61%)</title><rect x="87.1743%" y="229" width="4.6092%" height="15" fill="rgb(222,148,37)" fg:x="872617830" fg:w="46138414"/><text x="87.4243%" y="239.50">aoc_2..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (46,138,414 samples, 4.61%)</title><rect x="87.1743%" y="213" width="4.6092%" height="15" fill="rgb(234,67,33)" fg:x="872617830" fg:w="46138414"/><text x="87.4243%" y="223.50">core:..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46,138,414 samples, 4.61%)</title><rect x="87.1743%" y="197" width="4.6092%" height="15" fill="rgb(247,98,35)" fg:x="872617830" fg:w="46138414"/><text x="87.4243%" y="207.50">&lt;core..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46,138,414 samples, 4.61%)</title><rect x="87.1743%" y="181" width="4.6092%" height="15" fill="rgb(247,138,52)" fg:x="872617830" fg:w="46138414"/><text x="87.4243%" y="191.50">&lt;core..</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (46,138,414 samples, 4.61%)</title><rect x="87.1743%" y="165" width="4.6092%" height="15" fill="rgb(213,79,30)" fg:x="872617830" fg:w="46138414"/><text x="87.4243%" y="175.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="91.5832%" y="149" width="0.2004%" height="15" fill="rgb(246,177,23)" fg:x="916750226" fg:w="2006018"/><text x="91.8332%" y="159.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::set_invalid::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="91.5832%" y="133" width="0.2004%" height="15" fill="rgb(230,62,27)" fg:x="916750226" fg:w="2006018"/><text x="91.8332%" y="143.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::shift_refs_from_insert (1,003,009 samples, 0.10%)</title><rect x="91.7836%" y="229" width="0.1002%" height="15" fill="rgb(216,154,8)" fg:x="918756244" fg:w="1003009"/><text x="92.0336%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,003,009 samples, 0.10%)</title><rect x="91.7836%" y="213" width="0.1002%" height="15" fill="rgb(244,35,45)" fg:x="918756244" fg:w="1003009"/><text x="92.0336%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.10%)</title><rect x="91.7836%" y="197" width="0.1002%" height="15" fill="rgb(251,115,12)" fg:x="918756244" fg:w="1003009"/><text x="92.0336%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.10%)</title><rect x="91.7836%" y="181" width="0.1002%" height="15" fill="rgb(240,54,50)" fg:x="918756244" fg:w="1003009"/><text x="92.0336%" y="191.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.10%)</title><rect x="91.7836%" y="165" width="0.1002%" height="15" fill="rgb(233,84,52)" fg:x="918756244" fg:w="1003009"/><text x="92.0336%" y="175.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="91.7836%" y="149" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="918756244" fg:w="1003009"/><text x="92.0336%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,003,009 samples, 0.10%)</title><rect x="91.8838%" y="229" width="0.1002%" height="15" fill="rgb(249,43,39)" fg:x="919759253" fg:w="1003009"/><text x="92.1338%" y="239.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::attempt_to_move (776,328,966 samples, 77.56%)</title><rect x="14.5291%" y="245" width="77.5551%" height="15" fill="rgb(209,38,44)" fg:x="145436305" fg:w="776328966"/><text x="14.7791%" y="255.50">aoc_2024_megaproject::problems::day9::Part2PackedData::attempt_to_move</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1,003,009 samples, 0.10%)</title><rect x="91.9840%" y="229" width="0.1002%" height="15" fill="rgb(236,212,23)" fg:x="920762262" fg:w="1003009"/><text x="92.2340%" y="239.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Part2PackedData as core::iter::traits::iterator::Iterator&gt;::next (869,608,803 samples, 86.87%)</title><rect x="6.1122%" y="261" width="86.8737%" height="15" fill="rgb(242,79,21)" fg:x="61183549" fg:w="869608803"/><text x="6.3622%" y="271.50">&lt;aoc_2024_megaproject::problems::day9::Part2PackedData as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (9,027,081 samples, 0.90%)</title><rect x="92.0842%" y="245" width="0.9018%" height="15" fill="rgb(211,96,35)" fg:x="921765271" fg:w="9027081"/><text x="92.3342%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="229" width="0.1002%" height="15" fill="rgb(253,215,40)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="213" width="0.1002%" height="15" fill="rgb(211,81,21)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="197" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="181" width="0.1002%" height="15" fill="rgb(235,213,38)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="165" width="0.1002%" height="15" fill="rgb(237,122,38)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="149" width="0.1002%" height="15" fill="rgb(244,218,35)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="133" width="0.1002%" height="15" fill="rgb(240,68,47)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="117" width="0.1002%" height="15" fill="rgb(210,16,53)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="101" width="0.1002%" height="15" fill="rgb(235,124,12)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="92.8858%" y="85" width="0.1002%" height="15" fill="rgb(224,169,11)" fg:x="929789343" fg:w="1003009"/><text x="93.1358%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="261" width="0.3006%" height="15" fill="rgb(250,166,2)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="245" width="0.3006%" height="15" fill="rgb(242,216,29)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="229" width="0.3006%" height="15" fill="rgb(230,116,27)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="213" width="0.3006%" height="15" fill="rgb(228,99,48)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="197" width="0.3006%" height="15" fill="rgb(253,11,6)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="181" width="0.3006%" height="15" fill="rgb(247,143,39)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="165" width="0.3006%" height="15" fill="rgb(236,97,10)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="149" width="0.3006%" height="15" fill="rgb(233,208,19)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="133" width="0.3006%" height="15" fill="rgb(216,164,2)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="143.50"></text></g><g><title>__rustc::__rust_realloc (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="117" width="0.3006%" height="15" fill="rgb(220,129,5)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="127.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::realloc (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="101" width="0.3006%" height="15" fill="rgb(242,17,10)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="85" width="0.3006%" height="15" fill="rgb(242,107,0)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="95.50"></text></g><g><title>realloc (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="69" width="0.3006%" height="15" fill="rgb(251,28,31)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="79.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="53" width="0.3006%" height="15" fill="rgb(233,223,10)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="63.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="92.9860%" y="37" width="0.3006%" height="15" fill="rgb(215,21,27)" fg:x="930792352" fg:w="3009027"/><text x="93.2360%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (879,638,893 samples, 87.88%)</title><rect x="5.6112%" y="293" width="87.8758%" height="15" fill="rgb(232,23,21)" fg:x="56168504" fg:w="879638893"/><text x="5.8612%" y="303.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (879,638,893 samples, 87.88%)</title><rect x="5.6112%" y="277" width="87.8758%" height="15" fill="rgb(244,5,23)" fg:x="56168504" fg:w="879638893"/><text x="5.8612%" y="287.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (2,006,018 samples, 0.20%)</title><rect x="93.2866%" y="261" width="0.2004%" height="15" fill="rgb(226,81,46)" fg:x="933801379" fg:w="2006018"/><text x="93.5366%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (880,641,902 samples, 87.98%)</title><rect x="5.6112%" y="357" width="87.9760%" height="15" fill="rgb(247,70,30)" fg:x="56168504" fg:w="880641902"/><text x="5.8612%" y="367.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (880,641,902 samples, 87.98%)</title><rect x="5.6112%" y="341" width="87.9760%" height="15" fill="rgb(212,68,19)" fg:x="56168504" fg:w="880641902"/><text x="5.8612%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (880,641,902 samples, 87.98%)</title><rect x="5.6112%" y="325" width="87.9760%" height="15" fill="rgb(240,187,13)" fg:x="56168504" fg:w="880641902"/><text x="5.8612%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (880,641,902 samples, 87.98%)</title><rect x="5.6112%" y="309" width="87.9760%" height="15" fill="rgb(223,113,26)" fg:x="56168504" fg:w="880641902"/><text x="5.8612%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Part2PackedData as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="293" width="0.1002%" height="15" fill="rgb(206,192,2)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="303.50"></text></g><g><title>aoc_2024_megaproject::problems::day9::Part2PackedData::attempt_to_move (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="277" width="0.1002%" height="15" fill="rgb(241,108,4)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="261" width="0.1002%" height="15" fill="rgb(247,173,49)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="245" width="0.1002%" height="15" fill="rgb(224,114,35)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="255.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="229" width="0.1002%" height="15" fill="rgb(245,159,27)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="93.5872%" y="149" width="0.1002%" height="15" fill="rgb(245,172,44)" fg:x="936810406" fg:w="1003009"/><text x="93.8372%" y="159.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,012,036 samples, 0.40%)</title><rect x="93.5872%" y="165" width="0.4008%" height="15" fill="rgb(236,23,11)" fg:x="936810406" fg:w="4012036"/><text x="93.8372%" y="175.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.30%)</title><rect x="93.6874%" y="149" width="0.3006%" height="15" fill="rgb(205,117,38)" fg:x="937813415" fg:w="3009027"/><text x="93.9374%" y="159.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Day9 as aoc_2024_megaproject::Day&gt;::part2::_{{closure}} (5,015,045 samples, 0.50%)</title><rect x="93.9880%" y="149" width="0.5010%" height="15" fill="rgb(237,72,25)" fg:x="940822442" fg:w="5015045"/><text x="94.2380%" y="159.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Day9 as aoc_2024_megaproject::Day&gt;::part2::_{{closure}} (8,024,072 samples, 0.80%)</title><rect x="94.5892%" y="133" width="0.8016%" height="15" fill="rgb(244,70,9)" fg:x="946840496" fg:w="8024072"/><text x="94.8392%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="95.3908%" y="69" width="0.1002%" height="15" fill="rgb(217,125,39)" fg:x="954864568" fg:w="1003009"/><text x="95.6408%" y="79.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,003,009 samples, 0.10%)</title><rect x="95.3908%" y="53" width="0.1002%" height="15" fill="rgb(235,36,10)" fg:x="954864568" fg:w="1003009"/><text x="95.6408%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="95.3908%" y="37" width="0.1002%" height="15" fill="rgb(251,123,47)" fg:x="954864568" fg:w="1003009"/><text x="95.6408%" y="47.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (997,993,955 samples, 99.70%)</title><rect x="0.0000%" y="389" width="99.6994%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="399.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day9::Day9 as aoc_2024_megaproject::Day&gt;::part2 (997,993,955 samples, 99.70%)</title><rect x="0.0000%" y="373" width="99.6994%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="383.50">&lt;aoc_2024_megaproject::problems::day9::Day9 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>core::iter::traits::iterator::Iterator::sum (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="357" width="6.1122%" height="15" fill="rgb(211,50,8)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="367.50">core::it..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="341" width="6.1122%" height="15" fill="rgb(245,182,24)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="351.50">&lt;usize a..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="325" width="6.1122%" height="15" fill="rgb(242,14,37)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="335.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="309" width="6.1122%" height="15" fill="rgb(246,228,12)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="319.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="293" width="6.1122%" height="15" fill="rgb(213,55,15)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="303.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="277" width="6.1122%" height="15" fill="rgb(209,9,3)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="287.50">&lt;core::i..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="261" width="6.1122%" height="15" fill="rgb(230,59,30)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="271.50">core::it..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="245" width="6.1122%" height="15" fill="rgb(209,121,21)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="255.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="229" width="6.1122%" height="15" fill="rgb(220,109,13)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="239.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="213" width="6.1122%" height="15" fill="rgb(232,18,1)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="223.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="197" width="6.1122%" height="15" fill="rgb(215,41,42)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="207.50">&lt;core::i..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (61,183,549 samples, 6.11%)</title><rect x="93.5872%" y="181" width="6.1122%" height="15" fill="rgb(224,123,36)" fg:x="936810406" fg:w="61183549"/><text x="93.8372%" y="191.50">core::it..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (57,171,513 samples, 5.71%)</title><rect x="93.9880%" y="165" width="5.7114%" height="15" fill="rgb(240,125,3)" fg:x="940822442" fg:w="57171513"/><text x="94.2380%" y="175.50">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (52,156,468 samples, 5.21%)</title><rect x="94.4890%" y="149" width="5.2104%" height="15" fill="rgb(205,98,50)" fg:x="945837487" fg:w="52156468"/><text x="94.7390%" y="159.50">core::..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}} (43,129,387 samples, 4.31%)</title><rect x="95.3908%" y="133" width="4.3086%" height="15" fill="rgb(205,185,37)" fg:x="954864568" fg:w="43129387"/><text x="95.6408%" y="143.50">core:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (43,129,387 samples, 4.31%)</title><rect x="95.3908%" y="117" width="4.3086%" height="15" fill="rgb(238,207,15)" fg:x="954864568" fg:w="43129387"/><text x="95.6408%" y="127.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43,129,387 samples, 4.31%)</title><rect x="95.3908%" y="101" width="4.3086%" height="15" fill="rgb(213,199,42)" fg:x="954864568" fg:w="43129387"/><text x="95.6408%" y="111.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (43,129,387 samples, 4.31%)</title><rect x="95.3908%" y="85" width="4.3086%" height="15" fill="rgb(235,201,11)" fg:x="954864568" fg:w="43129387"/><text x="95.6408%" y="95.50">core:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (42,126,378 samples, 4.21%)</title><rect x="95.4910%" y="69" width="4.2084%" height="15" fill="rgb(207,46,11)" fg:x="955867577" fg:w="42126378"/><text x="95.7410%" y="79.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (42,126,378 samples, 4.21%)</title><rect x="95.4910%" y="53" width="4.2084%" height="15" fill="rgb(241,35,35)" fg:x="955867577" fg:w="42126378"/><text x="95.7410%" y="63.50">&lt;core..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="341" width="0.1002%" height="15" fill="rgb(243,32,47)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="325" width="0.1002%" height="15" fill="rgb(247,202,23)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="309" width="0.1002%" height="15" fill="rgb(219,102,11)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="293" width="0.1002%" height="15" fill="rgb(243,110,44)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="277" width="0.1002%" height="15" fill="rgb(222,74,54)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="261" width="0.1002%" height="15" fill="rgb(216,99,12)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="245" width="0.1002%" height="15" fill="rgb(226,22,26)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="229" width="0.1002%" height="15" fill="rgb(217,163,10)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="213" width="0.1002%" height="15" fill="rgb(213,25,53)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="197" width="0.1002%" height="15" fill="rgb(252,105,26)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="207.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="181" width="0.1002%" height="15" fill="rgb(220,39,43)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="191.50"></text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="533" width="99.8998%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="517" width="99.8998%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="501" width="99.8998%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="485" width="99.8998%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="469" width="99.8998%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="453" width="99.8998%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="437" width="99.8998%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="421" width="99.8998%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="431.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="405" width="99.8998%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="415.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="389" width="0.2004%" height="15" fill="rgb(250,127,30)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="399.50"></text></g><g><title>std::env::args_os (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="373" width="0.2004%" height="15" fill="rgb(230,49,44)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="383.50"></text></g><g><title>std::sys::args::unix::args (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="357" width="0.2004%" height="15" fill="rgb(229,67,23)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(249,83,47)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="325" width="0.1002%" height="15" fill="rgb(215,43,3)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="309" width="0.1002%" height="15" fill="rgb(238,154,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="293" width="0.1002%" height="15" fill="rgb(219,56,2)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="277" width="0.1002%" height="15" fill="rgb(233,0,4)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(235,30,7)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(250,79,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="229" width="0.1002%" height="15" fill="rgb(211,146,34)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="239.50"></text></g><g><title>__rustc::__rust_alloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="213" width="0.1002%" height="15" fill="rgb(228,22,38)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="223.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="197" width="0.1002%" height="15" fill="rgb(235,168,5)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="207.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="181" width="0.1002%" height="15" fill="rgb(221,155,16)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="191.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="687.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="655.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="559.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::init (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="533" width="0.1002%" height="15" fill="rgb(235,28,35)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="543.50"></text></g><g><title>std::sys::pal::unix::init (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="517" width="0.1002%" height="15" fill="rgb(210,56,17)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="527.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="501" width="0.1002%" height="15" fill="rgb(224,130,29)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="511.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="485" width="0.1002%" height="15" fill="rgb(235,212,8)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="495.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="469" width="0.1002%" height="15" fill="rgb(223,33,50)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="479.50"></text></g><g><title>__mmap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="453" width="0.1002%" height="15" fill="rgb(219,149,13)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="463.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="437" width="0.1002%" height="15" fill="rgb(250,156,29)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="447.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="421" width="0.1002%" height="15" fill="rgb(216,193,19)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="431.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="405" width="0.1002%" height="15" fill="rgb(216,135,14)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="415.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="389" width="0.1002%" height="15" fill="rgb(241,47,5)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="399.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="373" width="0.1002%" height="15" fill="rgb(233,42,35)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="383.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="357" width="0.1002%" height="15" fill="rgb(231,13,6)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="367.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="341" width="0.1002%" height="15" fill="rgb(207,181,40)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="351.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="325" width="0.1002%" height="15" fill="rgb(254,173,49)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="335.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="309" width="0.1002%" height="15" fill="rgb(221,1,38)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="319.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="293" width="0.1002%" height="15" fill="rgb(206,124,46)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="303.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="277" width="0.1002%" height="15" fill="rgb(249,21,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="287.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="261" width="0.1002%" height="15" fill="rgb(222,201,40)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="271.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="245" width="0.1002%" height="15" fill="rgb(235,61,29)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="229" width="0.1002%" height="15" fill="rgb(219,207,3)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(222,56,46)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="197" width="0.1002%" height="15" fill="rgb(239,76,54)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="207.50"></text></g></svg></svg>