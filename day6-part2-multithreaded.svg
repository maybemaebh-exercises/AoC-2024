<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="1919759226"><g><title>[libc.so.6] (1,003,009 samples, 0.05%)</title><rect x="0.0000%" y="853" width="0.0522%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="863.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index (1,003,009 samples, 0.05%)</title><rect x="0.6270%" y="629" width="0.0522%" height="15" fill="rgb(217,0,24)" fg:x="12036108" fg:w="1003009"/><text x="0.8770%" y="639.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index_usize (1,003,009 samples, 0.05%)</title><rect x="0.6270%" y="613" width="0.0522%" height="15" fill="rgb(221,193,54)" fg:x="12036108" fg:w="1003009"/><text x="0.8770%" y="623.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day6::GuardPermutationsToCheckForLoopsIter as core::iter::traits::iterator::Iterator&gt;::next (12,036,108 samples, 0.63%)</title><rect x="0.1045%" y="661" width="0.6270%" height="15" fill="rgb(248,212,6)" fg:x="2006018" fg:w="12036108"/><text x="0.3545%" y="671.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::next_guard (7,021,063 samples, 0.37%)</title><rect x="0.3657%" y="645" width="0.3657%" height="15" fill="rgb(208,68,35)" fg:x="7021063" fg:w="7021063"/><text x="0.6157%" y="655.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::in_front_postion (1,003,009 samples, 0.05%)</title><rect x="0.6792%" y="629" width="0.0522%" height="15" fill="rgb(232,128,0)" fg:x="13039117" fg:w="1003009"/><text x="0.9292%" y="639.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::cmp::PartialEq&gt;::eq (187,562,683 samples, 9.77%)</title><rect x="9.9791%" y="645" width="9.7701%" height="15" fill="rgb(207,160,47)" fg:x="191574719" fg:w="187562683"/><text x="10.2291%" y="655.50">&lt;aoc_2024_mega..</text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::hashmap_key_from_state (18,054,162 samples, 0.94%)</title><rect x="19.7492%" y="645" width="0.9404%" height="15" fill="rgb(228,23,34)" fg:x="379137402" fg:w="18054162"/><text x="19.9992%" y="655.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index_usize (18,054,162 samples, 0.94%)</title><rect x="19.7492%" y="629" width="0.9404%" height="15" fill="rgb(218,30,26)" fg:x="379137402" fg:w="18054162"/><text x="19.9992%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (242,728,178 samples, 12.64%)</title><rect x="48.1714%" y="629" width="12.6437%" height="15" fill="rgb(220,122,19)" fg:x="924774298" fg:w="242728178"/><text x="48.4214%" y="639.50">&lt;core::option::Opti..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::cmp::PartialEq&gt;::eq (190,571,710 samples, 9.93%)</title><rect x="50.8882%" y="613" width="9.9269%" height="15" fill="rgb(250,228,42)" fg:x="976930766" fg:w="190571710"/><text x="51.1382%" y="623.50">&lt;aoc_2024_mega..</text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="597" width="0.0522%" height="15" fill="rgb(240,193,28)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="607.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="581" width="0.0522%" height="15" fill="rgb(216,20,37)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="591.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="565" width="0.0522%" height="15" fill="rgb(206,188,39)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="575.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="549" width="0.0522%" height="15" fill="rgb(217,207,13)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="559.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="533" width="0.0522%" height="15" fill="rgb(231,73,38)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="543.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="517" width="0.0522%" height="15" fill="rgb(225,20,46)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="527.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="60.7628%" y="501" width="0.0522%" height="15" fill="rgb(210,31,41)" fg:x="1166499467" fg:w="1003009"/><text x="61.0128%" y="511.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index_usize (163,490,467 samples, 8.52%)</title><rect x="60.8150%" y="613" width="8.5162%" height="15" fill="rgb(221,200,47)" fg:x="1167502476" fg:w="163490467"/><text x="61.0650%" y="623.50">aoc_2024_meg..</text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index (278,836,502 samples, 14.52%)</title><rect x="60.8150%" y="629" width="14.5246%" height="15" fill="rgb(226,26,5)" fg:x="1167502476" fg:w="278836502"/><text x="61.0650%" y="639.50">aoc_2024_megaproject::..</text></g><g><title>core::option::Option&lt;T&gt;::map (115,346,035 samples, 6.01%)</title><rect x="69.3312%" y="613" width="6.0084%" height="15" fill="rgb(249,33,26)" fg:x="1330992943" fg:w="115346035"/><text x="69.5812%" y="623.50">core::op..</text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index::_{{closure}} (115,346,035 samples, 6.01%)</title><rect x="69.3312%" y="597" width="6.0084%" height="15" fill="rgb(235,183,28)" fg:x="1330992943" fg:w="115346035"/><text x="69.5812%" y="607.50">aoc_2024..</text></g><g><title>&lt;ascii::ascii_string::AsciiString as core::ops::index::Index&lt;T&gt;&gt;::index (115,346,035 samples, 6.01%)</title><rect x="69.3312%" y="581" width="6.0084%" height="15" fill="rgb(221,5,38)" fg:x="1330992943" fg:w="115346035"/><text x="69.5812%" y="591.50">&lt;ascii::..</text></g><g><title>&lt;ascii::ascii_str::AsciiStr as core::ops::index::Index&lt;usize&gt;&gt;::index (115,346,035 samples, 6.01%)</title><rect x="69.3312%" y="565" width="6.0084%" height="15" fill="rgb(247,18,42)" fg:x="1330992943" fg:w="115346035"/><text x="69.5812%" y="575.50">&lt;ascii::..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::ops::arith::Add&gt;::add (73,219,657 samples, 3.81%)</title><rect x="76.6980%" y="613" width="3.8140%" height="15" fill="rgb(241,131,45)" fg:x="1472417212" fg:w="73219657"/><text x="76.9480%" y="623.50">&lt;aoc..</text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::in_front_postion (212,637,908 samples, 11.08%)</title><rect x="75.3396%" y="629" width="11.0763%" height="15" fill="rgb(249,31,29)" fg:x="1446338978" fg:w="212637908"/><text x="75.5896%" y="639.50">aoc_2024_megapro..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::ops::arith::Sub&gt;::sub (113,340,017 samples, 5.90%)</title><rect x="80.5120%" y="613" width="5.9039%" height="15" fill="rgb(225,111,53)" fg:x="1545636869" fg:w="113340017"/><text x="80.7620%" y="623.50">&lt;aoc_202..</text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::next_guard (1,364,092,240 samples, 71.06%)</title><rect x="20.6897%" y="645" width="71.0554%" height="15" fill="rgb(238,160,17)" fg:x="397191564" fg:w="1364092240"/><text x="20.9397%" y="655.50">aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::Asc..</text></g><g><title>aoc_2024_megaproject::problems::day6::Direction::rotate_90cw (102,306,918 samples, 5.33%)</title><rect x="86.4159%" y="629" width="5.3292%" height="15" fill="rgb(214,148,48)" fg:x="1658976886" fg:w="102306918"/><text x="86.6659%" y="639.50">aoc_202..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="645" width="0.2612%" height="15" fill="rgb(232,36,49)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="655.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="629" width="0.2612%" height="15" fill="rgb(209,103,24)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="613" width="0.2612%" height="15" fill="rgb(229,88,8)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="597" width="0.2612%" height="15" fill="rgb(213,181,19)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::RawTable&lt;(aoc_2024_megaproject::problems::commons::u24,())&gt;,hashbrown::raw::RawTable&lt;(aoc_2024_megaproject::problems::commons::u24,())&gt;::clear::{{closure}}&gt;&gt; (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="581" width="0.2612%" height="15" fill="rgb(254,191,54)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="591.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="565" width="0.2612%" height="15" fill="rgb(241,83,37)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear::_{{closure}} (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="549" width="0.2612%" height="15" fill="rgb(233,36,39)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear_no_drop (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="533" width="0.2612%" height="15" fill="rgb(226,3,54)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::clear_no_drop (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="517" width="0.2612%" height="15" fill="rgb(245,192,40)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="527.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="501" width="0.2612%" height="15" fill="rgb(238,167,29)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="511.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="485" width="0.2612%" height="15" fill="rgb(232,182,51)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="469" width="0.2612%" height="15" fill="rgb(231,60,39)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="479.50"></text></g><g><title>core::intrinsics::write_bytes (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="453" width="0.2612%" height="15" fill="rgb(208,69,12)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="463.50"></text></g><g><title>[libc.so.6] (5,015,045 samples, 0.26%)</title><rect x="91.7450%" y="437" width="0.2612%" height="15" fill="rgb(235,93,37)" fg:x="1761283804" fg:w="5015045"/><text x="91.9950%" y="447.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21,063,189 samples, 1.10%)</title><rect x="92.2675%" y="533" width="1.0972%" height="15" fill="rgb(213,116,39)" fg:x="1771313894" fg:w="21063189"/><text x="92.5175%" y="543.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (21,063,189 samples, 1.10%)</title><rect x="92.2675%" y="517" width="1.0972%" height="15" fill="rgb(222,207,29)" fg:x="1771313894" fg:w="21063189"/><text x="92.5175%" y="527.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (1,003,009 samples, 0.05%)</title><rect x="93.3124%" y="501" width="0.0522%" height="15" fill="rgb(206,96,30)" fg:x="1791374074" fg:w="1003009"/><text x="93.5624%" y="511.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1,003,009 samples, 0.05%)</title><rect x="93.3124%" y="485" width="0.0522%" height="15" fill="rgb(218,138,4)" fg:x="1791374074" fg:w="1003009"/><text x="93.5624%" y="495.50"></text></g><g><title>core::intrinsics::likely (2,006,018 samples, 0.10%)</title><rect x="93.3647%" y="533" width="0.1045%" height="15" fill="rgb(250,191,14)" fg:x="1792377083" fg:w="2006018"/><text x="93.6147%" y="543.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (7,021,063 samples, 0.37%)</title><rect x="93.4692%" y="533" width="0.3657%" height="15" fill="rgb(239,60,40)" fg:x="1794383101" fg:w="7021063"/><text x="93.7192%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7,021,063 samples, 0.37%)</title><rect x="93.4692%" y="517" width="0.3657%" height="15" fill="rgb(206,27,48)" fg:x="1794383101" fg:w="7021063"/><text x="93.7192%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,021,063 samples, 0.37%)</title><rect x="93.4692%" y="501" width="0.3657%" height="15" fill="rgb(225,35,8)" fg:x="1794383101" fg:w="7021063"/><text x="93.7192%" y="511.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.05%)</title><rect x="93.8349%" y="533" width="0.0522%" height="15" fill="rgb(250,213,24)" fg:x="1801404164" fg:w="1003009"/><text x="94.0849%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.05%)</title><rect x="93.8349%" y="517" width="0.0522%" height="15" fill="rgb(247,123,22)" fg:x="1801404164" fg:w="1003009"/><text x="94.0849%" y="527.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,003,009 samples, 0.05%)</title><rect x="93.8871%" y="533" width="0.0522%" height="15" fill="rgb(231,138,38)" fg:x="1802407173" fg:w="1003009"/><text x="94.1371%" y="543.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (73,219,657 samples, 3.81%)</title><rect x="92.0063%" y="645" width="3.8140%" height="15" fill="rgb(231,145,46)" fg:x="1766298849" fg:w="73219657"/><text x="92.2563%" y="655.50">std:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (73,219,657 samples, 3.81%)</title><rect x="92.0063%" y="629" width="3.8140%" height="15" fill="rgb(251,118,11)" fg:x="1766298849" fg:w="73219657"/><text x="92.2563%" y="639.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (73,219,657 samples, 3.81%)</title><rect x="92.0063%" y="613" width="3.8140%" height="15" fill="rgb(217,147,25)" fg:x="1766298849" fg:w="73219657"/><text x="92.2563%" y="623.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (73,219,657 samples, 3.81%)</title><rect x="92.0063%" y="597" width="3.8140%" height="15" fill="rgb(247,81,37)" fg:x="1766298849" fg:w="73219657"/><text x="92.2563%" y="607.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (68,204,612 samples, 3.55%)</title><rect x="92.2675%" y="581" width="3.5528%" height="15" fill="rgb(209,12,38)" fg:x="1771313894" fg:w="68204612"/><text x="92.5175%" y="591.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (68,204,612 samples, 3.55%)</title><rect x="92.2675%" y="565" width="3.5528%" height="15" fill="rgb(227,1,9)" fg:x="1771313894" fg:w="68204612"/><text x="92.5175%" y="575.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (68,204,612 samples, 3.55%)</title><rect x="92.2675%" y="549" width="3.5528%" height="15" fill="rgb(248,47,43)" fg:x="1771313894" fg:w="68204612"/><text x="92.5175%" y="559.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (36,108,324 samples, 1.88%)</title><rect x="93.9394%" y="533" width="1.8809%" height="15" fill="rgb(221,10,30)" fg:x="1803410182" fg:w="36108324"/><text x="94.1894%" y="543.50">h..</text></g><g><title>core::intrinsics::likely (6,018,054 samples, 0.31%)</title><rect x="96.1338%" y="549" width="0.3135%" height="15" fill="rgb(210,229,1)" fg:x="1845536560" fg:w="6018054"/><text x="96.3838%" y="559.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (2,006,018 samples, 0.10%)</title><rect x="96.4472%" y="549" width="0.1045%" height="15" fill="rgb(222,148,37)" fg:x="1851554614" fg:w="2006018"/><text x="96.6972%" y="559.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.10%)</title><rect x="96.4472%" y="533" width="0.1045%" height="15" fill="rgb(234,67,33)" fg:x="1851554614" fg:w="2006018"/><text x="96.6972%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.10%)</title><rect x="96.4472%" y="517" width="0.1045%" height="15" fill="rgb(247,98,35)" fg:x="1851554614" fg:w="2006018"/><text x="96.6972%" y="527.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,012,036 samples, 0.21%)</title><rect x="96.5517%" y="549" width="0.2090%" height="15" fill="rgb(247,138,52)" fg:x="1853560632" fg:w="4012036"/><text x="96.8017%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.21%)</title><rect x="96.5517%" y="533" width="0.2090%" height="15" fill="rgb(213,79,30)" fg:x="1853560632" fg:w="4012036"/><text x="96.8017%" y="543.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.16%)</title><rect x="96.7607%" y="549" width="0.1567%" height="15" fill="rgb(246,177,23)" fg:x="1857572668" fg:w="3009027"/><text x="97.0107%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="96.9175%" y="549" width="0.0522%" height="15" fill="rgb(230,62,27)" fg:x="1860581695" fg:w="1003009"/><text x="97.1675%" y="559.50"></text></g><g><title>core::intrinsics::unlikely (3,009,027 samples, 0.16%)</title><rect x="96.9697%" y="533" width="0.1567%" height="15" fill="rgb(216,154,8)" fg:x="1861584704" fg:w="3009027"/><text x="97.2197%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (42,126,378 samples, 2.19%)</title><rect x="95.8725%" y="597" width="2.1944%" height="15" fill="rgb(244,35,45)" fg:x="1840521515" fg:w="42126378"/><text x="96.1225%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (42,126,378 samples, 2.19%)</title><rect x="95.8725%" y="581" width="2.1944%" height="15" fill="rgb(251,115,12)" fg:x="1840521515" fg:w="42126378"/><text x="96.1225%" y="591.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (42,126,378 samples, 2.19%)</title><rect x="95.8725%" y="565" width="2.1944%" height="15" fill="rgb(240,54,50)" fg:x="1840521515" fg:w="42126378"/><text x="96.1225%" y="575.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (21,063,189 samples, 1.10%)</title><rect x="96.9697%" y="549" width="1.0972%" height="15" fill="rgb(233,84,52)" fg:x="1861584704" fg:w="21063189"/><text x="97.2197%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (18,054,162 samples, 0.94%)</title><rect x="97.1264%" y="533" width="0.9404%" height="15" fill="rgb(207,117,47)" fg:x="1864593731" fg:w="18054162"/><text x="97.3764%" y="543.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (18,054,162 samples, 0.94%)</title><rect x="97.1264%" y="517" width="0.9404%" height="15" fill="rgb(249,43,39)" fg:x="1864593731" fg:w="18054162"/><text x="97.3764%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (1,003,009 samples, 0.05%)</title><rect x="98.0669%" y="597" width="0.0522%" height="15" fill="rgb(209,38,44)" fg:x="1882647893" fg:w="1003009"/><text x="98.3169%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,003,009 samples, 0.05%)</title><rect x="98.0669%" y="581" width="0.0522%" height="15" fill="rgb(236,212,23)" fg:x="1882647893" fg:w="1003009"/><text x="98.3169%" y="591.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,003,009 samples, 0.05%)</title><rect x="98.0669%" y="565" width="0.0522%" height="15" fill="rgb(242,79,21)" fg:x="1882647893" fg:w="1003009"/><text x="98.3169%" y="575.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1,003,009 samples, 0.05%)</title><rect x="98.0669%" y="549" width="0.0522%" height="15" fill="rgb(211,96,35)" fg:x="1882647893" fg:w="1003009"/><text x="98.3169%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4,012,036 samples, 0.21%)</title><rect x="98.1191%" y="581" width="0.2090%" height="15" fill="rgb(253,215,40)" fg:x="1883650902" fg:w="4012036"/><text x="98.3691%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4,012,036 samples, 0.21%)</title><rect x="98.1191%" y="565" width="0.2090%" height="15" fill="rgb(211,81,21)" fg:x="1883650902" fg:w="4012036"/><text x="98.3691%" y="575.50"></text></g><g><title>core::ptr::write (4,012,036 samples, 0.21%)</title><rect x="98.1191%" y="549" width="0.2090%" height="15" fill="rgb(208,190,38)" fg:x="1883650902" fg:w="4012036"/><text x="98.3691%" y="559.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (6,018,054 samples, 0.31%)</title><rect x="98.3281%" y="565" width="0.3135%" height="15" fill="rgb(235,213,38)" fg:x="1887662938" fg:w="6018054"/><text x="98.5781%" y="575.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::loops_at (1,885,656,920 samples, 98.22%)</title><rect x="0.7315%" y="661" width="98.2236%" height="15" fill="rgb(237,122,38)" fg:x="14042126" fg:w="1885656920"/><text x="0.9815%" y="671.50">aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::loops_at</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (60,180,540 samples, 3.13%)</title><rect x="95.8203%" y="645" width="3.1348%" height="15" fill="rgb(244,218,35)" fg:x="1839518506" fg:w="60180540"/><text x="96.0703%" y="655.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (60,180,540 samples, 3.13%)</title><rect x="95.8203%" y="629" width="3.1348%" height="15" fill="rgb(240,68,47)" fg:x="1839518506" fg:w="60180540"/><text x="96.0703%" y="639.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (60,180,540 samples, 3.13%)</title><rect x="95.8203%" y="613" width="3.1348%" height="15" fill="rgb(210,16,53)" fg:x="1839518506" fg:w="60180540"/><text x="96.0703%" y="623.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (16,048,144 samples, 0.84%)</title><rect x="98.1191%" y="597" width="0.8359%" height="15" fill="rgb(235,124,12)" fg:x="1883650902" fg:w="16048144"/><text x="98.3691%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (12,036,108 samples, 0.63%)</title><rect x="98.3281%" y="581" width="0.6270%" height="15" fill="rgb(224,169,11)" fg:x="1887662938" fg:w="12036108"/><text x="98.5781%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (6,018,054 samples, 0.31%)</title><rect x="98.6416%" y="565" width="0.3135%" height="15" fill="rgb(250,166,2)" fg:x="1893680992" fg:w="6018054"/><text x="98.8916%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (6,018,054 samples, 0.31%)</title><rect x="98.6416%" y="549" width="0.3135%" height="15" fill="rgb(242,216,29)" fg:x="1893680992" fg:w="6018054"/><text x="98.8916%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6,018,054 samples, 0.31%)</title><rect x="98.6416%" y="533" width="0.3135%" height="15" fill="rgb(230,116,27)" fg:x="1893680992" fg:w="6018054"/><text x="98.8916%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;aoc_2024_megaproject::problems::day6::GuardPermutationsToCheckForLoopsIter&gt;&gt; (3,009,027 samples, 0.16%)</title><rect x="98.9551%" y="661" width="0.1567%" height="15" fill="rgb(228,99,48)" fg:x="1899699046" fg:w="3009027"/><text x="99.2051%" y="671.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.16%)</title><rect x="98.9551%" y="645" width="0.1567%" height="15" fill="rgb(253,11,6)" fg:x="1899699046" fg:w="3009027"/><text x="99.2051%" y="655.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (3,009,027 samples, 0.16%)</title><rect x="98.9551%" y="629" width="0.1567%" height="15" fill="rgb(247,143,39)" fg:x="1899699046" fg:w="3009027"/><text x="99.2051%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="837" width="99.3208%" height="15" fill="rgb(236,97,10)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="821" width="99.3208%" height="15" fill="rgb(233,208,19)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="805" width="99.3208%" height="15" fill="rgb(216,164,2)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="815.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="789" width="99.3208%" height="15" fill="rgb(220,129,5)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="799.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="773" width="99.3208%" height="15" fill="rgb(242,17,10)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="757" width="99.3208%" height="15" fill="rgb(242,107,0)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="741" width="99.3208%" height="15" fill="rgb(251,28,31)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="751.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="725" width="99.3208%" height="15" fill="rgb(233,223,10)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="735.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="709" width="99.3208%" height="15" fill="rgb(215,21,27)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="719.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="693" width="99.3208%" height="15" fill="rgb(232,23,21)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="703.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>aoc_2024_megaproject::problems::day6::part2_multithreaded::_{{closure}} (1,906,720,109 samples, 99.32%)</title><rect x="0.0522%" y="677" width="99.3208%" height="15" fill="rgb(244,5,23)" fg:x="1003009" fg:w="1906720109"/><text x="0.3022%" y="687.50">aoc_2024_megaproject::problems::day6::part2_multithreaded::_{{closure}}</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (5,015,045 samples, 0.26%)</title><rect x="99.1118%" y="661" width="0.2612%" height="15" fill="rgb(226,81,46)" fg:x="1902708073" fg:w="5015045"/><text x="99.3618%" y="671.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (5,015,045 samples, 0.26%)</title><rect x="99.1118%" y="645" width="0.2612%" height="15" fill="rgb(247,70,30)" fg:x="1902708073" fg:w="5015045"/><text x="99.3618%" y="655.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1,003,009 samples, 0.05%)</title><rect x="99.3208%" y="629" width="0.0522%" height="15" fill="rgb(212,68,19)" fg:x="1906720109" fg:w="1003009"/><text x="99.5708%" y="639.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (1,003,009 samples, 0.05%)</title><rect x="99.3208%" y="613" width="0.0522%" height="15" fill="rgb(240,187,13)" fg:x="1906720109" fg:w="1003009"/><text x="99.5708%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1,003,009 samples, 0.05%)</title><rect x="99.3208%" y="597" width="0.0522%" height="15" fill="rgb(223,113,26)" fg:x="1906720109" fg:w="1003009"/><text x="99.5708%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (1,003,009 samples, 0.05%)</title><rect x="99.3208%" y="581" width="0.0522%" height="15" fill="rgb(206,192,2)" fg:x="1906720109" fg:w="1003009"/><text x="99.5708%" y="591.50"></text></g><g><title>[libc.so.6] (1,908,726,127 samples, 99.43%)</title><rect x="0.0000%" y="885" width="99.4253%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="1908726127"/><text x="0.2500%" y="895.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,908,726,127 samples, 99.43%)</title><rect x="0.0000%" y="869" width="99.4253%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="1908726127"/><text x="0.2500%" y="879.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,907,723,118 samples, 99.37%)</title><rect x="0.0522%" y="853" width="99.3730%" height="15" fill="rgb(224,114,35)" fg:x="1003009" fg:w="1907723118"/><text x="0.3022%" y="863.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="837" width="0.0522%" height="15" fill="rgb(245,159,27)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="847.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="821" width="0.0522%" height="15" fill="rgb(245,172,44)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="831.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="805" width="0.0522%" height="15" fill="rgb(236,23,11)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="815.50"></text></g><g><title>__munmap (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="789" width="0.0522%" height="15" fill="rgb(205,117,38)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="799.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="773" width="0.0522%" height="15" fill="rgb(237,72,25)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="783.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="757" width="0.0522%" height="15" fill="rgb(244,70,9)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="767.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="741" width="0.0522%" height="15" fill="rgb(217,125,39)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="751.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="725" width="0.0522%" height="15" fill="rgb(235,36,10)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="735.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="709" width="0.0522%" height="15" fill="rgb(251,123,47)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="719.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="693" width="0.0522%" height="15" fill="rgb(221,13,13)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="703.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="677" width="0.0522%" height="15" fill="rgb(238,131,9)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="687.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3730%" y="661" width="0.0522%" height="15" fill="rgb(211,50,8)" fg:x="1907723118" fg:w="1003009"/><text x="99.6230%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.4253%" y="453" width="0.0522%" height="15" fill="rgb(245,182,24)" fg:x="1908726127" fg:w="1003009"/><text x="99.6753%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.05%)</title><rect x="99.4253%" y="437" width="0.0522%" height="15" fill="rgb(242,14,37)" fg:x="1908726127" fg:w="1003009"/><text x="99.6753%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.10%)</title><rect x="99.4253%" y="517" width="0.1045%" height="15" fill="rgb(246,228,12)" fg:x="1908726127" fg:w="2006018"/><text x="99.6753%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2,006,018 samples, 0.10%)</title><rect x="99.4253%" y="501" width="0.1045%" height="15" fill="rgb(213,55,15)" fg:x="1908726127" fg:w="2006018"/><text x="99.6753%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,006,018 samples, 0.10%)</title><rect x="99.4253%" y="485" width="0.1045%" height="15" fill="rgb(209,9,3)" fg:x="1908726127" fg:w="2006018"/><text x="99.6753%" y="495.50"></text></g><g><title>&lt;ascii::ascii_str::Chars as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.10%)</title><rect x="99.4253%" y="469" width="0.1045%" height="15" fill="rgb(230,59,30)" fg:x="1908726127" fg:w="2006018"/><text x="99.6753%" y="479.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (1,003,009 samples, 0.05%)</title><rect x="99.4775%" y="453" width="0.0522%" height="15" fill="rgb(209,121,21)" fg:x="1909729136" fg:w="1003009"/><text x="99.7275%" y="463.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::new (4,012,036 samples, 0.21%)</title><rect x="99.4253%" y="549" width="0.2090%" height="15" fill="rgb(220,109,13)" fg:x="1908726127" fg:w="4012036"/><text x="99.6753%" y="559.50"></text></g><g><title>&lt;ascii::ascii_string::AsciiString as core::iter::traits::collect::Extend&lt;A&gt;&gt;::extend (4,012,036 samples, 0.21%)</title><rect x="99.4253%" y="533" width="0.2090%" height="15" fill="rgb(232,18,1)" fg:x="1908726127" fg:w="4012036"/><text x="99.6753%" y="543.50"></text></g><g><title>ascii::ascii_string::AsciiString::push_str (2,006,018 samples, 0.10%)</title><rect x="99.5298%" y="517" width="0.1045%" height="15" fill="rgb(215,41,42)" fg:x="1910732145" fg:w="2006018"/><text x="99.7798%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,006,018 samples, 0.10%)</title><rect x="99.5298%" y="501" width="0.1045%" height="15" fill="rgb(224,123,36)" fg:x="1910732145" fg:w="2006018"/><text x="99.7798%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,006,018 samples, 0.10%)</title><rect x="99.5298%" y="485" width="0.1045%" height="15" fill="rgb(240,125,3)" fg:x="1910732145" fg:w="2006018"/><text x="99.7798%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,006,018 samples, 0.10%)</title><rect x="99.5298%" y="469" width="0.1045%" height="15" fill="rgb(205,98,50)" fg:x="1910732145" fg:w="2006018"/><text x="99.7798%" y="479.50"></text></g><g><title>&lt;ascii::ascii_str::Chars as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.5820%" y="453" width="0.0522%" height="15" fill="rgb(205,185,37)" fg:x="1911735154" fg:w="1003009"/><text x="99.8320%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.5820%" y="437" width="0.0522%" height="15" fill="rgb(238,207,15)" fg:x="1911735154" fg:w="1003009"/><text x="99.8320%" y="447.50"></text></g><g><title>std::fs::File::open (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="501" width="0.0522%" height="15" fill="rgb(213,199,42)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="511.50"></text></g><g><title>std::fs::OpenOptions::open (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="485" width="0.0522%" height="15" fill="rgb(235,201,11)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="495.50"></text></g><g><title>std::fs::OpenOptions::_open (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="469" width="0.0522%" height="15" fill="rgb(207,46,11)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="479.50"></text></g><g><title>std::sys::fs::unix::File::open (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="453" width="0.0522%" height="15" fill="rgb(241,35,35)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="463.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="437" width="0.0522%" height="15" fill="rgb(243,32,47)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="447.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="421" width="0.0522%" height="15" fill="rgb(247,202,23)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="431.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="405" width="0.0522%" height="15" fill="rgb(219,102,11)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="415.50"></text></g><g><title>std::sys::fs::unix::File::open::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="389" width="0.0522%" height="15" fill="rgb(243,110,44)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="399.50"></text></g><g><title>std::sys::fs::unix::File::open_c (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="373" width="0.0522%" height="15" fill="rgb(222,74,54)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="383.50"></text></g><g><title>std::sys::pal::unix::cvt_r (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="357" width="0.0522%" height="15" fill="rgb(216,99,12)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="367.50"></text></g><g><title>std::sys::fs::unix::File::open_c::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="341" width="0.0522%" height="15" fill="rgb(226,22,26)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="351.50"></text></g><g><title>open64 (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="325" width="0.0522%" height="15" fill="rgb(217,163,10)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="335.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="309" width="0.0522%" height="15" fill="rgb(213,25,53)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="319.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="293" width="0.0522%" height="15" fill="rgb(252,105,26)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="303.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="277" width="0.0522%" height="15" fill="rgb(220,39,43)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="287.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="261" width="0.0522%" height="15" fill="rgb(229,68,48)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="271.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="245" width="0.0522%" height="15" fill="rgb(252,8,32)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="229" width="0.0522%" height="15" fill="rgb(223,20,43)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="213" width="0.0522%" height="15" fill="rgb(229,81,49)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="197" width="0.0522%" height="15" fill="rgb(236,28,36)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="181" width="0.0522%" height="15" fill="rgb(249,185,26)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="165" width="0.0522%" height="15" fill="rgb(249,174,33)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="149" width="0.0522%" height="15" fill="rgb(233,201,37)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6343%" y="133" width="0.0522%" height="15" fill="rgb(221,78,26)" fg:x="1912738163" fg:w="1003009"/><text x="99.8843%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="485" width="0.0522%" height="15" fill="rgb(250,127,30)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="469" width="0.0522%" height="15" fill="rgb(230,49,44)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="453" width="0.0522%" height="15" fill="rgb(229,67,23)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="463.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="437" width="0.0522%" height="15" fill="rgb(249,83,47)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="447.50"></text></g><g><title>std::fs::buffer_capacity_required (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="421" width="0.0522%" height="15" fill="rgb(215,43,3)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="431.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::stream_position (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="405" width="0.0522%" height="15" fill="rgb(238,154,13)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="415.50"></text></g><g><title>std::sys::fs::unix::File::tell (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="389" width="0.0522%" height="15" fill="rgb(219,56,2)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="399.50"></text></g><g><title>std::sys::fs::unix::File::seek (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="373" width="0.0522%" height="15" fill="rgb(233,0,4)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="383.50"></text></g><g><title>llseek (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="357" width="0.0522%" height="15" fill="rgb(235,30,7)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="367.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="341" width="0.0522%" height="15" fill="rgb(250,79,13)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="351.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="325" width="0.0522%" height="15" fill="rgb(211,146,34)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="335.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="309" width="0.0522%" height="15" fill="rgb(228,22,38)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="319.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="293" width="0.0522%" height="15" fill="rgb(235,168,5)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="303.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="277" width="0.0522%" height="15" fill="rgb(221,155,16)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="287.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.6865%" y="261" width="0.0522%" height="15" fill="rgb(215,215,53)" fg:x="1913741172" fg:w="1003009"/><text x="99.9365%" y="271.50"></text></g><g><title>std::thread::available_parallelism (3,009,027 samples, 0.16%)</title><rect x="99.6343%" y="549" width="0.1567%" height="15" fill="rgb(223,4,10)" fg:x="1912738163" fg:w="3009027"/><text x="99.8843%" y="559.50"></text></g><g><title>std::sys::pal::unix::thread::available_parallelism (3,009,027 samples, 0.16%)</title><rect x="99.6343%" y="533" width="0.1567%" height="15" fill="rgb(234,103,6)" fg:x="1912738163" fg:w="3009027"/><text x="99.8843%" y="543.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota (3,009,027 samples, 0.16%)</title><rect x="99.6343%" y="517" width="0.1567%" height="15" fill="rgb(227,97,0)" fg:x="1912738163" fg:w="3009027"/><text x="99.8843%" y="527.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2 (2,006,018 samples, 0.10%)</title><rect x="99.6865%" y="501" width="0.1045%" height="15" fill="rgb(234,150,53)" fg:x="1913741172" fg:w="2006018"/><text x="99.9365%" y="511.50"></text></g><g><title>std::fs::exists (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="485" width="0.0522%" height="15" fill="rgb(228,201,54)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="495.50"></text></g><g><title>std::sys::fs::exists (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="469" width="0.0522%" height="15" fill="rgb(222,22,37)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="479.50"></text></g><g><title>std::sys::fs::common::exists (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="453" width="0.0522%" height="15" fill="rgb(237,53,32)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="463.50"></text></g><g><title>std::fs::metadata (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="437" width="0.0522%" height="15" fill="rgb(233,25,53)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="447.50"></text></g><g><title>std::sys::fs::metadata (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="421" width="0.0522%" height="15" fill="rgb(210,40,34)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="431.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="405" width="0.0522%" height="15" fill="rgb(241,220,44)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="415.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="389" width="0.0522%" height="15" fill="rgb(235,28,35)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="399.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="373" width="0.0522%" height="15" fill="rgb(210,56,17)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="383.50"></text></g><g><title>core::ops::function::Fn::call (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="357" width="0.0522%" height="15" fill="rgb(224,130,29)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="367.50"></text></g><g><title>std::sys::fs::unix::stat (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="341" width="0.0522%" height="15" fill="rgb(235,212,8)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="351.50"></text></g><g><title>std::sys::fs::unix::try_statx (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="325" width="0.0522%" height="15" fill="rgb(223,33,50)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="335.50"></text></g><g><title>std::sys::fs::unix::try_statx::statx (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="309" width="0.0522%" height="15" fill="rgb(219,149,13)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="319.50"></text></g><g><title>statx (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="293" width="0.0522%" height="15" fill="rgb(250,156,29)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="303.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="277" width="0.0522%" height="15" fill="rgb(216,193,19)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="287.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="261" width="0.0522%" height="15" fill="rgb(216,135,14)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="271.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="245" width="0.0522%" height="15" fill="rgb(241,47,5)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="229" width="0.0522%" height="15" fill="rgb(233,42,35)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="213" width="0.0522%" height="15" fill="rgb(231,13,6)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="197" width="0.0522%" height="15" fill="rgb(207,181,40)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="181" width="0.0522%" height="15" fill="rgb(254,173,49)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="165" width="0.0522%" height="15" fill="rgb(221,1,38)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="149" width="0.0522%" height="15" fill="rgb(206,124,46)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="133" width="0.0522%" height="15" fill="rgb(249,21,11)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="117" width="0.0522%" height="15" fill="rgb(222,201,40)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="101" width="0.0522%" height="15" fill="rgb(235,61,29)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="85" width="0.0522%" height="15" fill="rgb(219,207,3)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="69" width="0.0522%" height="15" fill="rgb(222,56,46)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="53" width="0.0522%" height="15" fill="rgb(239,76,54)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.7388%" y="37" width="0.0522%" height="15" fill="rgb(231,124,27)" fg:x="1914744181" fg:w="1003009"/><text x="99.9888%" y="47.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (10,030,090 samples, 0.52%)</title><rect x="99.4253%" y="597" width="0.5225%" height="15" fill="rgb(249,195,6)" fg:x="1908726127" fg:w="10030090"/><text x="99.6753%" y="607.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day6::Day6 as aoc_2024_megaproject::Day&gt;::part2_multithreaded (10,030,090 samples, 0.52%)</title><rect x="99.4253%" y="581" width="0.5225%" height="15" fill="rgb(237,174,47)" fg:x="1908726127" fg:w="10030090"/><text x="99.6753%" y="591.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::part2_multithreaded (10,030,090 samples, 0.52%)</title><rect x="99.4253%" y="565" width="0.5225%" height="15" fill="rgb(206,201,31)" fg:x="1908726127" fg:w="10030090"/><text x="99.6753%" y="575.50"></text></g><g><title>std::thread::spawn (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="549" width="0.1567%" height="15" fill="rgb(231,57,52)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="559.50"></text></g><g><title>std::thread::Builder::spawn (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="533" width="0.1567%" height="15" fill="rgb(248,177,22)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="543.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="517" width="0.1567%" height="15" fill="rgb(215,211,37)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="527.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="501" width="0.1567%" height="15" fill="rgb(241,128,51)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="485" width="0.1567%" height="15" fill="rgb(227,165,31)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="495.50"></text></g><g><title>pthread_create (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="469" width="0.1567%" height="15" fill="rgb(228,167,24)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="479.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="453" width="0.1567%" height="15" fill="rgb(228,143,12)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="463.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="437" width="0.1567%" height="15" fill="rgb(249,149,8)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="447.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="421" width="0.1567%" height="15" fill="rgb(243,35,44)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="431.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="405" width="0.1567%" height="15" fill="rgb(246,89,9)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="415.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="389" width="0.1567%" height="15" fill="rgb(233,213,13)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="399.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="373" width="0.1567%" height="15" fill="rgb(233,141,41)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="383.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="357" width="0.1567%" height="15" fill="rgb(239,167,4)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="367.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="341" width="0.1567%" height="15" fill="rgb(209,217,16)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="351.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7910%" y="325" width="0.1567%" height="15" fill="rgb(219,88,35)" fg:x="1915747190" fg:w="3009027"/><text x="100.0410%" y="335.50"></text></g><g><title>[unknown] (2,006,018 samples, 0.10%)</title><rect x="99.8433%" y="309" width="0.1045%" height="15" fill="rgb(220,193,23)" fg:x="1916750199" fg:w="2006018"/><text x="100.0933%" y="319.50"></text></g><g><title>[unknown] (2,006,018 samples, 0.10%)</title><rect x="99.8433%" y="293" width="0.1045%" height="15" fill="rgb(230,90,52)" fg:x="1916750199" fg:w="2006018"/><text x="100.0933%" y="303.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="277" width="0.0522%" height="15" fill="rgb(252,106,19)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="287.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="261" width="0.0522%" height="15" fill="rgb(206,74,20)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="271.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="245" width="0.0522%" height="15" fill="rgb(230,138,44)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="229" width="0.0522%" height="15" fill="rgb(235,182,43)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="213" width="0.0522%" height="15" fill="rgb(242,16,51)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="197" width="0.0522%" height="15" fill="rgb(248,9,4)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="181" width="0.0522%" height="15" fill="rgb(210,31,22)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.8955%" y="165" width="0.0522%" height="15" fill="rgb(239,54,39)" fg:x="1917753208" fg:w="1003009"/><text x="100.1455%" y="175.50"></text></g><g><title>all (1,919,759,226 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="1919759226"/><text x="0.2500%" y="927.50"></text></g><g><title>aoc-2024-megapr (1,919,759,226 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="1919759226"/><text x="0.2500%" y="911.50">aoc-2024-megapr</text></g><g><title>_start (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="885" width="0.5747%" height="15" fill="rgb(213,46,41)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="895.50"></text></g><g><title>__libc_start_main (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="869" width="0.5747%" height="15" fill="rgb(215,133,35)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="879.50"></text></g><g><title>[libc.so.6] (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="853" width="0.5747%" height="15" fill="rgb(213,28,5)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="863.50"></text></g><g><title>main (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="837" width="0.5747%" height="15" fill="rgb(215,77,49)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="847.50"></text></g><g><title>std::rt::lang_start_internal (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="821" width="0.5747%" height="15" fill="rgb(248,100,22)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="831.50"></text></g><g><title>std::panic::catch_unwind (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="805" width="0.5747%" height="15" fill="rgb(208,67,9)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="815.50"></text></g><g><title>std::panicking::try (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="789" width="0.5747%" height="15" fill="rgb(219,133,21)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="799.50"></text></g><g><title>std::panicking::try::do_call (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="773" width="0.5747%" height="15" fill="rgb(246,46,29)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="783.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="757" width="0.5747%" height="15" fill="rgb(246,185,52)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="767.50"></text></g><g><title>std::panic::catch_unwind (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="741" width="0.5747%" height="15" fill="rgb(252,136,11)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="751.50"></text></g><g><title>std::panicking::try (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="725" width="0.5747%" height="15" fill="rgb(219,138,53)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="735.50"></text></g><g><title>std::panicking::try::do_call (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="709" width="0.5747%" height="15" fill="rgb(211,51,23)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="719.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="693" width="0.5747%" height="15" fill="rgb(247,221,28)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="703.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="677" width="0.5747%" height="15" fill="rgb(251,222,45)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="687.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="661" width="0.5747%" height="15" fill="rgb(217,162,53)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="645" width="0.5747%" height="15" fill="rgb(229,93,14)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="655.50"></text></g><g><title>aoc_2024_megaproject::main (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="629" width="0.5747%" height="15" fill="rgb(209,67,49)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="639.50"></text></g><g><title>aoc_2024_megaproject::repeat_part (11,033,099 samples, 0.57%)</title><rect x="99.4253%" y="613" width="0.5747%" height="15" fill="rgb(213,87,29)" fg:x="1908726127" fg:w="11033099"/><text x="99.6753%" y="623.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="597" width="0.0522%" height="15" fill="rgb(205,151,52)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="607.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="581" width="0.0522%" height="15" fill="rgb(253,215,39)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="591.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="565" width="0.0522%" height="15" fill="rgb(221,220,41)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="549" width="0.0522%" height="15" fill="rgb(218,133,21)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="533" width="0.0522%" height="15" fill="rgb(221,193,43)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="517" width="0.0522%" height="15" fill="rgb(240,128,52)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="527.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="501" width="0.0522%" height="15" fill="rgb(253,114,12)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="511.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="485" width="0.0522%" height="15" fill="rgb(215,223,47)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="469" width="0.0522%" height="15" fill="rgb(248,225,23)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="453" width="0.0522%" height="15" fill="rgb(250,108,0)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="437" width="0.0522%" height="15" fill="rgb(228,208,7)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="421" width="0.0522%" height="15" fill="rgb(244,45,10)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="405" width="0.0522%" height="15" fill="rgb(207,125,25)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="389" width="0.0522%" height="15" fill="rgb(210,195,18)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="373" width="0.0522%" height="15" fill="rgb(249,80,12)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="357" width="0.0522%" height="15" fill="rgb(221,65,9)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="341" width="0.0522%" height="15" fill="rgb(235,49,36)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="325" width="0.0522%" height="15" fill="rgb(225,32,20)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="309" width="0.0522%" height="15" fill="rgb(215,141,46)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="293" width="0.0522%" height="15" fill="rgb(250,160,47)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="277" width="0.0522%" height="15" fill="rgb(216,222,40)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="261" width="0.0522%" height="15" fill="rgb(234,217,39)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="245" width="0.0522%" height="15" fill="rgb(207,178,40)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="229" width="0.0522%" height="15" fill="rgb(221,136,13)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="213" width="0.0522%" height="15" fill="rgb(249,199,10)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="197" width="0.0522%" height="15" fill="rgb(249,222,13)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="181" width="0.0522%" height="15" fill="rgb(244,185,38)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="165" width="0.0522%" height="15" fill="rgb(236,202,9)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="149" width="0.0522%" height="15" fill="rgb(250,229,37)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="159.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="133" width="0.0522%" height="15" fill="rgb(206,174,23)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="143.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="117" width="0.0522%" height="15" fill="rgb(211,33,43)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="101" width="0.0522%" height="15" fill="rgb(245,58,50)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="111.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="85" width="0.0522%" height="15" fill="rgb(244,68,36)" fg:x="1918756217" fg:w="1003009"/><text x="100.1978%" y="95.50"></text></g></svg></svg>