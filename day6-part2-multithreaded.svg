<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="1920762235"><g><title>&lt;aoc_2024_megaproject::problems::day6::GuardPermutationsToCheckForLoopsIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.42%)</title><rect x="0.2089%" y="469" width="0.4178%" height="15" fill="rgb(227,0,7)" fg:x="4012036" fg:w="8024072"/><text x="0.4589%" y="479.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::next_guard (8,024,072 samples, 0.42%)</title><rect x="0.2089%" y="453" width="0.4178%" height="15" fill="rgb(217,0,24)" fg:x="4012036" fg:w="8024072"/><text x="0.4589%" y="463.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::cmp::PartialEq&gt;::eq (194,583,746 samples, 10.13%)</title><rect x="8.6684%" y="453" width="10.1305%" height="15" fill="rgb(221,193,54)" fg:x="166499494" fg:w="194583746"/><text x="8.9184%" y="463.50">&lt;aoc_2024_megap..</text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::hashmap_key_from_state (19,057,171 samples, 0.99%)</title><rect x="18.7990%" y="453" width="0.9922%" height="15" fill="rgb(248,212,6)" fg:x="361083240" fg:w="19057171"/><text x="19.0490%" y="463.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index_usize (18,054,162 samples, 0.94%)</title><rect x="18.8512%" y="437" width="0.9399%" height="15" fill="rgb(208,68,35)" fg:x="362086249" fg:w="18054162"/><text x="19.1012%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (136,409,224 samples, 7.10%)</title><rect x="48.9817%" y="437" width="7.1018%" height="15" fill="rgb(232,128,0)" fg:x="940822442" fg:w="136409224"/><text x="49.2317%" y="447.50">&lt;core::opt..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::cmp::PartialEq&gt;::eq (101,303,909 samples, 5.27%)</title><rect x="50.8094%" y="421" width="5.2742%" height="15" fill="rgb(207,160,47)" fg:x="975927757" fg:w="101303909"/><text x="51.0594%" y="431.50">&lt;aoc_2..</text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index_usize (169,508,521 samples, 8.83%)</title><rect x="56.0836%" y="421" width="8.8251%" height="15" fill="rgb(228,23,34)" fg:x="1077231666" fg:w="169508521"/><text x="56.3336%" y="431.50">aoc_2024_meg..</text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index (335,005,006 samples, 17.44%)</title><rect x="56.0836%" y="437" width="17.4413%" height="15" fill="rgb(218,30,26)" fg:x="1077231666" fg:w="335005006"/><text x="56.3336%" y="447.50">aoc_2024_megaproject::probl..</text></g><g><title>core::option::Option&lt;T&gt;::map (165,496,485 samples, 8.62%)</title><rect x="64.9086%" y="421" width="8.6162%" height="15" fill="rgb(220,122,19)" fg:x="1246740187" fg:w="165496485"/><text x="65.1586%" y="431.50">core::option..</text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::index::_{{closure}} (165,496,485 samples, 8.62%)</title><rect x="64.9086%" y="405" width="8.6162%" height="15" fill="rgb(250,228,42)" fg:x="1246740187" fg:w="165496485"/><text x="65.1586%" y="415.50">aoc_2024_meg..</text></g><g><title>&lt;ascii::ascii_string::AsciiString as core::ops::index::Index&lt;T&gt;&gt;::index (165,496,485 samples, 8.62%)</title><rect x="64.9086%" y="389" width="8.6162%" height="15" fill="rgb(240,193,28)" fg:x="1246740187" fg:w="165496485"/><text x="65.1586%" y="399.50">&lt;ascii::asci..</text></g><g><title>&lt;ascii::ascii_str::AsciiStr as core::ops::index::Index&lt;usize&gt;&gt;::index (165,496,485 samples, 8.62%)</title><rect x="64.9086%" y="373" width="8.6162%" height="15" fill="rgb(216,20,37)" fg:x="1246740187" fg:w="165496485"/><text x="65.1586%" y="383.50">&lt;ascii::asci..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::ops::arith::Add&gt;::add (83,249,747 samples, 4.33%)</title><rect x="75.8225%" y="421" width="4.3342%" height="15" fill="rgb(206,188,39)" fg:x="1456369068" fg:w="83249747"/><text x="76.0725%" y="431.50">&lt;aoc_..</text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::in_front_postion (230,692,070 samples, 12.01%)</title><rect x="73.5248%" y="437" width="12.0104%" height="15" fill="rgb(217,207,13)" fg:x="1412236672" fg:w="230692070"/><text x="73.7748%" y="447.50">aoc_2024_megaproje..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Ucoord as core::ops::arith::Sub&gt;::sub (103,309,927 samples, 5.38%)</title><rect x="80.1567%" y="421" width="5.3786%" height="15" fill="rgb(231,73,38)" fg:x="1539618815" fg:w="103309927"/><text x="80.4067%" y="431.50">&lt;aoc_20..</text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::next_guard (1,385,155,429 samples, 72.11%)</title><rect x="19.7911%" y="453" width="72.1149%" height="15" fill="rgb(225,20,46)" fg:x="380140411" fg:w="1385155429"/><text x="20.0411%" y="463.50">aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::Ascii..</text></g><g><title>aoc_2024_megaproject::problems::day6::Direction::rotate_90cw (122,367,098 samples, 6.37%)</title><rect x="85.5352%" y="437" width="6.3708%" height="15" fill="rgb(210,31,41)" fg:x="1642928742" fg:w="122367098"/><text x="85.7852%" y="447.50">aoc_2024..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="453" width="0.2611%" height="15" fill="rgb(221,200,47)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="437" width="0.2611%" height="15" fill="rgb(226,26,5)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="421" width="0.2611%" height="15" fill="rgb(249,33,26)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="405" width="0.2611%" height="15" fill="rgb(235,183,28)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::RawTable&lt;(aoc_2024_megaproject::problems::commons::u24,())&gt;,hashbrown::raw::RawTable&lt;(aoc_2024_megaproject::problems::commons::u24,())&gt;::clear::{{closure}}&gt;&gt; (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="389" width="0.2611%" height="15" fill="rgb(221,5,38)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="399.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="373" width="0.2611%" height="15" fill="rgb(247,18,42)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear::_{{closure}} (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="357" width="0.2611%" height="15" fill="rgb(241,131,45)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear_no_drop (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="341" width="0.2611%" height="15" fill="rgb(249,31,29)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::clear_no_drop (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="325" width="0.2611%" height="15" fill="rgb(225,111,53)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="335.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="309" width="0.2611%" height="15" fill="rgb(238,160,17)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="319.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="293" width="0.2611%" height="15" fill="rgb(214,148,48)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="277" width="0.2611%" height="15" fill="rgb(232,36,49)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="287.50"></text></g><g><title>core::intrinsics::write_bytes (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="261" width="0.2611%" height="15" fill="rgb(209,103,24)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="271.50"></text></g><g><title>[libc.so.6] (5,015,045 samples, 0.26%)</title><rect x="91.9060%" y="245" width="0.2611%" height="15" fill="rgb(229,88,8)" fg:x="1765295840" fg:w="5015045"/><text x="92.1560%" y="255.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (15,045,135 samples, 0.78%)</title><rect x="92.3760%" y="341" width="0.7833%" height="15" fill="rgb(213,181,19)" fg:x="1774322921" fg:w="15045135"/><text x="92.6260%" y="351.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (15,045,135 samples, 0.78%)</title><rect x="92.3760%" y="325" width="0.7833%" height="15" fill="rgb(254,191,54)" fg:x="1774322921" fg:w="15045135"/><text x="92.6260%" y="335.50"></text></g><g><title>core::intrinsics::likely (1,003,009 samples, 0.05%)</title><rect x="93.1593%" y="341" width="0.0522%" height="15" fill="rgb(241,83,37)" fg:x="1789368056" fg:w="1003009"/><text x="93.4093%" y="351.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (5,015,045 samples, 0.26%)</title><rect x="93.2115%" y="341" width="0.2611%" height="15" fill="rgb(233,36,39)" fg:x="1790371065" fg:w="5015045"/><text x="93.4615%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5,015,045 samples, 0.26%)</title><rect x="93.2115%" y="325" width="0.2611%" height="15" fill="rgb(226,3,54)" fg:x="1790371065" fg:w="5015045"/><text x="93.4615%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.26%)</title><rect x="93.2115%" y="309" width="0.2611%" height="15" fill="rgb(245,192,40)" fg:x="1790371065" fg:w="5015045"/><text x="93.4615%" y="319.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.05%)</title><rect x="93.4726%" y="341" width="0.0522%" height="15" fill="rgb(238,167,29)" fg:x="1795386110" fg:w="1003009"/><text x="93.7226%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.05%)</title><rect x="93.4726%" y="325" width="0.0522%" height="15" fill="rgb(232,182,51)" fg:x="1795386110" fg:w="1003009"/><text x="93.7226%" y="335.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,003,009 samples, 0.05%)</title><rect x="93.5248%" y="341" width="0.0522%" height="15" fill="rgb(231,60,39)" fg:x="1796389119" fg:w="1003009"/><text x="93.7748%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (64,192,576 samples, 3.34%)</title><rect x="92.1671%" y="453" width="3.3420%" height="15" fill="rgb(208,69,12)" fg:x="1770310885" fg:w="64192576"/><text x="92.4171%" y="463.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (64,192,576 samples, 3.34%)</title><rect x="92.1671%" y="437" width="3.3420%" height="15" fill="rgb(235,93,37)" fg:x="1770310885" fg:w="64192576"/><text x="92.4171%" y="447.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (64,192,576 samples, 3.34%)</title><rect x="92.1671%" y="421" width="3.3420%" height="15" fill="rgb(213,116,39)" fg:x="1770310885" fg:w="64192576"/><text x="92.4171%" y="431.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (64,192,576 samples, 3.34%)</title><rect x="92.1671%" y="405" width="3.3420%" height="15" fill="rgb(222,207,29)" fg:x="1770310885" fg:w="64192576"/><text x="92.4171%" y="415.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (60,180,540 samples, 3.13%)</title><rect x="92.3760%" y="389" width="3.1332%" height="15" fill="rgb(206,96,30)" fg:x="1774322921" fg:w="60180540"/><text x="92.6260%" y="399.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (60,180,540 samples, 3.13%)</title><rect x="92.3760%" y="373" width="3.1332%" height="15" fill="rgb(218,138,4)" fg:x="1774322921" fg:w="60180540"/><text x="92.6260%" y="383.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (60,180,540 samples, 3.13%)</title><rect x="92.3760%" y="357" width="3.1332%" height="15" fill="rgb(250,191,14)" fg:x="1774322921" fg:w="60180540"/><text x="92.6260%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (37,111,333 samples, 1.93%)</title><rect x="93.5770%" y="341" width="1.9321%" height="15" fill="rgb(239,60,40)" fg:x="1797392128" fg:w="37111333"/><text x="93.8270%" y="351.50">h..</text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.10%)</title><rect x="95.9269%" y="357" width="0.1044%" height="15" fill="rgb(206,27,48)" fg:x="1842527533" fg:w="2006018"/><text x="96.1769%" y="367.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (2,006,018 samples, 0.10%)</title><rect x="95.9269%" y="341" width="0.1044%" height="15" fill="rgb(225,35,8)" fg:x="1842527533" fg:w="2006018"/><text x="96.1769%" y="351.50"></text></g><g><title>core::intrinsics::likely (5,015,045 samples, 0.26%)</title><rect x="96.0313%" y="357" width="0.2611%" height="15" fill="rgb(250,213,24)" fg:x="1844533551" fg:w="5015045"/><text x="96.2813%" y="367.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (6,018,054 samples, 0.31%)</title><rect x="96.2924%" y="357" width="0.3133%" height="15" fill="rgb(247,123,22)" fg:x="1849548596" fg:w="6018054"/><text x="96.5424%" y="367.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (6,018,054 samples, 0.31%)</title><rect x="96.2924%" y="341" width="0.3133%" height="15" fill="rgb(231,138,38)" fg:x="1849548596" fg:w="6018054"/><text x="96.5424%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,018,054 samples, 0.31%)</title><rect x="96.2924%" y="325" width="0.3133%" height="15" fill="rgb(231,145,46)" fg:x="1849548596" fg:w="6018054"/><text x="96.5424%" y="335.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.10%)</title><rect x="96.6057%" y="357" width="0.1044%" height="15" fill="rgb(251,118,11)" fg:x="1855566650" fg:w="2006018"/><text x="96.8557%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.10%)</title><rect x="96.6057%" y="341" width="0.1044%" height="15" fill="rgb(217,147,25)" fg:x="1855566650" fg:w="2006018"/><text x="96.8557%" y="351.50"></text></g><g><title>hashbrown::control::tag::Tag::full (5,015,045 samples, 0.26%)</title><rect x="96.7102%" y="357" width="0.2611%" height="15" fill="rgb(247,81,37)" fg:x="1857572668" fg:w="5015045"/><text x="96.9602%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,003,009 samples, 0.05%)</title><rect x="96.9713%" y="357" width="0.0522%" height="15" fill="rgb(209,12,38)" fg:x="1862587713" fg:w="1003009"/><text x="97.2213%" y="367.50"></text></g><g><title>core::intrinsics::unlikely (3,009,027 samples, 0.16%)</title><rect x="97.0235%" y="341" width="0.1567%" height="15" fill="rgb(227,1,9)" fg:x="1863590722" fg:w="3009027"/><text x="97.2735%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (53,159,477 samples, 2.77%)</title><rect x="95.5091%" y="405" width="2.7676%" height="15" fill="rgb(248,47,43)" fg:x="1834503461" fg:w="53159477"/><text x="95.7591%" y="415.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (53,159,477 samples, 2.77%)</title><rect x="95.5091%" y="389" width="2.7676%" height="15" fill="rgb(221,10,30)" fg:x="1834503461" fg:w="53159477"/><text x="95.7591%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (53,159,477 samples, 2.77%)</title><rect x="95.5091%" y="373" width="2.7676%" height="15" fill="rgb(210,229,1)" fg:x="1834503461" fg:w="53159477"/><text x="95.7591%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (24,072,216 samples, 1.25%)</title><rect x="97.0235%" y="357" width="1.2533%" height="15" fill="rgb(222,148,37)" fg:x="1863590722" fg:w="24072216"/><text x="97.2735%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (21,063,189 samples, 1.10%)</title><rect x="97.1802%" y="341" width="1.0966%" height="15" fill="rgb(234,67,33)" fg:x="1866599749" fg:w="21063189"/><text x="97.4302%" y="351.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (21,063,189 samples, 1.10%)</title><rect x="97.1802%" y="325" width="1.0966%" height="15" fill="rgb(247,98,35)" fg:x="1866599749" fg:w="21063189"/><text x="97.4302%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8,024,072 samples, 0.42%)</title><rect x="98.2768%" y="389" width="0.4178%" height="15" fill="rgb(247,138,52)" fg:x="1887662938" fg:w="8024072"/><text x="98.5268%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8,024,072 samples, 0.42%)</title><rect x="98.2768%" y="373" width="0.4178%" height="15" fill="rgb(213,79,30)" fg:x="1887662938" fg:w="8024072"/><text x="98.5268%" y="383.50"></text></g><g><title>core::ptr::write (8,024,072 samples, 0.42%)</title><rect x="98.2768%" y="357" width="0.4178%" height="15" fill="rgb(246,177,23)" fg:x="1887662938" fg:w="8024072"/><text x="98.5268%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,003,009 samples, 0.05%)</title><rect x="98.6945%" y="389" width="0.0522%" height="15" fill="rgb(230,62,27)" fg:x="1895687010" fg:w="1003009"/><text x="98.9445%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,003,009 samples, 0.05%)</title><rect x="98.6945%" y="373" width="0.0522%" height="15" fill="rgb(216,154,8)" fg:x="1895687010" fg:w="1003009"/><text x="98.9445%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,003,009 samples, 0.05%)</title><rect x="98.6945%" y="357" width="0.0522%" height="15" fill="rgb(244,35,45)" fg:x="1895687010" fg:w="1003009"/><text x="98.9445%" y="367.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (2,006,018 samples, 0.10%)</title><rect x="98.7467%" y="373" width="0.1044%" height="15" fill="rgb(251,115,12)" fg:x="1896690019" fg:w="2006018"/><text x="98.9967%" y="383.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::loops_at (1,890,671,965 samples, 98.43%)</title><rect x="0.6266%" y="469" width="98.4334%" height="15" fill="rgb(240,54,50)" fg:x="12036108" fg:w="1890671965"/><text x="0.8766%" y="479.50">aoc_2024_megaproject::problems::day6::&lt;impl aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;&gt;::loops_at</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (68,204,612 samples, 3.55%)</title><rect x="95.5091%" y="453" width="3.5509%" height="15" fill="rgb(233,84,52)" fg:x="1834503461" fg:w="68204612"/><text x="95.7591%" y="463.50">std:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (68,204,612 samples, 3.55%)</title><rect x="95.5091%" y="437" width="3.5509%" height="15" fill="rgb(207,117,47)" fg:x="1834503461" fg:w="68204612"/><text x="95.7591%" y="447.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68,204,612 samples, 3.55%)</title><rect x="95.5091%" y="421" width="3.5509%" height="15" fill="rgb(249,43,39)" fg:x="1834503461" fg:w="68204612"/><text x="95.7591%" y="431.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (15,045,135 samples, 0.78%)</title><rect x="98.2768%" y="405" width="0.7833%" height="15" fill="rgb(209,38,44)" fg:x="1887662938" fg:w="15045135"/><text x="98.5268%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (6,018,054 samples, 0.31%)</title><rect x="98.7467%" y="389" width="0.3133%" height="15" fill="rgb(236,212,23)" fg:x="1896690019" fg:w="6018054"/><text x="98.9967%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (4,012,036 samples, 0.21%)</title><rect x="98.8512%" y="373" width="0.2089%" height="15" fill="rgb(242,79,21)" fg:x="1898696037" fg:w="4012036"/><text x="99.1012%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (4,012,036 samples, 0.21%)</title><rect x="98.8512%" y="357" width="0.2089%" height="15" fill="rgb(211,96,35)" fg:x="1898696037" fg:w="4012036"/><text x="99.1012%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (4,012,036 samples, 0.21%)</title><rect x="98.8512%" y="341" width="0.2089%" height="15" fill="rgb(253,215,40)" fg:x="1898696037" fg:w="4012036"/><text x="99.1012%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;aoc_2024_megaproject::problems::day6::GuardPermutationsToCheckForLoopsIter&gt;&gt; (2,006,018 samples, 0.10%)</title><rect x="99.0601%" y="469" width="0.1044%" height="15" fill="rgb(211,81,21)" fg:x="1902708073" fg:w="2006018"/><text x="99.3101%" y="479.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.10%)</title><rect x="99.0601%" y="453" width="0.1044%" height="15" fill="rgb(208,190,38)" fg:x="1902708073" fg:w="2006018"/><text x="99.3101%" y="463.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (2,006,018 samples, 0.10%)</title><rect x="99.0601%" y="437" width="0.1044%" height="15" fill="rgb(235,213,38)" fg:x="1902708073" fg:w="2006018"/><text x="99.3101%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1,003,009 samples, 0.05%)</title><rect x="99.1123%" y="421" width="0.0522%" height="15" fill="rgb(237,122,38)" fg:x="1903711082" fg:w="1003009"/><text x="99.3623%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (1,003,009 samples, 0.05%)</title><rect x="99.1123%" y="405" width="0.0522%" height="15" fill="rgb(244,218,35)" fg:x="1903711082" fg:w="1003009"/><text x="99.3623%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="645" width="99.3211%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="629" width="99.3211%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="613" width="99.3211%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="597" width="99.3211%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="607.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="581" width="99.3211%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="565" width="99.3211%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="549" width="99.3211%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="559.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="533" width="99.3211%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="543.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="517" width="99.3211%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="527.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="501" width="99.3211%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="511.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>aoc_2024_megaproject::problems::day6::part2_multithreaded::_{{closure}} (1,907,723,118 samples, 99.32%)</title><rect x="0.0000%" y="485" width="99.3211%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="1907723118"/><text x="0.2500%" y="495.50">aoc_2024_megaproject::problems::day6::part2_multithreaded::_{{closure}}</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (3,009,027 samples, 0.16%)</title><rect x="99.1645%" y="469" width="0.1567%" height="15" fill="rgb(233,208,19)" fg:x="1904714091" fg:w="3009027"/><text x="99.4145%" y="479.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (3,009,027 samples, 0.16%)</title><rect x="99.1645%" y="453" width="0.1567%" height="15" fill="rgb(216,164,2)" fg:x="1904714091" fg:w="3009027"/><text x="99.4145%" y="463.50"></text></g><g><title>[libc.so.6] (1,908,726,127 samples, 99.37%)</title><rect x="0.0000%" y="693" width="99.3734%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="1908726127"/><text x="0.2500%" y="703.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,908,726,127 samples, 99.37%)</title><rect x="0.0000%" y="677" width="99.3734%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="1908726127"/><text x="0.2500%" y="687.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,908,726,127 samples, 99.37%)</title><rect x="0.0000%" y="661" width="99.3734%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="1908726127"/><text x="0.2500%" y="671.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="645" width="0.0522%" height="15" fill="rgb(251,28,31)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="655.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="629" width="0.0522%" height="15" fill="rgb(233,223,10)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="639.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="613" width="0.0522%" height="15" fill="rgb(215,21,27)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="623.50"></text></g><g><title>__munmap (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="597" width="0.0522%" height="15" fill="rgb(232,23,21)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="607.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="581" width="0.0522%" height="15" fill="rgb(244,5,23)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="591.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="565" width="0.0522%" height="15" fill="rgb(226,81,46)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="575.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="549" width="0.0522%" height="15" fill="rgb(247,70,30)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="559.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="533" width="0.0522%" height="15" fill="rgb(212,68,19)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="543.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="517" width="0.0522%" height="15" fill="rgb(240,187,13)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="527.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="501" width="0.0522%" height="15" fill="rgb(223,113,26)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="511.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="485" width="0.0522%" height="15" fill="rgb(206,192,2)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="495.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="469" width="0.0522%" height="15" fill="rgb(241,108,4)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="479.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="453" width="0.0522%" height="15" fill="rgb(247,173,49)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="463.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="437" width="0.0522%" height="15" fill="rgb(224,114,35)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="447.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="421" width="0.0522%" height="15" fill="rgb(245,159,27)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="431.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.05%)</title><rect x="99.3211%" y="405" width="0.0522%" height="15" fill="rgb(245,172,44)" fg:x="1907723118" fg:w="1003009"/><text x="99.5711%" y="415.50"></text></g><g><title>&lt;tinyvec::tinyvec::TinyVecIterator&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.3734%" y="357" width="0.0522%" height="15" fill="rgb(236,23,11)" fg:x="1908726127" fg:w="1003009"/><text x="99.6234%" y="367.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;ascii::ascii_string::AsciiString&gt;::new (2,006,018 samples, 0.10%)</title><rect x="99.4256%" y="357" width="0.1044%" height="15" fill="rgb(205,117,38)" fg:x="1909729136" fg:w="2006018"/><text x="99.6756%" y="367.50"></text></g><g><title>&lt;ascii::ascii_string::AsciiString as core::iter::traits::collect::Extend&lt;A&gt;&gt;::extend (2,006,018 samples, 0.10%)</title><rect x="99.4256%" y="341" width="0.1044%" height="15" fill="rgb(237,72,25)" fg:x="1909729136" fg:w="2006018"/><text x="99.6756%" y="351.50"></text></g><g><title>ascii::ascii_string::AsciiString::push_str (2,006,018 samples, 0.10%)</title><rect x="99.4256%" y="325" width="0.1044%" height="15" fill="rgb(244,70,9)" fg:x="1909729136" fg:w="2006018"/><text x="99.6756%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,006,018 samples, 0.10%)</title><rect x="99.4256%" y="309" width="0.1044%" height="15" fill="rgb(217,125,39)" fg:x="1909729136" fg:w="2006018"/><text x="99.6756%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,006,018 samples, 0.10%)</title><rect x="99.4256%" y="293" width="0.1044%" height="15" fill="rgb(235,36,10)" fg:x="1909729136" fg:w="2006018"/><text x="99.6756%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,006,018 samples, 0.10%)</title><rect x="99.4256%" y="277" width="0.1044%" height="15" fill="rgb(251,123,47)" fg:x="1909729136" fg:w="2006018"/><text x="99.6756%" y="287.50"></text></g><g><title>&lt;ascii::ascii_str::Chars as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.4778%" y="261" width="0.0522%" height="15" fill="rgb(221,13,13)" fg:x="1910732145" fg:w="1003009"/><text x="99.7278%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.05%)</title><rect x="99.4778%" y="245" width="0.0522%" height="15" fill="rgb(238,131,9)" fg:x="1910732145" fg:w="1003009"/><text x="99.7278%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.05%)</title><rect x="99.4778%" y="229" width="0.0522%" height="15" fill="rgb(211,50,8)" fg:x="1910732145" fg:w="1003009"/><text x="99.7278%" y="239.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1,003,009 samples, 0.05%)</title><rect x="99.5300%" y="357" width="0.0522%" height="15" fill="rgb(245,182,24)" fg:x="1911735154" fg:w="1003009"/><text x="99.7800%" y="367.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1,003,009 samples, 0.05%)</title><rect x="99.5300%" y="341" width="0.0522%" height="15" fill="rgb(242,14,37)" fg:x="1911735154" fg:w="1003009"/><text x="99.7800%" y="351.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (1,003,009 samples, 0.05%)</title><rect x="99.5300%" y="325" width="0.0522%" height="15" fill="rgb(246,228,12)" fg:x="1911735154" fg:w="1003009"/><text x="99.7800%" y="335.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.05%)</title><rect x="99.5300%" y="309" width="0.0522%" height="15" fill="rgb(213,55,15)" fg:x="1911735154" fg:w="1003009"/><text x="99.7800%" y="319.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.05%)</title><rect x="99.5300%" y="293" width="0.0522%" height="15" fill="rgb(209,9,3)" fg:x="1911735154" fg:w="1003009"/><text x="99.7800%" y="303.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (11,033,099 samples, 0.57%)</title><rect x="99.3734%" y="405" width="0.5744%" height="15" fill="rgb(230,59,30)" fg:x="1908726127" fg:w="11033099"/><text x="99.6234%" y="415.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day6::Day6 as aoc_2024_megaproject::Day&gt;::part2_multithreaded (11,033,099 samples, 0.57%)</title><rect x="99.3734%" y="389" width="0.5744%" height="15" fill="rgb(209,121,21)" fg:x="1908726127" fg:w="11033099"/><text x="99.6234%" y="399.50"></text></g><g><title>aoc_2024_megaproject::problems::day6::part2_multithreaded (11,033,099 samples, 0.57%)</title><rect x="99.3734%" y="373" width="0.5744%" height="15" fill="rgb(220,109,13)" fg:x="1908726127" fg:w="11033099"/><text x="99.6234%" y="383.50"></text></g><g><title>std::thread::spawn (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="357" width="0.3655%" height="15" fill="rgb(232,18,1)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="367.50"></text></g><g><title>std::thread::Builder::spawn (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="341" width="0.3655%" height="15" fill="rgb(215,41,42)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="325" width="0.3655%" height="15" fill="rgb(224,123,36)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="335.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="309" width="0.3655%" height="15" fill="rgb(240,125,3)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="319.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="293" width="0.3655%" height="15" fill="rgb(205,98,50)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="303.50"></text></g><g><title>pthread_create (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="277" width="0.3655%" height="15" fill="rgb(205,185,37)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="287.50"></text></g><g><title>[libc.so.6] (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="261" width="0.3655%" height="15" fill="rgb(238,207,15)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="271.50"></text></g><g><title>[libc.so.6] (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="245" width="0.3655%" height="15" fill="rgb(213,199,42)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="255.50"></text></g><g><title>[unknown] (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="229" width="0.3655%" height="15" fill="rgb(235,201,11)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="239.50"></text></g><g><title>[unknown] (7,021,063 samples, 0.37%)</title><rect x="99.5822%" y="213" width="0.3655%" height="15" fill="rgb(207,46,11)" fg:x="1912738163" fg:w="7021063"/><text x="99.8322%" y="223.50"></text></g><g><title>[unknown] (6,018,054 samples, 0.31%)</title><rect x="99.6345%" y="197" width="0.3133%" height="15" fill="rgb(241,35,35)" fg:x="1913741172" fg:w="6018054"/><text x="99.8845%" y="207.50"></text></g><g><title>[unknown] (6,018,054 samples, 0.31%)</title><rect x="99.6345%" y="181" width="0.3133%" height="15" fill="rgb(243,32,47)" fg:x="1913741172" fg:w="6018054"/><text x="99.8845%" y="191.50"></text></g><g><title>[unknown] (6,018,054 samples, 0.31%)</title><rect x="99.6345%" y="165" width="0.3133%" height="15" fill="rgb(247,202,23)" fg:x="1913741172" fg:w="6018054"/><text x="99.8845%" y="175.50"></text></g><g><title>[unknown] (6,018,054 samples, 0.31%)</title><rect x="99.6345%" y="149" width="0.3133%" height="15" fill="rgb(219,102,11)" fg:x="1913741172" fg:w="6018054"/><text x="99.8845%" y="159.50"></text></g><g><title>[unknown] (6,018,054 samples, 0.31%)</title><rect x="99.6345%" y="133" width="0.3133%" height="15" fill="rgb(243,110,44)" fg:x="1913741172" fg:w="6018054"/><text x="99.8845%" y="143.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7911%" y="117" width="0.1567%" height="15" fill="rgb(222,74,54)" fg:x="1916750199" fg:w="3009027"/><text x="100.0411%" y="127.50"></text></g><g><title>[unknown] (3,009,027 samples, 0.16%)</title><rect x="99.7911%" y="101" width="0.1567%" height="15" fill="rgb(216,99,12)" fg:x="1916750199" fg:w="3009027"/><text x="100.0411%" y="111.50"></text></g><g><title>[unknown] (2,006,018 samples, 0.10%)</title><rect x="99.8433%" y="85" width="0.1044%" height="15" fill="rgb(226,22,26)" fg:x="1917753208" fg:w="2006018"/><text x="100.0933%" y="95.50"></text></g><g><title>[unknown] (2,006,018 samples, 0.10%)</title><rect x="99.8433%" y="69" width="0.1044%" height="15" fill="rgb(217,163,10)" fg:x="1917753208" fg:w="2006018"/><text x="100.0933%" y="79.50"></text></g><g><title>[unknown] (2,006,018 samples, 0.10%)</title><rect x="99.8433%" y="53" width="0.1044%" height="15" fill="rgb(213,25,53)" fg:x="1917753208" fg:w="2006018"/><text x="100.0933%" y="63.50"></text></g><g><title>[unknown] (2,006,018 samples, 0.10%)</title><rect x="99.8433%" y="37" width="0.1044%" height="15" fill="rgb(252,105,26)" fg:x="1917753208" fg:w="2006018"/><text x="100.0933%" y="47.50"></text></g><g><title>all (1,920,762,235 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="1920762235"/><text x="0.2500%" y="735.50"></text></g><g><title>aoc-2024-megapr (1,920,762,235 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="1920762235"/><text x="0.2500%" y="719.50">aoc-2024-megapr</text></g><g><title>_start (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="693" width="0.6266%" height="15" fill="rgb(252,8,32)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="703.50"></text></g><g><title>__libc_start_main (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="677" width="0.6266%" height="15" fill="rgb(223,20,43)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="687.50"></text></g><g><title>[libc.so.6] (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="661" width="0.6266%" height="15" fill="rgb(229,81,49)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="671.50"></text></g><g><title>main (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="645" width="0.6266%" height="15" fill="rgb(236,28,36)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="629" width="0.6266%" height="15" fill="rgb(249,185,26)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="639.50"></text></g><g><title>std::panic::catch_unwind (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="613" width="0.6266%" height="15" fill="rgb(249,174,33)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="623.50"></text></g><g><title>std::panicking::try (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="597" width="0.6266%" height="15" fill="rgb(233,201,37)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="607.50"></text></g><g><title>std::panicking::try::do_call (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="581" width="0.6266%" height="15" fill="rgb(221,78,26)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="591.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="565" width="0.6266%" height="15" fill="rgb(250,127,30)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="575.50"></text></g><g><title>std::panic::catch_unwind (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="549" width="0.6266%" height="15" fill="rgb(230,49,44)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="559.50"></text></g><g><title>std::panicking::try (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="533" width="0.6266%" height="15" fill="rgb(229,67,23)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="543.50"></text></g><g><title>std::panicking::try::do_call (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="517" width="0.6266%" height="15" fill="rgb(249,83,47)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="501" width="0.6266%" height="15" fill="rgb(215,43,3)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="511.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="485" width="0.6266%" height="15" fill="rgb(238,154,13)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="495.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="469" width="0.6266%" height="15" fill="rgb(219,56,2)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="453" width="0.6266%" height="15" fill="rgb(233,0,4)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="463.50"></text></g><g><title>aoc_2024_megaproject::main (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="437" width="0.6266%" height="15" fill="rgb(235,30,7)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="447.50"></text></g><g><title>aoc_2024_megaproject::repeat_part (12,036,108 samples, 0.63%)</title><rect x="99.3734%" y="421" width="0.6266%" height="15" fill="rgb(250,79,13)" fg:x="1908726127" fg:w="12036108"/><text x="99.6234%" y="431.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="405" width="0.0522%" height="15" fill="rgb(211,146,34)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="415.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="389" width="0.0522%" height="15" fill="rgb(228,22,38)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="373" width="0.0522%" height="15" fill="rgb(235,168,5)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="357" width="0.0522%" height="15" fill="rgb(221,155,16)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="341" width="0.0522%" height="15" fill="rgb(215,215,53)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="325" width="0.0522%" height="15" fill="rgb(223,4,10)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.05%)</title><rect x="99.9478%" y="309" width="0.0522%" height="15" fill="rgb(234,103,6)" fg:x="1919759226" fg:w="1003009"/><text x="100.1978%" y="319.50"></text></g></svg></svg>