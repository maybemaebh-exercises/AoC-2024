<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="999999973"><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.40%)</title><rect x="8.5256%" y="197" width="0.4012%" height="15" fill="rgb(227,0,7)" fg:x="85255765" fg:w="4012036"/><text x="8.7756%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (4,012,036 samples, 0.40%)</title><rect x="8.5256%" y="181" width="0.4012%" height="15" fill="rgb(217,0,24)" fg:x="85255765" fg:w="4012036"/><text x="8.7756%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (4,012,036 samples, 0.40%)</title><rect x="8.5256%" y="165" width="0.4012%" height="15" fill="rgb(221,193,54)" fg:x="85255765" fg:w="4012036"/><text x="8.7756%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="8.7262%" y="149" width="0.2006%" height="15" fill="rgb(248,212,6)" fg:x="87261783" fg:w="2006018"/><text x="8.9762%" y="159.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (2,006,018 samples, 0.20%)</title><rect x="8.9268%" y="197" width="0.2006%" height="15" fill="rgb(208,68,35)" fg:x="89267801" fg:w="2006018"/><text x="9.1768%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="9.1274%" y="197" width="0.2006%" height="15" fill="rgb(232,128,0)" fg:x="91273819" fg:w="2006018"/><text x="9.3774%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="9.1274%" y="181" width="0.2006%" height="15" fill="rgb(207,160,47)" fg:x="91273819" fg:w="2006018"/><text x="9.3774%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="9.1274%" y="165" width="0.2006%" height="15" fill="rgb(228,23,34)" fg:x="91273819" fg:w="2006018"/><text x="9.3774%" y="175.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (91,273,819 samples, 9.13%)</title><rect x="0.3009%" y="261" width="9.1274%" height="15" fill="rgb(218,30,26)" fg:x="3009027" fg:w="91273819"/><text x="0.5509%" y="271.50">&lt;core::str::i..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (88,264,792 samples, 8.83%)</title><rect x="0.6018%" y="245" width="8.8265%" height="15" fill="rgb(220,122,19)" fg:x="6018054" fg:w="88264792"/><text x="0.8518%" y="255.50">core::str::i..</text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (73,219,657 samples, 7.32%)</title><rect x="2.1063%" y="229" width="7.3220%" height="15" fill="rgb(250,228,42)" fg:x="21063189" fg:w="73219657"/><text x="2.3563%" y="239.50">&lt;core::str..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (56,168,504 samples, 5.62%)</title><rect x="3.8114%" y="213" width="5.6169%" height="15" fill="rgb(240,193,28)" fg:x="38114342" fg:w="56168504"/><text x="4.0614%" y="223.50">core::s..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="9.3280%" y="197" width="0.1003%" height="15" fill="rgb(216,20,37)" fg:x="93279837" fg:w="1003009"/><text x="9.5780%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="9.3280%" y="181" width="0.1003%" height="15" fill="rgb(206,188,39)" fg:x="93279837" fg:w="1003009"/><text x="9.5780%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (108,324,972 samples, 10.83%)</title><rect x="0.3009%" y="277" width="10.8325%" height="15" fill="rgb(217,207,13)" fg:x="3009027" fg:w="108324972"/><text x="0.5509%" y="287.50">&lt;core::iter::ada..</text></g><g><title>core::option::Option&lt;T&gt;::map (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="261" width="1.7051%" height="15" fill="rgb(231,73,38)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="245" width="1.7051%" height="15" fill="rgb(225,20,46)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="255.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="229" width="1.7051%" height="15" fill="rgb(210,31,41)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="213" width="1.7051%" height="15" fill="rgb(221,200,47)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="223.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="197" width="1.7051%" height="15" fill="rgb(226,26,5)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="181" width="1.7051%" height="15" fill="rgb(249,33,26)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (17,051,153 samples, 1.71%)</title><rect x="9.4283%" y="165" width="1.7051%" height="15" fill="rgb(235,183,28)" fg:x="94282846" fg:w="17051153"/><text x="9.6783%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2,006,018 samples, 0.20%)</title><rect x="10.9328%" y="149" width="0.2006%" height="15" fill="rgb(221,5,38)" fg:x="109327981" fg:w="2006018"/><text x="11.1828%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="10.9328%" y="133" width="0.2006%" height="15" fill="rgb(247,18,42)" fg:x="109327981" fg:w="2006018"/><text x="11.1828%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="11.1334%" y="277" width="0.1003%" height="15" fill="rgb(241,131,45)" fg:x="111333999" fg:w="1003009"/><text x="11.3834%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (115,346,035 samples, 11.53%)</title><rect x="0.3009%" y="325" width="11.5346%" height="15" fill="rgb(249,31,29)" fg:x="3009027" fg:w="115346035"/><text x="0.5509%" y="335.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (115,346,035 samples, 11.53%)</title><rect x="0.3009%" y="309" width="11.5346%" height="15" fill="rgb(225,111,53)" fg:x="3009027" fg:w="115346035"/><text x="0.5509%" y="319.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (115,346,035 samples, 11.53%)</title><rect x="0.3009%" y="293" width="11.5346%" height="15" fill="rgb(238,160,17)" fg:x="3009027" fg:w="115346035"/><text x="0.5509%" y="303.50">alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::write (6,018,054 samples, 0.60%)</title><rect x="11.2337%" y="277" width="0.6018%" height="15" fill="rgb(214,148,48)" fg:x="112337008" fg:w="6018054"/><text x="11.4837%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="11.8355%" y="325" width="0.1003%" height="15" fill="rgb(232,36,49)" fg:x="118355062" fg:w="1003009"/><text x="12.0855%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.10%)</title><rect x="11.8355%" y="309" width="0.1003%" height="15" fill="rgb(209,103,24)" fg:x="118355062" fg:w="1003009"/><text x="12.0855%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="11.8355%" y="293" width="0.1003%" height="15" fill="rgb(229,88,8)" fg:x="118355062" fg:w="1003009"/><text x="12.0855%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="15.1454%" y="245" width="0.1003%" height="15" fill="rgb(213,181,19)" fg:x="151454359" fg:w="1003009"/><text x="15.3954%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="15.1454%" y="229" width="0.1003%" height="15" fill="rgb(254,191,54)" fg:x="151454359" fg:w="1003009"/><text x="15.3954%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="15.1454%" y="213" width="0.1003%" height="15" fill="rgb(241,83,37)" fg:x="151454359" fg:w="1003009"/><text x="15.3954%" y="223.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (25,075,225 samples, 2.51%)</title><rect x="12.9388%" y="277" width="2.5075%" height="15" fill="rgb(233,36,39)" fg:x="129388161" fg:w="25075225"/><text x="13.1888%" y="287.50">&lt;c..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (21,063,189 samples, 2.11%)</title><rect x="13.3400%" y="261" width="2.1063%" height="15" fill="rgb(226,3,54)" fg:x="133400197" fg:w="21063189"/><text x="13.5900%" y="271.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="15.2457%" y="245" width="0.2006%" height="15" fill="rgb(245,192,40)" fg:x="152457368" fg:w="2006018"/><text x="15.4957%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="15.2457%" y="229" width="0.2006%" height="15" fill="rgb(238,167,29)" fg:x="152457368" fg:w="2006018"/><text x="15.4957%" y="239.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (36,108,324 samples, 3.61%)</title><rect x="11.9358%" y="309" width="3.6108%" height="15" fill="rgb(232,182,51)" fg:x="119358071" fg:w="36108324"/><text x="12.1858%" y="319.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (36,108,324 samples, 3.61%)</title><rect x="11.9358%" y="293" width="3.6108%" height="15" fill="rgb(231,60,39)" fg:x="119358071" fg:w="36108324"/><text x="12.1858%" y="303.50">core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="15.4463%" y="277" width="0.1003%" height="15" fill="rgb(208,69,12)" fg:x="154463386" fg:w="1003009"/><text x="15.6963%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41,123,369 samples, 4.11%)</title><rect x="11.9358%" y="325" width="4.1123%" height="15" fill="rgb(235,93,37)" fg:x="119358071" fg:w="41123369"/><text x="12.1858%" y="335.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (5,015,045 samples, 0.50%)</title><rect x="15.5466%" y="309" width="0.5015%" height="15" fill="rgb(213,116,39)" fg:x="155466395" fg:w="5015045"/><text x="15.7966%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,012,036 samples, 0.40%)</title><rect x="15.6469%" y="293" width="0.4012%" height="15" fill="rgb(222,207,29)" fg:x="156469404" fg:w="4012036"/><text x="15.8969%" y="303.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (4,012,036 samples, 0.40%)</title><rect x="15.6469%" y="277" width="0.4012%" height="15" fill="rgb(206,96,30)" fg:x="156469404" fg:w="4012036"/><text x="15.8969%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (4,012,036 samples, 0.40%)</title><rect x="15.6469%" y="261" width="0.4012%" height="15" fill="rgb(218,138,4)" fg:x="156469404" fg:w="4012036"/><text x="15.8969%" y="271.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (4,012,036 samples, 0.40%)</title><rect x="15.6469%" y="245" width="0.4012%" height="15" fill="rgb(250,191,14)" fg:x="156469404" fg:w="4012036"/><text x="15.8969%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (4,012,036 samples, 0.40%)</title><rect x="15.6469%" y="229" width="0.4012%" height="15" fill="rgb(239,60,40)" fg:x="156469404" fg:w="4012036"/><text x="15.8969%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (4,012,036 samples, 0.40%)</title><rect x="15.6469%" y="213" width="0.4012%" height="15" fill="rgb(206,27,48)" fg:x="156469404" fg:w="4012036"/><text x="15.8969%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10,030,090 samples, 1.00%)</title><rect x="16.9509%" y="245" width="1.0030%" height="15" fill="rgb(225,35,8)" fg:x="169508521" fg:w="10030090"/><text x="17.2009%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (10,030,090 samples, 1.00%)</title><rect x="16.9509%" y="229" width="1.0030%" height="15" fill="rgb(250,213,24)" fg:x="169508521" fg:w="10030090"/><text x="17.2009%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10,030,090 samples, 1.00%)</title><rect x="16.9509%" y="213" width="1.0030%" height="15" fill="rgb(247,123,22)" fg:x="169508521" fg:w="10030090"/><text x="17.2009%" y="223.50"></text></g><g><title>[libc.so.6] (8,024,072 samples, 0.80%)</title><rect x="17.1515%" y="197" width="0.8024%" height="15" fill="rgb(231,138,38)" fg:x="171514539" fg:w="8024072"/><text x="17.4015%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4,012,036 samples, 0.40%)</title><rect x="17.9539%" y="245" width="0.4012%" height="15" fill="rgb(231,145,46)" fg:x="179538611" fg:w="4012036"/><text x="18.2039%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4,012,036 samples, 0.40%)</title><rect x="17.9539%" y="229" width="0.4012%" height="15" fill="rgb(251,118,11)" fg:x="179538611" fg:w="4012036"/><text x="18.2039%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (4,012,036 samples, 0.40%)</title><rect x="17.9539%" y="213" width="0.4012%" height="15" fill="rgb(217,147,25)" fg:x="179538611" fg:w="4012036"/><text x="18.2039%" y="223.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="19.5587%" y="197" width="0.1003%" height="15" fill="rgb(247,81,37)" fg:x="195586755" fg:w="1003009"/><text x="19.8087%" y="207.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="19.6590%" y="197" width="0.1003%" height="15" fill="rgb(209,12,38)" fg:x="196589764" fg:w="1003009"/><text x="19.9090%" y="207.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (40,120,360 samples, 4.01%)</title><rect x="16.0481%" y="293" width="4.0120%" height="15" fill="rgb(227,1,9)" fg:x="160481440" fg:w="40120360"/><text x="16.2981%" y="303.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (39,117,351 samples, 3.91%)</title><rect x="16.1484%" y="277" width="3.9117%" height="15" fill="rgb(248,47,43)" fg:x="161484449" fg:w="39117351"/><text x="16.3984%" y="287.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (33,099,297 samples, 3.31%)</title><rect x="16.7503%" y="261" width="3.3099%" height="15" fill="rgb(221,10,30)" fg:x="167502503" fg:w="33099297"/><text x="17.0003%" y="271.50">&lt;co..</text></g><g><title>core::slice::memchr::memchr (17,051,153 samples, 1.71%)</title><rect x="18.3551%" y="245" width="1.7051%" height="15" fill="rgb(210,229,1)" fg:x="183550647" fg:w="17051153"/><text x="18.6051%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (15,045,135 samples, 1.50%)</title><rect x="18.5557%" y="229" width="1.5045%" height="15" fill="rgb(222,148,37)" fg:x="185556665" fg:w="15045135"/><text x="18.8057%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (12,036,108 samples, 1.20%)</title><rect x="18.8566%" y="213" width="1.2036%" height="15" fill="rgb(234,67,33)" fg:x="188565692" fg:w="12036108"/><text x="19.1066%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_naive (3,009,027 samples, 0.30%)</title><rect x="19.7593%" y="197" width="0.3009%" height="15" fill="rgb(247,98,35)" fg:x="197592773" fg:w="3009027"/><text x="20.0093%" y="207.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (41,123,369 samples, 4.11%)</title><rect x="16.0481%" y="325" width="4.1123%" height="15" fill="rgb(247,138,52)" fg:x="160481440" fg:w="41123369"/><text x="16.2981%" y="335.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41,123,369 samples, 4.11%)</title><rect x="16.0481%" y="309" width="4.1123%" height="15" fill="rgb(213,79,30)" fg:x="160481440" fg:w="41123369"/><text x="16.2981%" y="319.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="20.0602%" y="293" width="0.1003%" height="15" fill="rgb(246,177,23)" fg:x="200601800" fg:w="1003009"/><text x="20.3102%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="20.0602%" y="277" width="0.1003%" height="15" fill="rgb(230,62,27)" fg:x="200601800" fg:w="1003009"/><text x="20.3102%" y="287.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (1,003,009 samples, 0.10%)</title><rect x="20.0602%" y="261" width="0.1003%" height="15" fill="rgb(216,154,8)" fg:x="200601800" fg:w="1003009"/><text x="20.3102%" y="271.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (1,003,009 samples, 0.10%)</title><rect x="20.0602%" y="245" width="0.1003%" height="15" fill="rgb(244,35,45)" fg:x="200601800" fg:w="1003009"/><text x="20.3102%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,003,009 samples, 0.10%)</title><rect x="20.1605%" y="325" width="0.1003%" height="15" fill="rgb(251,115,12)" fg:x="201604809" fg:w="1003009"/><text x="20.4105%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 1.00%)</title><rect x="21.7653%" y="309" width="1.0030%" height="15" fill="rgb(240,54,50)" fg:x="217652953" fg:w="10030090"/><text x="22.0153%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.40%)</title><rect x="22.3671%" y="293" width="0.4012%" height="15" fill="rgb(233,84,52)" fg:x="223671007" fg:w="4012036"/><text x="22.6171%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="22.5677%" y="277" width="0.2006%" height="15" fill="rgb(207,117,47)" fg:x="225677025" fg:w="2006018"/><text x="22.8177%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (16,048,144 samples, 1.60%)</title><rect x="23.7713%" y="149" width="1.6048%" height="15" fill="rgb(249,43,39)" fg:x="237713133" fg:w="16048144"/><text x="24.0213%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="25.2758%" y="133" width="0.1003%" height="15" fill="rgb(209,38,44)" fg:x="252758268" fg:w="1003009"/><text x="25.5258%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (20,060,180 samples, 2.01%)</title><rect x="23.7713%" y="165" width="2.0060%" height="15" fill="rgb(236,212,23)" fg:x="237713133" fg:w="20060180"/><text x="24.0213%" y="175.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.40%)</title><rect x="25.3761%" y="149" width="0.4012%" height="15" fill="rgb(242,79,21)" fg:x="253761277" fg:w="4012036"/><text x="25.6261%" y="159.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (9,027,081 samples, 0.90%)</title><rect x="25.7773%" y="165" width="0.9027%" height="15" fill="rgb(211,96,35)" fg:x="257773313" fg:w="9027081"/><text x="26.0273%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (9,027,081 samples, 0.90%)</title><rect x="25.7773%" y="149" width="0.9027%" height="15" fill="rgb(253,215,40)" fg:x="257773313" fg:w="9027081"/><text x="26.0273%" y="159.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="26.6800%" y="117" width="0.3009%" height="15" fill="rgb(211,81,21)" fg:x="266800394" fg:w="3009027"/><text x="26.9300%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="26.6800%" y="101" width="0.3009%" height="15" fill="rgb(208,190,38)" fg:x="266800394" fg:w="3009027"/><text x="26.9300%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="26.6800%" y="85" width="0.3009%" height="15" fill="rgb(235,213,38)" fg:x="266800394" fg:w="3009027"/><text x="26.9300%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="26.6800%" y="69" width="0.3009%" height="15" fill="rgb(237,122,38)" fg:x="266800394" fg:w="3009027"/><text x="26.9300%" y="79.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (8,024,072 samples, 0.80%)</title><rect x="26.9809%" y="85" width="0.8024%" height="15" fill="rgb(244,218,35)" fg:x="269809421" fg:w="8024072"/><text x="27.2309%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (6,018,054 samples, 0.60%)</title><rect x="27.1815%" y="69" width="0.6018%" height="15" fill="rgb(240,68,47)" fg:x="271815439" fg:w="6018054"/><text x="27.4315%" y="79.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="27.6830%" y="53" width="0.1003%" height="15" fill="rgb(210,16,53)" fg:x="276830484" fg:w="1003009"/><text x="27.9330%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (46,138,414 samples, 4.61%)</title><rect x="23.7713%" y="197" width="4.6138%" height="15" fill="rgb(235,124,12)" fg:x="237713133" fg:w="46138414"/><text x="24.0213%" y="207.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (46,138,414 samples, 4.61%)</title><rect x="23.7713%" y="181" width="4.6138%" height="15" fill="rgb(224,169,11)" fg:x="237713133" fg:w="46138414"/><text x="24.0213%" y="191.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,051,153 samples, 1.71%)</title><rect x="26.6800%" y="165" width="1.7051%" height="15" fill="rgb(250,166,2)" fg:x="266800394" fg:w="17051153"/><text x="26.9300%" y="175.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (17,051,153 samples, 1.71%)</title><rect x="26.6800%" y="149" width="1.7051%" height="15" fill="rgb(242,216,29)" fg:x="266800394" fg:w="17051153"/><text x="26.9300%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (17,051,153 samples, 1.71%)</title><rect x="26.6800%" y="133" width="1.7051%" height="15" fill="rgb(230,116,27)" fg:x="266800394" fg:w="17051153"/><text x="26.9300%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (14,042,126 samples, 1.40%)</title><rect x="26.9809%" y="117" width="1.4042%" height="15" fill="rgb(228,99,48)" fg:x="269809421" fg:w="14042126"/><text x="27.2309%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (14,042,126 samples, 1.40%)</title><rect x="26.9809%" y="101" width="1.4042%" height="15" fill="rgb(253,11,6)" fg:x="269809421" fg:w="14042126"/><text x="27.2309%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (6,018,054 samples, 0.60%)</title><rect x="27.7834%" y="85" width="0.6018%" height="15" fill="rgb(247,143,39)" fg:x="277833493" fg:w="6018054"/><text x="28.0334%" y="95.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11,033,099 samples, 1.10%)</title><rect x="29.7894%" y="149" width="1.1033%" height="15" fill="rgb(236,97,10)" fg:x="297893673" fg:w="11033099"/><text x="30.0394%" y="159.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (11,033,099 samples, 1.10%)</title><rect x="29.7894%" y="133" width="1.1033%" height="15" fill="rgb(233,208,19)" fg:x="297893673" fg:w="11033099"/><text x="30.0394%" y="143.50"></text></g><g><title>core::intrinsics::likely (13,039,117 samples, 1.30%)</title><rect x="30.8927%" y="149" width="1.3039%" height="15" fill="rgb(216,164,2)" fg:x="308926772" fg:w="13039117"/><text x="31.1427%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (11,033,099 samples, 1.10%)</title><rect x="32.1966%" y="149" width="1.1033%" height="15" fill="rgb(220,129,5)" fg:x="321965889" fg:w="11033099"/><text x="32.4466%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11,033,099 samples, 1.10%)</title><rect x="32.1966%" y="133" width="1.1033%" height="15" fill="rgb(242,17,10)" fg:x="321965889" fg:w="11033099"/><text x="32.4466%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,033,099 samples, 1.10%)</title><rect x="32.1966%" y="117" width="1.1033%" height="15" fill="rgb(242,107,0)" fg:x="321965889" fg:w="11033099"/><text x="32.4466%" y="127.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="33.2999%" y="149" width="0.1003%" height="15" fill="rgb(251,28,31)" fg:x="332998988" fg:w="1003009"/><text x="33.5499%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="33.2999%" y="133" width="0.1003%" height="15" fill="rgb(233,223,10)" fg:x="332998988" fg:w="1003009"/><text x="33.5499%" y="143.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.30%)</title><rect x="33.4002%" y="149" width="0.3009%" height="15" fill="rgb(215,21,27)" fg:x="334001997" fg:w="3009027"/><text x="33.6502%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (70,210,630 samples, 7.02%)</title><rect x="33.7011%" y="133" width="7.0211%" height="15" fill="rgb(232,23,21)" fg:x="337011024" fg:w="70210630"/><text x="33.9511%" y="143.50">hashbrown..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (70,210,630 samples, 7.02%)</title><rect x="33.7011%" y="117" width="7.0211%" height="15" fill="rgb(244,5,23)" fg:x="337011024" fg:w="70210630"/><text x="33.9511%" y="127.50">&lt;Q as has..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70,210,630 samples, 7.02%)</title><rect x="33.7011%" y="101" width="7.0211%" height="15" fill="rgb(226,81,46)" fg:x="337011024" fg:w="70210630"/><text x="33.9511%" y="111.50">core::cmp..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (70,210,630 samples, 7.02%)</title><rect x="33.7011%" y="85" width="7.0211%" height="15" fill="rgb(247,70,30)" fg:x="337011024" fg:w="70210630"/><text x="33.9511%" y="95.50">core::arr..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (70,210,630 samples, 7.02%)</title><rect x="33.7011%" y="69" width="7.0211%" height="15" fill="rgb(212,68,19)" fg:x="337011024" fg:w="70210630"/><text x="33.9511%" y="79.50">&lt;T as cor..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (15,045,135 samples, 1.50%)</title><rect x="40.7222%" y="133" width="1.5045%" height="15" fill="rgb(240,187,13)" fg:x="407221654" fg:w="15045135"/><text x="40.9722%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (15,045,135 samples, 1.50%)</title><rect x="40.7222%" y="117" width="1.5045%" height="15" fill="rgb(223,113,26)" fg:x="407221654" fg:w="15045135"/><text x="40.9722%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15,045,135 samples, 1.50%)</title><rect x="40.7222%" y="101" width="1.5045%" height="15" fill="rgb(206,192,2)" fg:x="407221654" fg:w="15045135"/><text x="40.9722%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (88,264,792 samples, 8.83%)</title><rect x="33.7011%" y="149" width="8.8265%" height="15" fill="rgb(241,108,4)" fg:x="337011024" fg:w="88264792"/><text x="33.9511%" y="159.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3,009,027 samples, 0.30%)</title><rect x="42.2267%" y="133" width="0.3009%" height="15" fill="rgb(247,173,49)" fg:x="422266789" fg:w="3009027"/><text x="42.4767%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,009,027 samples, 0.30%)</title><rect x="42.2267%" y="117" width="0.3009%" height="15" fill="rgb(224,114,35)" fg:x="422266789" fg:w="3009027"/><text x="42.4767%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,009,027 samples, 0.30%)</title><rect x="42.2267%" y="101" width="0.3009%" height="15" fill="rgb(245,159,27)" fg:x="422266789" fg:w="3009027"/><text x="42.4767%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (213,640,917 samples, 21.36%)</title><rect x="22.7683%" y="309" width="21.3641%" height="15" fill="rgb(245,172,44)" fg:x="227683043" fg:w="213640917"/><text x="23.0183%" y="319.50">core::cmp::impls::&lt;impl core::cmp:..</text></g><g><title>core::cmp::PartialOrd::gt (213,640,917 samples, 21.36%)</title><rect x="22.7683%" y="293" width="21.3641%" height="15" fill="rgb(236,23,11)" fg:x="227683043" fg:w="213640917"/><text x="23.0183%" y="303.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (210,631,890 samples, 21.06%)</title><rect x="23.0692%" y="277" width="21.0632%" height="15" fill="rgb(205,117,38)" fg:x="230692070" fg:w="210631890"/><text x="23.3192%" y="287.50">&lt;aoc_2024_megaproject::problems::..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (209,628,881 samples, 20.96%)</title><rect x="23.1695%" y="261" width="20.9629%" height="15" fill="rgb(237,72,25)" fg:x="231695079" fg:w="209628881"/><text x="23.4195%" y="271.50">aoc_2024_megaproject::problems::d..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (209,628,881 samples, 20.96%)</title><rect x="23.1695%" y="245" width="20.9629%" height="15" fill="rgb(244,70,9)" fg:x="231695079" fg:w="209628881"/><text x="23.4195%" y="255.50">std::collections::hash::map::Hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (209,628,881 samples, 20.96%)</title><rect x="23.1695%" y="229" width="20.9629%" height="15" fill="rgb(217,125,39)" fg:x="231695079" fg:w="209628881"/><text x="23.4195%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (209,628,881 samples, 20.96%)</title><rect x="23.1695%" y="213" width="20.9629%" height="15" fill="rgb(235,36,10)" fg:x="231695079" fg:w="209628881"/><text x="23.4195%" y="223.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (157,472,413 samples, 15.75%)</title><rect x="28.3852%" y="197" width="15.7472%" height="15" fill="rgb(251,123,47)" fg:x="283851547" fg:w="157472413"/><text x="28.6352%" y="207.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (157,472,413 samples, 15.75%)</title><rect x="28.3852%" y="181" width="15.7472%" height="15" fill="rgb(221,13,13)" fg:x="283851547" fg:w="157472413"/><text x="28.6352%" y="191.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (157,472,413 samples, 15.75%)</title><rect x="28.3852%" y="165" width="15.7472%" height="15" fill="rgb(238,131,9)" fg:x="283851547" fg:w="157472413"/><text x="28.6352%" y="175.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (16,048,144 samples, 1.60%)</title><rect x="42.5276%" y="149" width="1.6048%" height="15" fill="rgb(211,50,8)" fg:x="425275816" fg:w="16048144"/><text x="42.7776%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="45.1354%" y="149" width="0.5015%" height="15" fill="rgb(245,182,24)" fg:x="451354050" fg:w="5015045"/><text x="45.3854%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.70%)</title><rect x="45.1354%" y="165" width="0.7021%" height="15" fill="rgb(242,14,37)" fg:x="451354050" fg:w="7021063"/><text x="45.3854%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="45.6369%" y="149" width="0.2006%" height="15" fill="rgb(246,228,12)" fg:x="456369095" fg:w="2006018"/><text x="45.8869%" y="159.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (9,027,081 samples, 0.90%)</title><rect x="45.8375%" y="165" width="0.9027%" height="15" fill="rgb(213,55,15)" fg:x="458375113" fg:w="9027081"/><text x="46.0875%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (9,027,081 samples, 0.90%)</title><rect x="45.8375%" y="149" width="0.9027%" height="15" fill="rgb(209,9,3)" fg:x="458375113" fg:w="9027081"/><text x="46.0875%" y="159.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="46.7402%" y="117" width="0.3009%" height="15" fill="rgb(230,59,30)" fg:x="467402194" fg:w="3009027"/><text x="46.9902%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="46.7402%" y="101" width="0.3009%" height="15" fill="rgb(209,121,21)" fg:x="467402194" fg:w="3009027"/><text x="46.9902%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="46.7402%" y="85" width="0.3009%" height="15" fill="rgb(220,109,13)" fg:x="467402194" fg:w="3009027"/><text x="46.9902%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="46.7402%" y="69" width="0.3009%" height="15" fill="rgb(232,18,1)" fg:x="467402194" fg:w="3009027"/><text x="46.9902%" y="79.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="46.9408%" y="53" width="0.1003%" height="15" fill="rgb(215,41,42)" fg:x="469408212" fg:w="1003009"/><text x="47.1908%" y="63.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="46.9408%" y="37" width="0.1003%" height="15" fill="rgb(224,123,36)" fg:x="469408212" fg:w="1003009"/><text x="47.1908%" y="47.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (6,018,054 samples, 0.60%)</title><rect x="47.0411%" y="85" width="0.6018%" height="15" fill="rgb(240,125,3)" fg:x="470411221" fg:w="6018054"/><text x="47.2911%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="47.1414%" y="69" width="0.5015%" height="15" fill="rgb(205,98,50)" fg:x="471414230" fg:w="5015045"/><text x="47.3914%" y="79.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="47.5426%" y="53" width="0.1003%" height="15" fill="rgb(205,185,37)" fg:x="475426266" fg:w="1003009"/><text x="47.7926%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (32,096,288 samples, 3.21%)</title><rect x="45.1354%" y="197" width="3.2096%" height="15" fill="rgb(238,207,15)" fg:x="451354050" fg:w="32096288"/><text x="45.3854%" y="207.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (32,096,288 samples, 3.21%)</title><rect x="45.1354%" y="181" width="3.2096%" height="15" fill="rgb(213,199,42)" fg:x="451354050" fg:w="32096288"/><text x="45.3854%" y="191.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16,048,144 samples, 1.60%)</title><rect x="46.7402%" y="165" width="1.6048%" height="15" fill="rgb(235,201,11)" fg:x="467402194" fg:w="16048144"/><text x="46.9902%" y="175.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (16,048,144 samples, 1.60%)</title><rect x="46.7402%" y="149" width="1.6048%" height="15" fill="rgb(207,46,11)" fg:x="467402194" fg:w="16048144"/><text x="46.9902%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (16,048,144 samples, 1.60%)</title><rect x="46.7402%" y="133" width="1.6048%" height="15" fill="rgb(241,35,35)" fg:x="467402194" fg:w="16048144"/><text x="46.9902%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (13,039,117 samples, 1.30%)</title><rect x="47.0411%" y="117" width="1.3039%" height="15" fill="rgb(243,32,47)" fg:x="470411221" fg:w="13039117"/><text x="47.2911%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (13,039,117 samples, 1.30%)</title><rect x="47.0411%" y="101" width="1.3039%" height="15" fill="rgb(247,202,23)" fg:x="470411221" fg:w="13039117"/><text x="47.2911%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7,021,063 samples, 0.70%)</title><rect x="47.6429%" y="85" width="0.7021%" height="15" fill="rgb(219,102,11)" fg:x="476429275" fg:w="7021063"/><text x="47.8929%" y="95.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="49.2477%" y="149" width="0.8024%" height="15" fill="rgb(243,110,44)" fg:x="492477419" fg:w="8024072"/><text x="49.4977%" y="159.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.80%)</title><rect x="49.2477%" y="133" width="0.8024%" height="15" fill="rgb(222,74,54)" fg:x="492477419" fg:w="8024072"/><text x="49.4977%" y="143.50"></text></g><g><title>core::intrinsics::likely (11,033,099 samples, 1.10%)</title><rect x="50.0502%" y="149" width="1.1033%" height="15" fill="rgb(216,99,12)" fg:x="500501491" fg:w="11033099"/><text x="50.3002%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,003,009 samples, 0.10%)</title><rect x="51.1535%" y="149" width="0.1003%" height="15" fill="rgb(226,22,26)" fg:x="511534590" fg:w="1003009"/><text x="51.4035%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="51.1535%" y="133" width="0.1003%" height="15" fill="rgb(217,163,10)" fg:x="511534590" fg:w="1003009"/><text x="51.4035%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="51.1535%" y="117" width="0.1003%" height="15" fill="rgb(213,25,53)" fg:x="511534590" fg:w="1003009"/><text x="51.4035%" y="127.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (11,033,099 samples, 1.10%)</title><rect x="51.2538%" y="149" width="1.1033%" height="15" fill="rgb(252,105,26)" fg:x="512537599" fg:w="11033099"/><text x="51.5038%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11,033,099 samples, 1.10%)</title><rect x="51.2538%" y="133" width="1.1033%" height="15" fill="rgb(220,39,43)" fg:x="512537599" fg:w="11033099"/><text x="51.5038%" y="143.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,012,036 samples, 0.40%)</title><rect x="52.3571%" y="149" width="0.4012%" height="15" fill="rgb(229,68,48)" fg:x="523570698" fg:w="4012036"/><text x="52.6071%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (58,174,522 samples, 5.82%)</title><rect x="52.7583%" y="133" width="5.8175%" height="15" fill="rgb(252,8,32)" fg:x="527582734" fg:w="58174522"/><text x="53.0083%" y="143.50">hashbro..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (58,174,522 samples, 5.82%)</title><rect x="52.7583%" y="117" width="5.8175%" height="15" fill="rgb(223,20,43)" fg:x="527582734" fg:w="58174522"/><text x="53.0083%" y="127.50">&lt;Q as h..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (58,174,522 samples, 5.82%)</title><rect x="52.7583%" y="101" width="5.8175%" height="15" fill="rgb(229,81,49)" fg:x="527582734" fg:w="58174522"/><text x="53.0083%" y="111.50">core::c..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (58,174,522 samples, 5.82%)</title><rect x="52.7583%" y="85" width="5.8175%" height="15" fill="rgb(236,28,36)" fg:x="527582734" fg:w="58174522"/><text x="53.0083%" y="95.50">core::a..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (58,174,522 samples, 5.82%)</title><rect x="52.7583%" y="69" width="5.8175%" height="15" fill="rgb(249,185,26)" fg:x="527582734" fg:w="58174522"/><text x="53.0083%" y="79.50">&lt;T as c..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13,039,117 samples, 1.30%)</title><rect x="58.5757%" y="133" width="1.3039%" height="15" fill="rgb(249,174,33)" fg:x="585757256" fg:w="13039117"/><text x="58.8257%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13,039,117 samples, 1.30%)</title><rect x="58.5757%" y="117" width="1.3039%" height="15" fill="rgb(233,201,37)" fg:x="585757256" fg:w="13039117"/><text x="58.8257%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13,039,117 samples, 1.30%)</title><rect x="58.5757%" y="101" width="1.3039%" height="15" fill="rgb(221,78,26)" fg:x="585757256" fg:w="13039117"/><text x="58.8257%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (83,249,747 samples, 8.32%)</title><rect x="52.7583%" y="149" width="8.3250%" height="15" fill="rgb(250,127,30)" fg:x="527582734" fg:w="83249747"/><text x="53.0083%" y="159.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12,036,108 samples, 1.20%)</title><rect x="59.8796%" y="133" width="1.2036%" height="15" fill="rgb(230,49,44)" fg:x="598796373" fg:w="12036108"/><text x="60.1296%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (12,036,108 samples, 1.20%)</title><rect x="59.8796%" y="117" width="1.2036%" height="15" fill="rgb(229,67,23)" fg:x="598796373" fg:w="12036108"/><text x="60.1296%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,036,108 samples, 1.20%)</title><rect x="59.8796%" y="101" width="1.2036%" height="15" fill="rgb(249,83,47)" fg:x="598796373" fg:w="12036108"/><text x="60.1296%" y="111.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (420,260,771 samples, 42.03%)</title><rect x="20.2608%" y="325" width="42.0261%" height="15" fill="rgb(215,43,3)" fg:x="202607818" fg:w="420260771"/><text x="20.5108%" y="335.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="309" width="18.1545%" height="15" fill="rgb(238,154,13)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="319.50">core::cmp::impls::&lt;impl core..</text></g><g><title>core::cmp::PartialOrd::lt (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="293" width="18.1545%" height="15" fill="rgb(219,56,2)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="303.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="277" width="18.1545%" height="15" fill="rgb(233,0,4)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="287.50">&lt;aoc_2024_megaproject::probl..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="261" width="18.1545%" height="15" fill="rgb(235,30,7)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="271.50">aoc_2024_megaproject::proble..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="245" width="18.1545%" height="15" fill="rgb(250,79,13)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="255.50">std::collections::hash::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="229" width="18.1545%" height="15" fill="rgb(211,146,34)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="239.50">hashbrown::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (181,544,629 samples, 18.15%)</title><rect x="44.1324%" y="213" width="18.1545%" height="15" fill="rgb(228,22,38)" fg:x="441323960" fg:w="181544629"/><text x="44.3824%" y="223.50">hashbrown::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (139,418,251 samples, 13.94%)</title><rect x="48.3450%" y="197" width="13.9418%" height="15" fill="rgb(235,168,5)" fg:x="483450338" fg:w="139418251"/><text x="48.5950%" y="207.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (139,418,251 samples, 13.94%)</title><rect x="48.3450%" y="181" width="13.9418%" height="15" fill="rgb(221,155,16)" fg:x="483450338" fg:w="139418251"/><text x="48.5950%" y="191.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (139,418,251 samples, 13.94%)</title><rect x="48.3450%" y="165" width="13.9418%" height="15" fill="rgb(215,215,53)" fg:x="483450338" fg:w="139418251"/><text x="48.5950%" y="175.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (12,036,108 samples, 1.20%)</title><rect x="61.0832%" y="149" width="1.2036%" height="15" fill="rgb(223,4,10)" fg:x="610832481" fg:w="12036108"/><text x="61.3332%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="64.1926%" y="165" width="0.2006%" height="15" fill="rgb(234,103,6)" fg:x="641925760" fg:w="2006018"/><text x="64.4426%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="64.1926%" y="149" width="0.2006%" height="15" fill="rgb(227,97,0)" fg:x="641925760" fg:w="2006018"/><text x="64.4426%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.70%)</title><rect x="64.1926%" y="181" width="0.7021%" height="15" fill="rgb(234,150,53)" fg:x="641925760" fg:w="7021063"/><text x="64.4426%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.50%)</title><rect x="64.3932%" y="165" width="0.5015%" height="15" fill="rgb(228,201,54)" fg:x="643931778" fg:w="5015045"/><text x="64.6432%" y="175.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,006,018 samples, 0.20%)</title><rect x="64.8947%" y="181" width="0.2006%" height="15" fill="rgb(222,22,37)" fg:x="648946823" fg:w="2006018"/><text x="65.1447%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2,006,018 samples, 0.20%)</title><rect x="64.8947%" y="165" width="0.2006%" height="15" fill="rgb(237,53,32)" fg:x="648946823" fg:w="2006018"/><text x="65.1447%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="65.0953%" y="133" width="0.2006%" height="15" fill="rgb(233,25,53)" fg:x="650952841" fg:w="2006018"/><text x="65.3453%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="65.0953%" y="117" width="0.2006%" height="15" fill="rgb(210,40,34)" fg:x="650952841" fg:w="2006018"/><text x="65.3453%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="65.0953%" y="101" width="0.2006%" height="15" fill="rgb(241,220,44)" fg:x="650952841" fg:w="2006018"/><text x="65.3453%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="65.0953%" y="85" width="0.2006%" height="15" fill="rgb(235,28,35)" fg:x="650952841" fg:w="2006018"/><text x="65.3453%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="65.0953%" y="69" width="0.2006%" height="15" fill="rgb(210,56,17)" fg:x="650952841" fg:w="2006018"/><text x="65.3453%" y="79.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="65.0953%" y="53" width="0.2006%" height="15" fill="rgb(224,130,29)" fg:x="650952841" fg:w="2006018"/><text x="65.3453%" y="63.50"></text></g><g><title>ahash::operations::folded_multiply (4,012,036 samples, 0.40%)</title><rect x="66.0983%" y="85" width="0.4012%" height="15" fill="rgb(235,212,8)" fg:x="660982931" fg:w="4012036"/><text x="66.3483%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4,012,036 samples, 0.40%)</title><rect x="66.0983%" y="69" width="0.4012%" height="15" fill="rgb(223,33,50)" fg:x="660982931" fg:w="4012036"/><text x="66.3483%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="66.4995%" y="85" width="0.2006%" height="15" fill="rgb(219,149,13)" fg:x="664994967" fg:w="2006018"/><text x="66.7495%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (16,048,144 samples, 1.60%)</title><rect x="65.2959%" y="101" width="1.6048%" height="15" fill="rgb(250,156,29)" fg:x="652958859" fg:w="16048144"/><text x="65.5459%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,006,018 samples, 0.20%)</title><rect x="66.7001%" y="85" width="0.2006%" height="15" fill="rgb(216,193,19)" fg:x="667000985" fg:w="2006018"/><text x="66.9501%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (31,093,279 samples, 3.11%)</title><rect x="64.1926%" y="213" width="3.1093%" height="15" fill="rgb(216,135,14)" fg:x="641925760" fg:w="31093279"/><text x="64.4426%" y="223.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (31,093,279 samples, 3.11%)</title><rect x="64.1926%" y="197" width="3.1093%" height="15" fill="rgb(241,47,5)" fg:x="641925760" fg:w="31093279"/><text x="64.4426%" y="207.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22,066,198 samples, 2.21%)</title><rect x="65.0953%" y="181" width="2.2066%" height="15" fill="rgb(233,42,35)" fg:x="650952841" fg:w="22066198"/><text x="65.3453%" y="191.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (22,066,198 samples, 2.21%)</title><rect x="65.0953%" y="165" width="2.2066%" height="15" fill="rgb(231,13,6)" fg:x="650952841" fg:w="22066198"/><text x="65.3453%" y="175.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (22,066,198 samples, 2.21%)</title><rect x="65.0953%" y="149" width="2.2066%" height="15" fill="rgb(207,181,40)" fg:x="650952841" fg:w="22066198"/><text x="65.3453%" y="159.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (20,060,180 samples, 2.01%)</title><rect x="65.2959%" y="133" width="2.0060%" height="15" fill="rgb(254,173,49)" fg:x="652958859" fg:w="20060180"/><text x="65.5459%" y="143.50">c..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (20,060,180 samples, 2.01%)</title><rect x="65.2959%" y="117" width="2.0060%" height="15" fill="rgb(221,1,38)" fg:x="652958859" fg:w="20060180"/><text x="65.5459%" y="127.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4,012,036 samples, 0.40%)</title><rect x="66.9007%" y="101" width="0.4012%" height="15" fill="rgb(206,124,46)" fg:x="669007003" fg:w="4012036"/><text x="67.1507%" y="111.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7,021,063 samples, 0.70%)</title><rect x="68.3049%" y="165" width="0.7021%" height="15" fill="rgb(249,21,11)" fg:x="683049129" fg:w="7021063"/><text x="68.5549%" y="175.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (7,021,063 samples, 0.70%)</title><rect x="68.3049%" y="149" width="0.7021%" height="15" fill="rgb(222,201,40)" fg:x="683049129" fg:w="7021063"/><text x="68.5549%" y="159.50"></text></g><g><title>core::intrinsics::likely (10,030,090 samples, 1.00%)</title><rect x="69.0070%" y="165" width="1.0030%" height="15" fill="rgb(235,61,29)" fg:x="690070192" fg:w="10030090"/><text x="69.2570%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (2,006,018 samples, 0.20%)</title><rect x="70.0100%" y="165" width="0.2006%" height="15" fill="rgb(219,207,3)" fg:x="700100282" fg:w="2006018"/><text x="70.2600%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,006,018 samples, 0.20%)</title><rect x="70.0100%" y="149" width="0.2006%" height="15" fill="rgb(222,56,46)" fg:x="700100282" fg:w="2006018"/><text x="70.2600%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="70.0100%" y="133" width="0.2006%" height="15" fill="rgb(239,76,54)" fg:x="700100282" fg:w="2006018"/><text x="70.2600%" y="143.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (7,021,063 samples, 0.70%)</title><rect x="70.2106%" y="165" width="0.7021%" height="15" fill="rgb(231,124,27)" fg:x="702106300" fg:w="7021063"/><text x="70.4606%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7,021,063 samples, 0.70%)</title><rect x="70.2106%" y="149" width="0.7021%" height="15" fill="rgb(249,195,6)" fg:x="702106300" fg:w="7021063"/><text x="70.4606%" y="159.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="165" width="0.2006%" height="15" fill="rgb(237,174,47)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (58,174,522 samples, 5.82%)</title><rect x="71.1133%" y="149" width="5.8175%" height="15" fill="rgb(206,201,31)" fg:x="711133381" fg:w="58174522"/><text x="71.3633%" y="159.50">hashbro..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (58,174,522 samples, 5.82%)</title><rect x="71.1133%" y="133" width="5.8175%" height="15" fill="rgb(231,57,52)" fg:x="711133381" fg:w="58174522"/><text x="71.3633%" y="143.50">&lt;Q as h..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (58,174,522 samples, 5.82%)</title><rect x="71.1133%" y="117" width="5.8175%" height="15" fill="rgb(248,177,22)" fg:x="711133381" fg:w="58174522"/><text x="71.3633%" y="127.50">core::c..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (58,174,522 samples, 5.82%)</title><rect x="71.1133%" y="101" width="5.8175%" height="15" fill="rgb(215,211,37)" fg:x="711133381" fg:w="58174522"/><text x="71.3633%" y="111.50">core::a..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (58,174,522 samples, 5.82%)</title><rect x="71.1133%" y="85" width="5.8175%" height="15" fill="rgb(241,128,51)" fg:x="711133381" fg:w="58174522"/><text x="71.3633%" y="95.50">&lt;T as c..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (11,033,099 samples, 1.10%)</title><rect x="76.9308%" y="149" width="1.1033%" height="15" fill="rgb(227,165,31)" fg:x="769307903" fg:w="11033099"/><text x="77.1808%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (11,033,099 samples, 1.10%)</title><rect x="76.9308%" y="133" width="1.1033%" height="15" fill="rgb(228,167,24)" fg:x="769307903" fg:w="11033099"/><text x="77.1808%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11,033,099 samples, 1.10%)</title><rect x="76.9308%" y="117" width="1.1033%" height="15" fill="rgb(228,143,12)" fg:x="769307903" fg:w="11033099"/><text x="77.1808%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (74,222,666 samples, 7.42%)</title><rect x="71.1133%" y="165" width="7.4223%" height="15" fill="rgb(249,149,8)" fg:x="711133381" fg:w="74222666"/><text x="71.3633%" y="175.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5,015,045 samples, 0.50%)</title><rect x="78.0341%" y="149" width="0.5015%" height="15" fill="rgb(243,35,44)" fg:x="780341002" fg:w="5015045"/><text x="78.2841%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5,015,045 samples, 0.50%)</title><rect x="78.0341%" y="133" width="0.5015%" height="15" fill="rgb(246,89,9)" fg:x="780341002" fg:w="5015045"/><text x="78.2841%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5,015,045 samples, 0.50%)</title><rect x="78.0341%" y="117" width="0.5015%" height="15" fill="rgb(233,213,13)" fg:x="780341002" fg:w="5015045"/><text x="78.2841%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::gt (171,514,539 samples, 17.15%)</title><rect x="63.0893%" y="309" width="17.1515%" height="15" fill="rgb(233,141,41)" fg:x="630892661" fg:w="171514539"/><text x="63.3393%" y="319.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (171,514,539 samples, 17.15%)</title><rect x="63.0893%" y="293" width="17.1515%" height="15" fill="rgb(239,167,4)" fg:x="630892661" fg:w="171514539"/><text x="63.3393%" y="303.50">&lt;aoc_2024_megaproject::prob..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (168,505,512 samples, 16.85%)</title><rect x="63.3902%" y="277" width="16.8506%" height="15" fill="rgb(209,217,16)" fg:x="633901688" fg:w="168505512"/><text x="63.6402%" y="287.50">aoc_2024_megaproject::prob..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (165,496,485 samples, 16.55%)</title><rect x="63.6911%" y="261" width="16.5496%" height="15" fill="rgb(219,88,35)" fg:x="636910715" fg:w="165496485"/><text x="63.9411%" y="271.50">std::collections::hash::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (165,496,485 samples, 16.55%)</title><rect x="63.6911%" y="245" width="16.5496%" height="15" fill="rgb(220,193,23)" fg:x="636910715" fg:w="165496485"/><text x="63.9411%" y="255.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (165,496,485 samples, 16.55%)</title><rect x="63.6911%" y="229" width="16.5496%" height="15" fill="rgb(230,90,52)" fg:x="636910715" fg:w="165496485"/><text x="63.9411%" y="239.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (129,388,161 samples, 12.94%)</title><rect x="67.3019%" y="213" width="12.9388%" height="15" fill="rgb(252,106,19)" fg:x="673019039" fg:w="129388161"/><text x="67.5519%" y="223.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (129,388,161 samples, 12.94%)</title><rect x="67.3019%" y="197" width="12.9388%" height="15" fill="rgb(206,74,20)" fg:x="673019039" fg:w="129388161"/><text x="67.5519%" y="207.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (129,388,161 samples, 12.94%)</title><rect x="67.3019%" y="181" width="12.9388%" height="15" fill="rgb(230,138,44)" fg:x="673019039" fg:w="129388161"/><text x="67.5519%" y="191.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (17,051,153 samples, 1.71%)</title><rect x="78.5356%" y="165" width="1.7051%" height="15" fill="rgb(235,182,43)" fg:x="785356047" fg:w="17051153"/><text x="78.7856%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="80.2407%" y="309" width="0.2006%" height="15" fill="rgb(242,16,51)" fg:x="802407200" fg:w="2006018"/><text x="80.4907%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="80.2407%" y="293" width="0.2006%" height="15" fill="rgb(248,9,4)" fg:x="802407200" fg:w="2006018"/><text x="80.4907%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="80.2407%" y="277" width="0.2006%" height="15" fill="rgb(210,31,22)" fg:x="802407200" fg:w="2006018"/><text x="80.4907%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,006,018 samples, 0.20%)</title><rect x="81.3440%" y="293" width="0.2006%" height="15" fill="rgb(239,54,39)" fg:x="813440299" fg:w="2006018"/><text x="81.5940%" y="303.50"></text></g><g><title>core::intrinsics::copy (10,030,090 samples, 1.00%)</title><rect x="81.6449%" y="261" width="1.0030%" height="15" fill="rgb(230,99,41)" fg:x="816449326" fg:w="10030090"/><text x="81.8949%" y="271.50"></text></g><g><title>[libc.so.6] (8,024,072 samples, 0.80%)</title><rect x="81.8455%" y="245" width="0.8024%" height="15" fill="rgb(253,106,12)" fg:x="818455344" fg:w="8024072"/><text x="82.0955%" y="255.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::sort_with_partialord (206,619,854 samples, 20.66%)</title><rect x="62.2869%" y="325" width="20.6620%" height="15" fill="rgb(213,46,41)" fg:x="622868589" fg:w="206619854"/><text x="62.5369%" y="335.50">aoc_2024_megaproject::problems::d..</text></g><g><title>core::slice::&lt;impl [T]&gt;::rotate_right (25,075,225 samples, 2.51%)</title><rect x="80.4413%" y="309" width="2.5075%" height="15" fill="rgb(215,133,35)" fg:x="804413218" fg:w="25075225"/><text x="80.6913%" y="319.50">co..</text></g><g><title>core::slice::rotate::ptr_rotate (14,042,126 samples, 1.40%)</title><rect x="81.5446%" y="293" width="1.4042%" height="15" fill="rgb(213,28,5)" fg:x="815446317" fg:w="14042126"/><text x="81.7946%" y="303.50"></text></g><g><title>core::slice::rotate::ptr_rotate_memmove (14,042,126 samples, 1.40%)</title><rect x="81.5446%" y="277" width="1.4042%" height="15" fill="rgb(215,77,49)" fg:x="815446317" fg:w="14042126"/><text x="81.7946%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="82.6479%" y="261" width="0.3009%" height="15" fill="rgb(248,100,22)" fg:x="826479416" fg:w="3009027"/><text x="82.8979%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="84.4534%" y="213" width="0.6018%" height="15" fill="rgb(208,67,9)" fg:x="844533578" fg:w="6018054"/><text x="84.7034%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="84.4534%" y="197" width="0.6018%" height="15" fill="rgb(219,133,21)" fg:x="844533578" fg:w="6018054"/><text x="84.7034%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,018,054 samples, 0.60%)</title><rect x="84.4534%" y="181" width="0.6018%" height="15" fill="rgb(246,46,29)" fg:x="844533578" fg:w="6018054"/><text x="84.7034%" y="191.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="84.9549%" y="165" width="0.1003%" height="15" fill="rgb(246,185,52)" fg:x="849548623" fg:w="1003009"/><text x="85.2049%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5,015,045 samples, 0.50%)</title><rect x="85.0552%" y="213" width="0.5015%" height="15" fill="rgb(252,136,11)" fg:x="850551632" fg:w="5015045"/><text x="85.3052%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5,015,045 samples, 0.50%)</title><rect x="85.0552%" y="197" width="0.5015%" height="15" fill="rgb(219,138,53)" fg:x="850551632" fg:w="5015045"/><text x="85.3052%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (5,015,045 samples, 0.50%)</title><rect x="85.0552%" y="181" width="0.5015%" height="15" fill="rgb(211,51,23)" fg:x="850551632" fg:w="5015045"/><text x="85.3052%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (1,003,009 samples, 0.10%)</title><rect x="86.4594%" y="165" width="0.1003%" height="15" fill="rgb(247,221,28)" fg:x="864593758" fg:w="1003009"/><text x="86.7094%" y="175.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="86.5597%" y="165" width="0.1003%" height="15" fill="rgb(251,222,45)" fg:x="865596767" fg:w="1003009"/><text x="86.8097%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (43,129,387 samples, 4.31%)</title><rect x="82.9488%" y="325" width="4.3129%" height="15" fill="rgb(217,162,53)" fg:x="829488443" fg:w="43129387"/><text x="83.1988%" y="335.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (43,129,387 samples, 4.31%)</title><rect x="82.9488%" y="309" width="4.3129%" height="15" fill="rgb(229,93,14)" fg:x="829488443" fg:w="43129387"/><text x="83.1988%" y="319.50">core:..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (43,129,387 samples, 4.31%)</title><rect x="82.9488%" y="293" width="4.3129%" height="15" fill="rgb(209,67,49)" fg:x="829488443" fg:w="43129387"/><text x="83.1988%" y="303.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43,129,387 samples, 4.31%)</title><rect x="82.9488%" y="277" width="4.3129%" height="15" fill="rgb(213,87,29)" fg:x="829488443" fg:w="43129387"/><text x="83.1988%" y="287.50">&lt;core..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (43,129,387 samples, 4.31%)</title><rect x="82.9488%" y="261" width="4.3129%" height="15" fill="rgb(205,151,52)" fg:x="829488443" fg:w="43129387"/><text x="83.1988%" y="271.50">&lt;core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (43,129,387 samples, 4.31%)</title><rect x="82.9488%" y="245" width="4.3129%" height="15" fill="rgb(253,215,39)" fg:x="829488443" fg:w="43129387"/><text x="83.1988%" y="255.50">core:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (36,108,324 samples, 3.61%)</title><rect x="83.6510%" y="229" width="3.6108%" height="15" fill="rgb(221,220,41)" fg:x="836509506" fg:w="36108324"/><text x="83.9010%" y="239.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (17,051,153 samples, 1.71%)</title><rect x="85.5567%" y="213" width="1.7051%" height="15" fill="rgb(218,133,21)" fg:x="855566677" fg:w="17051153"/><text x="85.8067%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (15,045,135 samples, 1.50%)</title><rect x="85.7573%" y="197" width="1.5045%" height="15" fill="rgb(221,193,43)" fg:x="857572695" fg:w="15045135"/><text x="86.0073%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (12,036,108 samples, 1.20%)</title><rect x="86.0582%" y="181" width="1.2036%" height="15" fill="rgb(240,128,52)" fg:x="860581722" fg:w="12036108"/><text x="86.3082%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_naive (6,018,054 samples, 0.60%)</title><rect x="86.6600%" y="165" width="0.6018%" height="15" fill="rgb(253,114,12)" fg:x="866599776" fg:w="6018054"/><text x="86.9100%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="91.5747%" y="261" width="0.6018%" height="15" fill="rgb(215,223,47)" fg:x="915747217" fg:w="6018054"/><text x="91.8247%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,018,054 samples, 0.60%)</title><rect x="91.5747%" y="245" width="0.6018%" height="15" fill="rgb(248,225,23)" fg:x="915747217" fg:w="6018054"/><text x="91.8247%" y="255.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="91.7753%" y="229" width="0.4012%" height="15" fill="rgb(250,108,0)" fg:x="917753235" fg:w="4012036"/><text x="92.0253%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,009,027 samples, 0.30%)</title><rect x="92.1765%" y="261" width="0.3009%" height="15" fill="rgb(228,208,7)" fg:x="921765271" fg:w="3009027"/><text x="92.4265%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,009,027 samples, 0.30%)</title><rect x="92.1765%" y="245" width="0.3009%" height="15" fill="rgb(244,45,10)" fg:x="921765271" fg:w="3009027"/><text x="92.4265%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,009,027 samples, 0.30%)</title><rect x="92.1765%" y="229" width="0.3009%" height="15" fill="rgb(207,125,25)" fg:x="921765271" fg:w="3009027"/><text x="92.4265%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (60,180,540 samples, 6.02%)</title><rect x="87.2618%" y="325" width="6.0181%" height="15" fill="rgb(210,195,18)" fg:x="872617830" fg:w="60180540"/><text x="87.5118%" y="335.50">core::st..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (31,093,279 samples, 3.11%)</title><rect x="90.1705%" y="309" width="3.1093%" height="15" fill="rgb(249,80,12)" fg:x="901705091" fg:w="31093279"/><text x="90.4205%" y="319.50">&lt;&amp;s..</text></g><g><title>core::str::pattern::StrSearcher::new (29,087,261 samples, 2.91%)</title><rect x="90.3711%" y="293" width="2.9087%" height="15" fill="rgb(221,65,9)" fg:x="903711109" fg:w="29087261"/><text x="90.6211%" y="303.50">co..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (21,063,189 samples, 2.11%)</title><rect x="91.1735%" y="277" width="2.1063%" height="15" fill="rgb(235,49,36)" fg:x="911735181" fg:w="21063189"/><text x="91.4235%" y="287.50">c..</text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (8,024,072 samples, 0.80%)</title><rect x="92.4774%" y="261" width="0.8024%" height="15" fill="rgb(225,32,20)" fg:x="924774298" fg:w="8024072"/><text x="92.7274%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,024,072 samples, 0.80%)</title><rect x="92.4774%" y="245" width="0.8024%" height="15" fill="rgb(215,141,46)" fg:x="924774298" fg:w="8024072"/><text x="92.7274%" y="255.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.40%)</title><rect x="93.6810%" y="245" width="0.4012%" height="15" fill="rgb(250,160,47)" fg:x="936810406" fg:w="4012036"/><text x="93.9310%" y="255.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (4,012,036 samples, 0.40%)</title><rect x="93.6810%" y="229" width="0.4012%" height="15" fill="rgb(216,222,40)" fg:x="936810406" fg:w="4012036"/><text x="93.9310%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="94.0822%" y="245" width="0.1003%" height="15" fill="rgb(234,217,39)" fg:x="940822442" fg:w="1003009"/><text x="94.3322%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="94.0822%" y="229" width="0.1003%" height="15" fill="rgb(207,178,40)" fg:x="940822442" fg:w="1003009"/><text x="94.3322%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::full (11,033,099 samples, 1.10%)</title><rect x="94.1825%" y="245" width="1.1033%" height="15" fill="rgb(221,136,13)" fg:x="941825451" fg:w="11033099"/><text x="94.4325%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="245" width="0.1003%" height="15" fill="rgb(249,199,10)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="229" width="0.1003%" height="15" fill="rgb(249,222,13)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="213" width="0.1003%" height="15" fill="rgb(244,185,38)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="197" width="0.1003%" height="15" fill="rgb(236,202,9)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="207.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="181" width="0.1003%" height="15" fill="rgb(250,229,37)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="191.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="165" width="0.1003%" height="15" fill="rgb(206,174,23)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="175.50"></text></g><g><title>core::intrinsics::unlikely (2,006,018 samples, 0.20%)</title><rect x="95.3862%" y="229" width="0.2006%" height="15" fill="rgb(211,33,43)" fg:x="953861559" fg:w="2006018"/><text x="95.6362%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (24,072,216 samples, 2.41%)</title><rect x="93.4804%" y="293" width="2.4072%" height="15" fill="rgb(245,58,50)" fg:x="934804388" fg:w="24072216"/><text x="93.7304%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (24,072,216 samples, 2.41%)</title><rect x="93.4804%" y="277" width="2.4072%" height="15" fill="rgb(244,68,36)" fg:x="934804388" fg:w="24072216"/><text x="93.7304%" y="287.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (24,072,216 samples, 2.41%)</title><rect x="93.4804%" y="261" width="2.4072%" height="15" fill="rgb(232,229,15)" fg:x="934804388" fg:w="24072216"/><text x="93.7304%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (5,015,045 samples, 0.50%)</title><rect x="95.3862%" y="245" width="0.5015%" height="15" fill="rgb(254,30,23)" fg:x="953861559" fg:w="5015045"/><text x="95.6362%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3,009,027 samples, 0.30%)</title><rect x="95.5868%" y="229" width="0.3009%" height="15" fill="rgb(235,160,14)" fg:x="955867577" fg:w="3009027"/><text x="95.8368%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (3,009,027 samples, 0.30%)</title><rect x="95.5868%" y="213" width="0.3009%" height="15" fill="rgb(212,155,44)" fg:x="955867577" fg:w="3009027"/><text x="95.8368%" y="223.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="95.8877%" y="245" width="0.5015%" height="15" fill="rgb(226,2,50)" fg:x="958876604" fg:w="5015045"/><text x="96.1377%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3,009,027 samples, 0.30%)</title><rect x="96.0883%" y="229" width="0.3009%" height="15" fill="rgb(234,177,6)" fg:x="960882622" fg:w="3009027"/><text x="96.3383%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (10,030,090 samples, 1.00%)</title><rect x="95.8877%" y="261" width="1.0030%" height="15" fill="rgb(217,24,9)" fg:x="958876604" fg:w="10030090"/><text x="96.1377%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.50%)</title><rect x="96.3892%" y="245" width="0.5015%" height="15" fill="rgb(220,13,46)" fg:x="963891649" fg:w="5015045"/><text x="96.6392%" y="255.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.10%)</title><rect x="97.5928%" y="213" width="0.1003%" height="15" fill="rgb(239,221,27)" fg:x="975927757" fg:w="1003009"/><text x="97.8428%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,003,009 samples, 0.10%)</title><rect x="97.5928%" y="197" width="0.1003%" height="15" fill="rgb(222,198,25)" fg:x="975927757" fg:w="1003009"/><text x="97.8428%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,003,009 samples, 0.10%)</title><rect x="97.5928%" y="181" width="0.1003%" height="15" fill="rgb(211,99,13)" fg:x="975927757" fg:w="1003009"/><text x="97.8428%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,003,009 samples, 0.10%)</title><rect x="97.5928%" y="165" width="0.1003%" height="15" fill="rgb(232,111,31)" fg:x="975927757" fg:w="1003009"/><text x="97.8428%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="97.7934%" y="165" width="0.9027%" height="15" fill="rgb(245,82,37)" fg:x="977933775" fg:w="9027081"/><text x="98.0434%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3,009,027 samples, 0.30%)</title><rect x="98.3952%" y="149" width="0.3009%" height="15" fill="rgb(227,149,46)" fg:x="983951829" fg:w="3009027"/><text x="98.6452%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (30,090,270 samples, 3.01%)</title><rect x="95.8877%" y="293" width="3.0090%" height="15" fill="rgb(218,36,50)" fg:x="958876604" fg:w="30090270"/><text x="96.1377%" y="303.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (30,090,270 samples, 3.01%)</title><rect x="95.8877%" y="277" width="3.0090%" height="15" fill="rgb(226,80,48)" fg:x="958876604" fg:w="30090270"/><text x="96.1377%" y="287.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20,060,180 samples, 2.01%)</title><rect x="96.8907%" y="261" width="2.0060%" height="15" fill="rgb(238,224,15)" fg:x="968906694" fg:w="20060180"/><text x="97.1407%" y="271.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (20,060,180 samples, 2.01%)</title><rect x="96.8907%" y="245" width="2.0060%" height="15" fill="rgb(241,136,10)" fg:x="968906694" fg:w="20060180"/><text x="97.1407%" y="255.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (20,060,180 samples, 2.01%)</title><rect x="96.8907%" y="229" width="2.0060%" height="15" fill="rgb(208,32,45)" fg:x="968906694" fg:w="20060180"/><text x="97.1407%" y="239.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (12,036,108 samples, 1.20%)</title><rect x="97.6931%" y="213" width="1.2036%" height="15" fill="rgb(207,135,9)" fg:x="976930766" fg:w="12036108"/><text x="97.9431%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (12,036,108 samples, 1.20%)</title><rect x="97.6931%" y="197" width="1.2036%" height="15" fill="rgb(206,86,44)" fg:x="976930766" fg:w="12036108"/><text x="97.9431%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (12,036,108 samples, 1.20%)</title><rect x="97.6931%" y="181" width="1.2036%" height="15" fill="rgb(245,177,15)" fg:x="976930766" fg:w="12036108"/><text x="97.9431%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="98.6961%" y="165" width="0.2006%" height="15" fill="rgb(206,64,50)" fg:x="986960856" fg:w="2006018"/><text x="98.9461%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7,021,063 samples, 0.70%)</title><rect x="98.8967%" y="277" width="0.7021%" height="15" fill="rgb(234,36,40)" fg:x="988966874" fg:w="7021063"/><text x="99.1467%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7,021,063 samples, 0.70%)</title><rect x="98.8967%" y="261" width="0.7021%" height="15" fill="rgb(213,64,8)" fg:x="988966874" fg:w="7021063"/><text x="99.1467%" y="271.50"></text></g><g><title>core::ptr::write (7,021,063 samples, 0.70%)</title><rect x="98.8967%" y="245" width="0.7021%" height="15" fill="rgb(210,75,36)" fg:x="988966874" fg:w="7021063"/><text x="99.1467%" y="255.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (997,993,955 samples, 99.80%)</title><rect x="0.0000%" y="373" width="99.7994%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="383.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2 (997,993,955 samples, 99.80%)</title><rect x="0.0000%" y="357" width="99.7994%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="367.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day5::part2 (997,993,955 samples, 99.80%)</title><rect x="0.0000%" y="341" width="99.7994%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="351.50">aoc_2024_megaproject::problems::day5::part2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (65,195,585 samples, 6.52%)</title><rect x="93.2798%" y="325" width="6.5196%" height="15" fill="rgb(221,76,26)" fg:x="932798370" fg:w="65195585"/><text x="93.5298%" y="335.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (64,192,576 samples, 6.42%)</title><rect x="93.3801%" y="309" width="6.4193%" height="15" fill="rgb(225,139,18)" fg:x="933801379" fg:w="64192576"/><text x="93.6301%" y="319.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (9,027,081 samples, 0.90%)</title><rect x="98.8967%" y="293" width="0.9027%" height="15" fill="rgb(230,137,11)" fg:x="988966874" fg:w="9027081"/><text x="99.1467%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2,006,018 samples, 0.20%)</title><rect x="99.5988%" y="277" width="0.2006%" height="15" fill="rgb(212,28,1)" fg:x="995987937" fg:w="2006018"/><text x="99.8488%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="261" width="0.1003%" height="15" fill="rgb(248,164,17)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="245" width="0.1003%" height="15" fill="rgb(222,171,42)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="229" width="0.1003%" height="15" fill="rgb(243,84,45)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="373" width="0.1003%" height="15" fill="rgb(252,49,23)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="383.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="357" width="0.1003%" height="15" fill="rgb(215,19,7)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="341" width="0.1003%" height="15" fill="rgb(238,81,41)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="325" width="0.1003%" height="15" fill="rgb(210,199,37)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="309" width="0.1003%" height="15" fill="rgb(244,192,49)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="293" width="0.1003%" height="15" fill="rgb(226,211,11)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="277" width="0.1003%" height="15" fill="rgb(236,162,54)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="261" width="0.1003%" height="15" fill="rgb(220,229,9)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="245" width="0.1003%" height="15" fill="rgb(250,87,22)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="229" width="0.1003%" height="15" fill="rgb(239,43,17)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="213" width="0.1003%" height="15" fill="rgb(231,177,25)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="197" width="0.1003%" height="15" fill="rgb(219,179,1)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="181" width="0.1003%" height="15" fill="rgb(238,219,53)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="165" width="0.1003%" height="15" fill="rgb(232,167,36)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="149" width="0.1003%" height="15" fill="rgb(244,19,51)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="159.50"></text></g><g><title>all (999,999,973 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="703.50"></text></g><g><title>aoc-2024-megapr (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="687.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="671.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="639.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="543.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="415.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="399.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="373" width="0.1003%" height="15" fill="rgb(244,186,29)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="383.50"></text></g><g><title>std::env::args_os (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="357" width="0.1003%" height="15" fill="rgb(234,111,31)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="367.50"></text></g><g><title>std::sys::args::unix::args (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="341" width="0.1003%" height="15" fill="rgb(241,149,10)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="351.50"></text></g><g><title>core::ffi::c_str::CStr::from_ptr (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="325" width="0.1003%" height="15" fill="rgb(249,206,44)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="335.50"></text></g><g><title>core::ffi::c_str::strlen (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="309" width="0.1003%" height="15" fill="rgb(251,153,30)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="319.50"></text></g><g><title>core::ffi::c_str::strlen::runtime (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="293" width="0.1003%" height="15" fill="rgb(239,152,38)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="303.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="277" width="0.1003%" height="15" fill="rgb(249,139,47)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="287.50"></text></g></svg></svg>