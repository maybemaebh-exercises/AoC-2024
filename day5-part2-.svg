<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="999999973"><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.60%)</title><rect x="8.1244%" y="421" width="0.6018%" height="15" fill="rgb(227,0,7)" fg:x="81243729" fg:w="6018054"/><text x="8.3744%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (6,018,054 samples, 0.60%)</title><rect x="8.1244%" y="405" width="0.6018%" height="15" fill="rgb(217,0,24)" fg:x="81243729" fg:w="6018054"/><text x="8.3744%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (6,018,054 samples, 0.60%)</title><rect x="8.1244%" y="389" width="0.6018%" height="15" fill="rgb(221,193,54)" fg:x="81243729" fg:w="6018054"/><text x="8.3744%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="8.6259%" y="373" width="0.1003%" height="15" fill="rgb(248,212,6)" fg:x="86258774" fg:w="1003009"/><text x="8.8759%" y="383.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (1,003,009 samples, 0.10%)</title><rect x="8.7262%" y="421" width="0.1003%" height="15" fill="rgb(208,68,35)" fg:x="87261783" fg:w="1003009"/><text x="8.9762%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,009,027 samples, 0.30%)</title><rect x="8.8265%" y="421" width="0.3009%" height="15" fill="rgb(232,128,0)" fg:x="88264792" fg:w="3009027"/><text x="9.0765%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,009,027 samples, 0.30%)</title><rect x="8.8265%" y="405" width="0.3009%" height="15" fill="rgb(207,160,47)" fg:x="88264792" fg:w="3009027"/><text x="9.0765%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="8.8265%" y="389" width="0.3009%" height="15" fill="rgb(228,23,34)" fg:x="88264792" fg:w="3009027"/><text x="9.0765%" y="399.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (66,198,594 samples, 6.62%)</title><rect x="2.7081%" y="453" width="6.6199%" height="15" fill="rgb(218,30,26)" fg:x="27081243" fg:w="66198594"/><text x="2.9581%" y="463.50">&lt;core::st..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (57,171,513 samples, 5.72%)</title><rect x="3.6108%" y="437" width="5.7172%" height="15" fill="rgb(220,122,19)" fg:x="36108324" fg:w="57171513"/><text x="3.8608%" y="447.50">core::s..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="9.1274%" y="421" width="0.2006%" height="15" fill="rgb(250,228,42)" fg:x="91273819" fg:w="2006018"/><text x="9.3774%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="9.1274%" y="405" width="0.2006%" height="15" fill="rgb(240,193,28)" fg:x="91273819" fg:w="2006018"/><text x="9.3774%" y="415.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (91,273,819 samples, 9.13%)</title><rect x="0.4012%" y="485" width="9.1274%" height="15" fill="rgb(216,20,37)" fg:x="4012036" fg:w="91273819"/><text x="0.6512%" y="495.50">&lt;core::str::i..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (89,267,801 samples, 8.93%)</title><rect x="0.6018%" y="469" width="8.9268%" height="15" fill="rgb(206,188,39)" fg:x="6018054" fg:w="89267801"/><text x="0.8518%" y="479.50">core::str::it..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (2,006,018 samples, 0.20%)</title><rect x="9.3280%" y="453" width="0.2006%" height="15" fill="rgb(217,207,13)" fg:x="93279837" fg:w="2006018"/><text x="9.5780%" y="463.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2,006,018 samples, 0.20%)</title><rect x="9.3280%" y="437" width="0.2006%" height="15" fill="rgb(231,73,38)" fg:x="93279837" fg:w="2006018"/><text x="9.5780%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (104,312,936 samples, 10.43%)</title><rect x="0.4012%" y="501" width="10.4313%" height="15" fill="rgb(225,20,46)" fg:x="4012036" fg:w="104312936"/><text x="0.6512%" y="511.50">&lt;core::iter::ad..</text></g><g><title>core::option::Option&lt;T&gt;::map (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="485" width="1.3039%" height="15" fill="rgb(210,31,41)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="469" width="1.3039%" height="15" fill="rgb(221,200,47)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="479.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="453" width="1.3039%" height="15" fill="rgb(226,26,5)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="437" width="1.3039%" height="15" fill="rgb(249,33,26)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="447.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="421" width="1.3039%" height="15" fill="rgb(235,183,28)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="405" width="1.3039%" height="15" fill="rgb(221,5,38)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (13,039,117 samples, 1.30%)</title><rect x="9.5286%" y="389" width="1.3039%" height="15" fill="rgb(247,18,42)" fg:x="95285855" fg:w="13039117"/><text x="9.7786%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (1,003,009 samples, 0.10%)</title><rect x="10.7322%" y="373" width="0.1003%" height="15" fill="rgb(241,131,45)" fg:x="107321963" fg:w="1003009"/><text x="10.9822%" y="383.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="10.7322%" y="357" width="0.1003%" height="15" fill="rgb(249,31,29)" fg:x="107321963" fg:w="1003009"/><text x="10.9822%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (109,327,981 samples, 10.93%)</title><rect x="0.3009%" y="549" width="10.9328%" height="15" fill="rgb(225,111,53)" fg:x="3009027" fg:w="109327981"/><text x="0.5509%" y="559.50">&lt;alloc::vec::Vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (109,327,981 samples, 10.93%)</title><rect x="0.3009%" y="533" width="10.9328%" height="15" fill="rgb(238,160,17)" fg:x="3009027" fg:w="109327981"/><text x="0.5509%" y="543.50">&lt;alloc::vec::Vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (109,327,981 samples, 10.93%)</title><rect x="0.3009%" y="517" width="10.9328%" height="15" fill="rgb(214,148,48)" fg:x="3009027" fg:w="109327981"/><text x="0.5509%" y="527.50">alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::write (4,012,036 samples, 0.40%)</title><rect x="10.8325%" y="501" width="0.4012%" height="15" fill="rgb(232,36,49)" fg:x="108324972" fg:w="4012036"/><text x="11.0825%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="14.5436%" y="469" width="0.1003%" height="15" fill="rgb(209,103,24)" fg:x="145436305" fg:w="1003009"/><text x="14.7936%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="14.5436%" y="453" width="0.1003%" height="15" fill="rgb(229,88,8)" fg:x="145436305" fg:w="1003009"/><text x="14.7936%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="14.5436%" y="437" width="0.1003%" height="15" fill="rgb(213,181,19)" fg:x="145436305" fg:w="1003009"/><text x="14.7936%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="14.6439%" y="469" width="0.1003%" height="15" fill="rgb(254,191,54)" fg:x="146439314" fg:w="1003009"/><text x="14.8939%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="14.6439%" y="453" width="0.1003%" height="15" fill="rgb(241,83,37)" fg:x="146439314" fg:w="1003009"/><text x="14.8939%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="14.6439%" y="437" width="0.1003%" height="15" fill="rgb(233,36,39)" fg:x="146439314" fg:w="1003009"/><text x="14.8939%" y="447.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (29,087,261 samples, 2.91%)</title><rect x="12.0361%" y="501" width="2.9087%" height="15" fill="rgb(226,3,54)" fg:x="120361080" fg:w="29087261"/><text x="12.2861%" y="511.50">&lt;c..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (28,084,252 samples, 2.81%)</title><rect x="12.1364%" y="485" width="2.8084%" height="15" fill="rgb(245,192,40)" fg:x="121364089" fg:w="28084252"/><text x="12.3864%" y="495.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="14.7442%" y="469" width="0.2006%" height="15" fill="rgb(238,167,29)" fg:x="147442323" fg:w="2006018"/><text x="14.9942%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="14.7442%" y="453" width="0.2006%" height="15" fill="rgb(232,182,51)" fg:x="147442323" fg:w="2006018"/><text x="14.9942%" y="463.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (41,123,369 samples, 4.11%)</title><rect x="11.2337%" y="533" width="4.1123%" height="15" fill="rgb(231,60,39)" fg:x="112337008" fg:w="41123369"/><text x="11.4837%" y="543.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (41,123,369 samples, 4.11%)</title><rect x="11.2337%" y="517" width="4.1123%" height="15" fill="rgb(208,69,12)" fg:x="112337008" fg:w="41123369"/><text x="11.4837%" y="527.50">core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (4,012,036 samples, 0.40%)</title><rect x="14.9448%" y="501" width="0.4012%" height="15" fill="rgb(235,93,37)" fg:x="149448341" fg:w="4012036"/><text x="15.1948%" y="511.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (1,003,009 samples, 0.10%)</title><rect x="15.9478%" y="421" width="0.1003%" height="15" fill="rgb(213,116,39)" fg:x="159478431" fg:w="1003009"/><text x="16.1978%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,147,441 samples, 4.91%)</title><rect x="11.2337%" y="549" width="4.9147%" height="15" fill="rgb(222,207,29)" fg:x="112337008" fg:w="49147441"/><text x="11.4837%" y="559.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (8,024,072 samples, 0.80%)</title><rect x="15.3460%" y="533" width="0.8024%" height="15" fill="rgb(206,96,30)" fg:x="153460377" fg:w="8024072"/><text x="15.5960%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,021,063 samples, 0.70%)</title><rect x="15.4463%" y="517" width="0.7021%" height="15" fill="rgb(218,138,4)" fg:x="154463386" fg:w="7021063"/><text x="15.6963%" y="527.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="15.4463%" y="501" width="0.7021%" height="15" fill="rgb(250,191,14)" fg:x="154463386" fg:w="7021063"/><text x="15.6963%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (7,021,063 samples, 0.70%)</title><rect x="15.4463%" y="485" width="0.7021%" height="15" fill="rgb(239,60,40)" fg:x="154463386" fg:w="7021063"/><text x="15.6963%" y="495.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (7,021,063 samples, 0.70%)</title><rect x="15.4463%" y="469" width="0.7021%" height="15" fill="rgb(206,27,48)" fg:x="154463386" fg:w="7021063"/><text x="15.6963%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (7,021,063 samples, 0.70%)</title><rect x="15.4463%" y="453" width="0.7021%" height="15" fill="rgb(225,35,8)" fg:x="154463386" fg:w="7021063"/><text x="15.6963%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (7,021,063 samples, 0.70%)</title><rect x="15.4463%" y="437" width="0.7021%" height="15" fill="rgb(250,213,24)" fg:x="154463386" fg:w="7021063"/><text x="15.6963%" y="447.50"></text></g><g><title>core::num::can_not_overflow (1,003,009 samples, 0.10%)</title><rect x="16.0481%" y="421" width="0.1003%" height="15" fill="rgb(247,123,22)" fg:x="160481440" fg:w="1003009"/><text x="16.2981%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,012,036 samples, 0.40%)</title><rect x="17.3521%" y="469" width="0.4012%" height="15" fill="rgb(231,138,38)" fg:x="173520557" fg:w="4012036"/><text x="17.6021%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,012,036 samples, 0.40%)</title><rect x="17.3521%" y="453" width="0.4012%" height="15" fill="rgb(231,145,46)" fg:x="173520557" fg:w="4012036"/><text x="17.6021%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,012,036 samples, 0.40%)</title><rect x="17.3521%" y="437" width="0.4012%" height="15" fill="rgb(251,118,11)" fg:x="173520557" fg:w="4012036"/><text x="17.6021%" y="447.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="17.3521%" y="421" width="0.4012%" height="15" fill="rgb(217,147,25)" fg:x="173520557" fg:w="4012036"/><text x="17.6021%" y="431.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="18.2548%" y="421" width="0.1003%" height="15" fill="rgb(247,81,37)" fg:x="182547638" fg:w="1003009"/><text x="18.5048%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (4,012,036 samples, 0.40%)</title><rect x="18.3551%" y="421" width="0.4012%" height="15" fill="rgb(209,12,38)" fg:x="183550647" fg:w="4012036"/><text x="18.6051%" y="431.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (31,093,279 samples, 3.11%)</title><rect x="16.1484%" y="549" width="3.1093%" height="15" fill="rgb(227,1,9)" fg:x="161484449" fg:w="31093279"/><text x="16.3984%" y="559.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,093,279 samples, 3.11%)</title><rect x="16.1484%" y="533" width="3.1093%" height="15" fill="rgb(248,47,43)" fg:x="161484449" fg:w="31093279"/><text x="16.3984%" y="543.50">&lt;co..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,093,279 samples, 3.11%)</title><rect x="16.1484%" y="517" width="3.1093%" height="15" fill="rgb(221,10,30)" fg:x="161484449" fg:w="31093279"/><text x="16.3984%" y="527.50">&lt;co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (31,093,279 samples, 3.11%)</title><rect x="16.1484%" y="501" width="3.1093%" height="15" fill="rgb(210,229,1)" fg:x="161484449" fg:w="31093279"/><text x="16.3984%" y="511.50">cor..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (24,072,216 samples, 2.41%)</title><rect x="16.8506%" y="485" width="2.4072%" height="15" fill="rgb(222,148,37)" fg:x="168505512" fg:w="24072216"/><text x="17.1006%" y="495.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr (15,045,135 samples, 1.50%)</title><rect x="17.7533%" y="469" width="1.5045%" height="15" fill="rgb(234,67,33)" fg:x="177532593" fg:w="15045135"/><text x="18.0033%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_aligned (15,045,135 samples, 1.50%)</title><rect x="17.7533%" y="453" width="1.5045%" height="15" fill="rgb(247,98,35)" fg:x="177532593" fg:w="15045135"/><text x="18.0033%" y="463.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (12,036,108 samples, 1.20%)</title><rect x="18.0542%" y="437" width="1.2036%" height="15" fill="rgb(247,138,52)" fg:x="180541620" fg:w="12036108"/><text x="18.3042%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_naive (5,015,045 samples, 0.50%)</title><rect x="18.7563%" y="421" width="0.5015%" height="15" fill="rgb(213,79,30)" fg:x="187562683" fg:w="5015045"/><text x="19.0063%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2,006,018 samples, 0.20%)</title><rect x="19.2578%" y="549" width="0.2006%" height="15" fill="rgb(246,177,23)" fg:x="192577728" fg:w="2006018"/><text x="19.5078%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.60%)</title><rect x="22.0662%" y="533" width="0.6018%" height="15" fill="rgb(230,62,27)" fg:x="220661980" fg:w="6018054"/><text x="22.3162%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="22.4674%" y="517" width="0.2006%" height="15" fill="rgb(216,154,8)" fg:x="224674016" fg:w="2006018"/><text x="22.7174%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="22.4674%" y="501" width="0.2006%" height="15" fill="rgb(244,35,45)" fg:x="224674016" fg:w="2006018"/><text x="22.7174%" y="511.50"></text></g><g><title>ahash::operations::folded_multiply (6,018,054 samples, 0.60%)</title><rect x="24.5737%" y="373" width="0.6018%" height="15" fill="rgb(251,115,12)" fg:x="245737205" fg:w="6018054"/><text x="24.8237%" y="383.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (12,036,108 samples, 1.20%)</title><rect x="24.5737%" y="389" width="1.2036%" height="15" fill="rgb(240,54,50)" fg:x="245737205" fg:w="12036108"/><text x="24.8237%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.60%)</title><rect x="25.1755%" y="373" width="0.6018%" height="15" fill="rgb(233,84,52)" fg:x="251755259" fg:w="6018054"/><text x="25.4255%" y="383.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (8,024,072 samples, 0.80%)</title><rect x="25.7773%" y="389" width="0.8024%" height="15" fill="rgb(207,117,47)" fg:x="257773313" fg:w="8024072"/><text x="26.0273%" y="399.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (8,024,072 samples, 0.80%)</title><rect x="25.7773%" y="373" width="0.8024%" height="15" fill="rgb(249,43,39)" fg:x="257773313" fg:w="8024072"/><text x="26.0273%" y="383.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="26.5797%" y="341" width="0.2006%" height="15" fill="rgb(209,38,44)" fg:x="265797385" fg:w="2006018"/><text x="26.8297%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="26.5797%" y="325" width="0.2006%" height="15" fill="rgb(236,212,23)" fg:x="265797385" fg:w="2006018"/><text x="26.8297%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="26.5797%" y="309" width="0.2006%" height="15" fill="rgb(242,79,21)" fg:x="265797385" fg:w="2006018"/><text x="26.8297%" y="319.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="26.5797%" y="293" width="0.2006%" height="15" fill="rgb(211,96,35)" fg:x="265797385" fg:w="2006018"/><text x="26.8297%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="27.1815%" y="293" width="0.5015%" height="15" fill="rgb(253,215,40)" fg:x="271815439" fg:w="5015045"/><text x="27.4315%" y="303.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (10,030,090 samples, 1.00%)</title><rect x="26.7803%" y="309" width="1.0030%" height="15" fill="rgb(211,81,21)" fg:x="267803403" fg:w="10030090"/><text x="27.0303%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="27.6830%" y="293" width="0.1003%" height="15" fill="rgb(208,190,38)" fg:x="276830484" fg:w="1003009"/><text x="27.9330%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (50,150,450 samples, 5.02%)</title><rect x="24.5737%" y="421" width="5.0150%" height="15" fill="rgb(235,213,38)" fg:x="245737205" fg:w="50150450"/><text x="24.8237%" y="431.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (50,150,450 samples, 5.02%)</title><rect x="24.5737%" y="405" width="5.0150%" height="15" fill="rgb(237,122,38)" fg:x="245737205" fg:w="50150450"/><text x="24.8237%" y="415.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (30,090,270 samples, 3.01%)</title><rect x="26.5797%" y="389" width="3.0090%" height="15" fill="rgb(244,218,35)" fg:x="265797385" fg:w="30090270"/><text x="26.8297%" y="399.50">cor..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (30,090,270 samples, 3.01%)</title><rect x="26.5797%" y="373" width="3.0090%" height="15" fill="rgb(240,68,47)" fg:x="265797385" fg:w="30090270"/><text x="26.8297%" y="383.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (30,090,270 samples, 3.01%)</title><rect x="26.5797%" y="357" width="3.0090%" height="15" fill="rgb(210,16,53)" fg:x="265797385" fg:w="30090270"/><text x="26.8297%" y="367.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (28,084,252 samples, 2.81%)</title><rect x="26.7803%" y="341" width="2.8084%" height="15" fill="rgb(235,124,12)" fg:x="267803403" fg:w="28084252"/><text x="27.0303%" y="351.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (28,084,252 samples, 2.81%)</title><rect x="26.7803%" y="325" width="2.8084%" height="15" fill="rgb(224,169,11)" fg:x="267803403" fg:w="28084252"/><text x="27.0303%" y="335.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (18,054,162 samples, 1.81%)</title><rect x="27.7834%" y="309" width="1.8054%" height="15" fill="rgb(250,166,2)" fg:x="277833493" fg:w="18054162"/><text x="28.0334%" y="319.50">c..</text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7,021,063 samples, 0.70%)</title><rect x="30.9930%" y="373" width="0.7021%" height="15" fill="rgb(242,216,29)" fg:x="309929781" fg:w="7021063"/><text x="31.2430%" y="383.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (7,021,063 samples, 0.70%)</title><rect x="30.9930%" y="357" width="0.7021%" height="15" fill="rgb(230,116,27)" fg:x="309929781" fg:w="7021063"/><text x="31.2430%" y="367.50"></text></g><g><title>core::intrinsics::likely (14,042,126 samples, 1.40%)</title><rect x="31.6951%" y="373" width="1.4042%" height="15" fill="rgb(228,99,48)" fg:x="316950844" fg:w="14042126"/><text x="31.9451%" y="383.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (6,018,054 samples, 0.60%)</title><rect x="33.0993%" y="373" width="0.6018%" height="15" fill="rgb(253,11,6)" fg:x="330992970" fg:w="6018054"/><text x="33.3493%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6,018,054 samples, 0.60%)</title><rect x="33.0993%" y="357" width="0.6018%" height="15" fill="rgb(247,143,39)" fg:x="330992970" fg:w="6018054"/><text x="33.3493%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,018,054 samples, 0.60%)</title><rect x="33.0993%" y="341" width="0.6018%" height="15" fill="rgb(236,97,10)" fg:x="330992970" fg:w="6018054"/><text x="33.3493%" y="351.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,012,036 samples, 0.40%)</title><rect x="33.7011%" y="373" width="0.4012%" height="15" fill="rgb(233,208,19)" fg:x="337011024" fg:w="4012036"/><text x="33.9511%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.40%)</title><rect x="33.7011%" y="357" width="0.4012%" height="15" fill="rgb(216,164,2)" fg:x="337011024" fg:w="4012036"/><text x="33.9511%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (85,255,765 samples, 8.53%)</title><rect x="34.1023%" y="357" width="8.5256%" height="15" fill="rgb(220,129,5)" fg:x="341023060" fg:w="85255765"/><text x="34.3523%" y="367.50">hashbrown::m..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (85,255,765 samples, 8.53%)</title><rect x="34.1023%" y="341" width="8.5256%" height="15" fill="rgb(242,17,10)" fg:x="341023060" fg:w="85255765"/><text x="34.3523%" y="351.50">&lt;Q as hashbr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85,255,765 samples, 8.53%)</title><rect x="34.1023%" y="325" width="8.5256%" height="15" fill="rgb(242,107,0)" fg:x="341023060" fg:w="85255765"/><text x="34.3523%" y="335.50">core::cmp::i..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (85,255,765 samples, 8.53%)</title><rect x="34.1023%" y="309" width="8.5256%" height="15" fill="rgb(251,28,31)" fg:x="341023060" fg:w="85255765"/><text x="34.3523%" y="319.50">core::array:..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (85,255,765 samples, 8.53%)</title><rect x="34.1023%" y="293" width="8.5256%" height="15" fill="rgb(233,223,10)" fg:x="341023060" fg:w="85255765"/><text x="34.3523%" y="303.50">&lt;T as core::..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (13,039,117 samples, 1.30%)</title><rect x="42.6279%" y="357" width="1.3039%" height="15" fill="rgb(215,21,27)" fg:x="426278825" fg:w="13039117"/><text x="42.8779%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13,039,117 samples, 1.30%)</title><rect x="42.6279%" y="341" width="1.3039%" height="15" fill="rgb(232,23,21)" fg:x="426278825" fg:w="13039117"/><text x="42.8779%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13,039,117 samples, 1.30%)</title><rect x="42.6279%" y="325" width="1.3039%" height="15" fill="rgb(244,5,23)" fg:x="426278825" fg:w="13039117"/><text x="42.8779%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (102,306,918 samples, 10.23%)</title><rect x="34.1023%" y="373" width="10.2307%" height="15" fill="rgb(226,81,46)" fg:x="341023060" fg:w="102306918"/><text x="34.3523%" y="383.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4,012,036 samples, 0.40%)</title><rect x="43.9318%" y="357" width="0.4012%" height="15" fill="rgb(247,70,30)" fg:x="439317942" fg:w="4012036"/><text x="44.1818%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4,012,036 samples, 0.40%)</title><rect x="43.9318%" y="341" width="0.4012%" height="15" fill="rgb(212,68,19)" fg:x="439317942" fg:w="4012036"/><text x="44.1818%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,012,036 samples, 0.40%)</title><rect x="43.9318%" y="325" width="0.4012%" height="15" fill="rgb(240,187,13)" fg:x="439317942" fg:w="4012036"/><text x="44.1818%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (240,722,160 samples, 24.07%)</title><rect x="22.6680%" y="533" width="24.0722%" height="15" fill="rgb(223,113,26)" fg:x="226680034" fg:w="240722160"/><text x="22.9180%" y="543.50">core::cmp::impls::&lt;impl core::cmp::Par..</text></g><g><title>core::cmp::PartialOrd::gt (240,722,160 samples, 24.07%)</title><rect x="22.6680%" y="517" width="24.0722%" height="15" fill="rgb(206,192,2)" fg:x="226680034" fg:w="240722160"/><text x="22.9180%" y="527.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (236,710,124 samples, 23.67%)</title><rect x="23.0692%" y="501" width="23.6710%" height="15" fill="rgb(241,108,4)" fg:x="230692070" fg:w="236710124"/><text x="23.3192%" y="511.50">&lt;aoc_2024_megaproject::problems::day5:..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (232,698,088 samples, 23.27%)</title><rect x="23.4704%" y="485" width="23.2698%" height="15" fill="rgb(247,173,49)" fg:x="234704106" fg:w="232698088"/><text x="23.7204%" y="495.50">aoc_2024_megaproject::problems::day5:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (232,698,088 samples, 23.27%)</title><rect x="23.4704%" y="469" width="23.2698%" height="15" fill="rgb(224,114,35)" fg:x="234704106" fg:w="232698088"/><text x="23.7204%" y="479.50">std::collections::hash::map::HashMap&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (232,698,088 samples, 23.27%)</title><rect x="23.4704%" y="453" width="23.2698%" height="15" fill="rgb(245,159,27)" fg:x="234704106" fg:w="232698088"/><text x="23.7204%" y="463.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (232,698,088 samples, 23.27%)</title><rect x="23.4704%" y="437" width="23.2698%" height="15" fill="rgb(245,172,44)" fg:x="234704106" fg:w="232698088"/><text x="23.7204%" y="447.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (171,514,539 samples, 17.15%)</title><rect x="29.5888%" y="421" width="17.1515%" height="15" fill="rgb(236,23,11)" fg:x="295887655" fg:w="171514539"/><text x="29.8388%" y="431.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (171,514,539 samples, 17.15%)</title><rect x="29.5888%" y="405" width="17.1515%" height="15" fill="rgb(205,117,38)" fg:x="295887655" fg:w="171514539"/><text x="29.8388%" y="415.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (171,514,539 samples, 17.15%)</title><rect x="29.5888%" y="389" width="17.1515%" height="15" fill="rgb(237,72,25)" fg:x="295887655" fg:w="171514539"/><text x="29.8388%" y="399.50">hashbrown::raw::RawTableInn..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (24,072,216 samples, 2.41%)</title><rect x="44.3330%" y="373" width="2.4072%" height="15" fill="rgb(244,70,9)" fg:x="443329978" fg:w="24072216"/><text x="44.5830%" y="383.50">ha..</text></g><g><title>ahash::operations::folded_multiply (4,012,036 samples, 0.40%)</title><rect x="47.8435%" y="373" width="0.4012%" height="15" fill="rgb(217,125,39)" fg:x="478435293" fg:w="4012036"/><text x="48.0935%" y="383.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (12,036,108 samples, 1.20%)</title><rect x="47.8435%" y="389" width="1.2036%" height="15" fill="rgb(235,36,10)" fg:x="478435293" fg:w="12036108"/><text x="48.0935%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,024,072 samples, 0.80%)</title><rect x="48.2447%" y="373" width="0.8024%" height="15" fill="rgb(251,123,47)" fg:x="482447329" fg:w="8024072"/><text x="48.4947%" y="383.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (9,027,081 samples, 0.90%)</title><rect x="49.0471%" y="389" width="0.9027%" height="15" fill="rgb(221,13,13)" fg:x="490471401" fg:w="9027081"/><text x="49.2971%" y="399.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (9,027,081 samples, 0.90%)</title><rect x="49.0471%" y="373" width="0.9027%" height="15" fill="rgb(238,131,9)" fg:x="490471401" fg:w="9027081"/><text x="49.2971%" y="383.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="49.9498%" y="341" width="0.2006%" height="15" fill="rgb(211,50,8)" fg:x="499498482" fg:w="2006018"/><text x="50.1998%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="49.9498%" y="325" width="0.2006%" height="15" fill="rgb(245,182,24)" fg:x="499498482" fg:w="2006018"/><text x="50.1998%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="49.9498%" y="309" width="0.2006%" height="15" fill="rgb(242,14,37)" fg:x="499498482" fg:w="2006018"/><text x="50.1998%" y="319.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="49.9498%" y="293" width="0.2006%" height="15" fill="rgb(246,228,12)" fg:x="499498482" fg:w="2006018"/><text x="50.1998%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="50.0502%" y="277" width="0.1003%" height="15" fill="rgb(213,55,15)" fg:x="500501491" fg:w="1003009"/><text x="50.3002%" y="287.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (10,030,090 samples, 1.00%)</title><rect x="50.1505%" y="309" width="1.0030%" height="15" fill="rgb(209,9,3)" fg:x="501504500" fg:w="10030090"/><text x="50.4005%" y="319.50"></text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="50.2508%" y="293" width="0.9027%" height="15" fill="rgb(230,59,30)" fg:x="502507509" fg:w="9027081"/><text x="50.5008%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (40,120,360 samples, 4.01%)</title><rect x="47.8435%" y="421" width="4.0120%" height="15" fill="rgb(209,121,21)" fg:x="478435293" fg:w="40120360"/><text x="48.0935%" y="431.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (40,120,360 samples, 4.01%)</title><rect x="47.8435%" y="405" width="4.0120%" height="15" fill="rgb(220,109,13)" fg:x="478435293" fg:w="40120360"/><text x="48.0935%" y="415.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19,057,171 samples, 1.91%)</title><rect x="49.9498%" y="389" width="1.9057%" height="15" fill="rgb(232,18,1)" fg:x="499498482" fg:w="19057171"/><text x="50.1998%" y="399.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (19,057,171 samples, 1.91%)</title><rect x="49.9498%" y="373" width="1.9057%" height="15" fill="rgb(215,41,42)" fg:x="499498482" fg:w="19057171"/><text x="50.1998%" y="383.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (19,057,171 samples, 1.91%)</title><rect x="49.9498%" y="357" width="1.9057%" height="15" fill="rgb(224,123,36)" fg:x="499498482" fg:w="19057171"/><text x="50.1998%" y="367.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (17,051,153 samples, 1.71%)</title><rect x="50.1505%" y="341" width="1.7051%" height="15" fill="rgb(240,125,3)" fg:x="501504500" fg:w="17051153"/><text x="50.4005%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (17,051,153 samples, 1.71%)</title><rect x="50.1505%" y="325" width="1.7051%" height="15" fill="rgb(205,98,50)" fg:x="501504500" fg:w="17051153"/><text x="50.4005%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7,021,063 samples, 0.70%)</title><rect x="51.1535%" y="309" width="0.7021%" height="15" fill="rgb(205,185,37)" fg:x="511534590" fg:w="7021063"/><text x="51.4035%" y="319.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="52.5577%" y="373" width="0.8024%" height="15" fill="rgb(238,207,15)" fg:x="525576716" fg:w="8024072"/><text x="52.8077%" y="383.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.80%)</title><rect x="52.5577%" y="357" width="0.8024%" height="15" fill="rgb(213,199,42)" fg:x="525576716" fg:w="8024072"/><text x="52.8077%" y="367.50"></text></g><g><title>core::intrinsics::likely (6,018,054 samples, 0.60%)</title><rect x="53.3601%" y="373" width="0.6018%" height="15" fill="rgb(235,201,11)" fg:x="533600788" fg:w="6018054"/><text x="53.6101%" y="383.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (10,030,090 samples, 1.00%)</title><rect x="53.9619%" y="373" width="1.0030%" height="15" fill="rgb(207,46,11)" fg:x="539618842" fg:w="10030090"/><text x="54.2119%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10,030,090 samples, 1.00%)</title><rect x="53.9619%" y="357" width="1.0030%" height="15" fill="rgb(241,35,35)" fg:x="539618842" fg:w="10030090"/><text x="54.2119%" y="367.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.30%)</title><rect x="54.9649%" y="373" width="0.3009%" height="15" fill="rgb(243,32,47)" fg:x="549648932" fg:w="3009027"/><text x="55.2149%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (62,186,558 samples, 6.22%)</title><rect x="55.2658%" y="357" width="6.2187%" height="15" fill="rgb(247,202,23)" fg:x="552657959" fg:w="62186558"/><text x="55.5158%" y="367.50">hashbrow..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (62,186,558 samples, 6.22%)</title><rect x="55.2658%" y="341" width="6.2187%" height="15" fill="rgb(219,102,11)" fg:x="552657959" fg:w="62186558"/><text x="55.5158%" y="351.50">&lt;Q as ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (62,186,558 samples, 6.22%)</title><rect x="55.2658%" y="325" width="6.2187%" height="15" fill="rgb(243,110,44)" fg:x="552657959" fg:w="62186558"/><text x="55.5158%" y="335.50">core::cm..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (62,186,558 samples, 6.22%)</title><rect x="55.2658%" y="309" width="6.2187%" height="15" fill="rgb(222,74,54)" fg:x="552657959" fg:w="62186558"/><text x="55.5158%" y="319.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (62,186,558 samples, 6.22%)</title><rect x="55.2658%" y="293" width="6.2187%" height="15" fill="rgb(216,99,12)" fg:x="552657959" fg:w="62186558"/><text x="55.5158%" y="303.50">&lt;T as co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (10,030,090 samples, 1.00%)</title><rect x="61.4845%" y="357" width="1.0030%" height="15" fill="rgb(226,22,26)" fg:x="614844517" fg:w="10030090"/><text x="61.7345%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (10,030,090 samples, 1.00%)</title><rect x="61.4845%" y="341" width="1.0030%" height="15" fill="rgb(217,163,10)" fg:x="614844517" fg:w="10030090"/><text x="61.7345%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10,030,090 samples, 1.00%)</title><rect x="61.4845%" y="325" width="1.0030%" height="15" fill="rgb(213,25,53)" fg:x="614844517" fg:w="10030090"/><text x="61.7345%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (76,228,684 samples, 7.62%)</title><rect x="55.2658%" y="373" width="7.6229%" height="15" fill="rgb(252,105,26)" fg:x="552657959" fg:w="76228684"/><text x="55.5158%" y="383.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4,012,036 samples, 0.40%)</title><rect x="62.4875%" y="357" width="0.4012%" height="15" fill="rgb(220,39,43)" fg:x="624874607" fg:w="4012036"/><text x="62.7375%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4,012,036 samples, 0.40%)</title><rect x="62.4875%" y="341" width="0.4012%" height="15" fill="rgb(229,68,48)" fg:x="624874607" fg:w="4012036"/><text x="62.7375%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,012,036 samples, 0.40%)</title><rect x="62.4875%" y="325" width="0.4012%" height="15" fill="rgb(252,8,32)" fg:x="624874607" fg:w="4012036"/><text x="62.7375%" y="335.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (449,348,032 samples, 44.93%)</title><rect x="19.4584%" y="549" width="44.9348%" height="15" fill="rgb(223,20,43)" fg:x="194583746" fg:w="449348032"/><text x="19.7084%" y="559.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (176,529,584 samples, 17.65%)</title><rect x="46.7402%" y="533" width="17.6530%" height="15" fill="rgb(229,81,49)" fg:x="467402194" fg:w="176529584"/><text x="46.9902%" y="543.50">core::cmp::impls::&lt;impl cor..</text></g><g><title>core::cmp::PartialOrd::lt (176,529,584 samples, 17.65%)</title><rect x="46.7402%" y="517" width="17.6530%" height="15" fill="rgb(236,28,36)" fg:x="467402194" fg:w="176529584"/><text x="46.9902%" y="527.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (176,529,584 samples, 17.65%)</title><rect x="46.7402%" y="501" width="17.6530%" height="15" fill="rgb(249,185,26)" fg:x="467402194" fg:w="176529584"/><text x="46.9902%" y="511.50">&lt;aoc_2024_megaproject::prob..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (175,526,575 samples, 17.55%)</title><rect x="46.8405%" y="485" width="17.5527%" height="15" fill="rgb(249,174,33)" fg:x="468405203" fg:w="175526575"/><text x="47.0905%" y="495.50">aoc_2024_megaproject::probl..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (173,520,557 samples, 17.35%)</title><rect x="47.0411%" y="469" width="17.3521%" height="15" fill="rgb(233,201,37)" fg:x="470411221" fg:w="173520557"/><text x="47.2911%" y="479.50">std::collections::hash::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (173,520,557 samples, 17.35%)</title><rect x="47.0411%" y="453" width="17.3521%" height="15" fill="rgb(221,78,26)" fg:x="470411221" fg:w="173520557"/><text x="47.2911%" y="463.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (173,520,557 samples, 17.35%)</title><rect x="47.0411%" y="437" width="17.3521%" height="15" fill="rgb(250,127,30)" fg:x="470411221" fg:w="173520557"/><text x="47.2911%" y="447.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (125,376,125 samples, 12.54%)</title><rect x="51.8556%" y="421" width="12.5376%" height="15" fill="rgb(230,49,44)" fg:x="518555653" fg:w="125376125"/><text x="52.1056%" y="431.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (125,376,125 samples, 12.54%)</title><rect x="51.8556%" y="405" width="12.5376%" height="15" fill="rgb(229,67,23)" fg:x="518555653" fg:w="125376125"/><text x="52.1056%" y="415.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (125,376,125 samples, 12.54%)</title><rect x="51.8556%" y="389" width="12.5376%" height="15" fill="rgb(249,83,47)" fg:x="518555653" fg:w="125376125"/><text x="52.1056%" y="399.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (15,045,135 samples, 1.50%)</title><rect x="62.8887%" y="373" width="1.5045%" height="15" fill="rgb(215,43,3)" fg:x="628886643" fg:w="15045135"/><text x="63.1387%" y="383.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="67.0010%" y="389" width="0.2006%" height="15" fill="rgb(238,154,13)" fg:x="670010012" fg:w="2006018"/><text x="67.2510%" y="399.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (9,027,081 samples, 0.90%)</title><rect x="67.0010%" y="405" width="0.9027%" height="15" fill="rgb(219,56,2)" fg:x="670010012" fg:w="9027081"/><text x="67.2510%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,021,063 samples, 0.70%)</title><rect x="67.2016%" y="389" width="0.7021%" height="15" fill="rgb(233,0,4)" fg:x="672016030" fg:w="7021063"/><text x="67.4516%" y="399.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (3,009,027 samples, 0.30%)</title><rect x="67.9037%" y="405" width="0.3009%" height="15" fill="rgb(235,30,7)" fg:x="679037093" fg:w="3009027"/><text x="68.1537%" y="415.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (3,009,027 samples, 0.30%)</title><rect x="67.9037%" y="389" width="0.3009%" height="15" fill="rgb(250,79,13)" fg:x="679037093" fg:w="3009027"/><text x="68.1537%" y="399.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5,015,045 samples, 0.50%)</title><rect x="68.2046%" y="357" width="0.5015%" height="15" fill="rgb(211,146,34)" fg:x="682046120" fg:w="5015045"/><text x="68.4546%" y="367.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (5,015,045 samples, 0.50%)</title><rect x="68.2046%" y="341" width="0.5015%" height="15" fill="rgb(228,22,38)" fg:x="682046120" fg:w="5015045"/><text x="68.4546%" y="351.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (5,015,045 samples, 0.50%)</title><rect x="68.2046%" y="325" width="0.5015%" height="15" fill="rgb(235,168,5)" fg:x="682046120" fg:w="5015045"/><text x="68.4546%" y="335.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (5,015,045 samples, 0.50%)</title><rect x="68.2046%" y="309" width="0.5015%" height="15" fill="rgb(221,155,16)" fg:x="682046120" fg:w="5015045"/><text x="68.4546%" y="319.50"></text></g><g><title>ahash::operations::folded_multiply (4,012,036 samples, 0.40%)</title><rect x="68.3049%" y="293" width="0.4012%" height="15" fill="rgb(215,215,53)" fg:x="683049129" fg:w="4012036"/><text x="68.5549%" y="303.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4,012,036 samples, 0.40%)</title><rect x="68.3049%" y="277" width="0.4012%" height="15" fill="rgb(223,4,10)" fg:x="683049129" fg:w="4012036"/><text x="68.5549%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="69.6088%" y="309" width="0.2006%" height="15" fill="rgb(234,103,6)" fg:x="696088246" fg:w="2006018"/><text x="69.8588%" y="319.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="69.6088%" y="293" width="0.2006%" height="15" fill="rgb(227,97,0)" fg:x="696088246" fg:w="2006018"/><text x="69.8588%" y="303.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (13,039,117 samples, 1.30%)</title><rect x="68.7061%" y="325" width="1.3039%" height="15" fill="rgb(234,150,53)" fg:x="687061165" fg:w="13039117"/><text x="68.9561%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,006,018 samples, 0.20%)</title><rect x="69.8094%" y="309" width="0.2006%" height="15" fill="rgb(228,201,54)" fg:x="698094264" fg:w="2006018"/><text x="70.0594%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (34,102,306 samples, 3.41%)</title><rect x="67.0010%" y="437" width="3.4102%" height="15" fill="rgb(222,22,37)" fg:x="670010012" fg:w="34102306"/><text x="67.2510%" y="447.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (34,102,306 samples, 3.41%)</title><rect x="67.0010%" y="421" width="3.4102%" height="15" fill="rgb(237,53,32)" fg:x="670010012" fg:w="34102306"/><text x="67.2510%" y="431.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22,066,198 samples, 2.21%)</title><rect x="68.2046%" y="405" width="2.2066%" height="15" fill="rgb(233,25,53)" fg:x="682046120" fg:w="22066198"/><text x="68.4546%" y="415.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (22,066,198 samples, 2.21%)</title><rect x="68.2046%" y="389" width="2.2066%" height="15" fill="rgb(210,40,34)" fg:x="682046120" fg:w="22066198"/><text x="68.4546%" y="399.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (22,066,198 samples, 2.21%)</title><rect x="68.2046%" y="373" width="2.2066%" height="15" fill="rgb(241,220,44)" fg:x="682046120" fg:w="22066198"/><text x="68.4546%" y="383.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (17,051,153 samples, 1.71%)</title><rect x="68.7061%" y="357" width="1.7051%" height="15" fill="rgb(235,28,35)" fg:x="687061165" fg:w="17051153"/><text x="68.9561%" y="367.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (17,051,153 samples, 1.71%)</title><rect x="68.7061%" y="341" width="1.7051%" height="15" fill="rgb(210,56,17)" fg:x="687061165" fg:w="17051153"/><text x="68.9561%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4,012,036 samples, 0.40%)</title><rect x="70.0100%" y="325" width="0.4012%" height="15" fill="rgb(224,130,29)" fg:x="700100282" fg:w="4012036"/><text x="70.2600%" y="335.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="70.9127%" y="389" width="0.8024%" height="15" fill="rgb(235,212,8)" fg:x="709127363" fg:w="8024072"/><text x="71.1627%" y="399.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.80%)</title><rect x="70.9127%" y="373" width="0.8024%" height="15" fill="rgb(223,33,50)" fg:x="709127363" fg:w="8024072"/><text x="71.1627%" y="383.50"></text></g><g><title>core::intrinsics::likely (6,018,054 samples, 0.60%)</title><rect x="71.7151%" y="389" width="0.6018%" height="15" fill="rgb(219,149,13)" fg:x="717151435" fg:w="6018054"/><text x="71.9651%" y="399.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (5,015,045 samples, 0.50%)</title><rect x="72.3170%" y="389" width="0.5015%" height="15" fill="rgb(250,156,29)" fg:x="723169489" fg:w="5015045"/><text x="72.5670%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5,015,045 samples, 0.50%)</title><rect x="72.3170%" y="373" width="0.5015%" height="15" fill="rgb(216,193,19)" fg:x="723169489" fg:w="5015045"/><text x="72.5670%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.50%)</title><rect x="72.3170%" y="357" width="0.5015%" height="15" fill="rgb(216,135,14)" fg:x="723169489" fg:w="5015045"/><text x="72.5670%" y="367.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.20%)</title><rect x="72.8185%" y="389" width="0.2006%" height="15" fill="rgb(241,47,5)" fg:x="728184534" fg:w="2006018"/><text x="73.0685%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.20%)</title><rect x="72.8185%" y="373" width="0.2006%" height="15" fill="rgb(233,42,35)" fg:x="728184534" fg:w="2006018"/><text x="73.0685%" y="383.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,003,009 samples, 0.10%)</title><rect x="73.0191%" y="389" width="0.1003%" height="15" fill="rgb(231,13,6)" fg:x="730190552" fg:w="1003009"/><text x="73.2691%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (53,159,477 samples, 5.32%)</title><rect x="73.1194%" y="373" width="5.3159%" height="15" fill="rgb(207,181,40)" fg:x="731193561" fg:w="53159477"/><text x="73.3694%" y="383.50">hashbro..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (53,159,477 samples, 5.32%)</title><rect x="73.1194%" y="357" width="5.3159%" height="15" fill="rgb(254,173,49)" fg:x="731193561" fg:w="53159477"/><text x="73.3694%" y="367.50">&lt;Q as h..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (53,159,477 samples, 5.32%)</title><rect x="73.1194%" y="341" width="5.3159%" height="15" fill="rgb(221,1,38)" fg:x="731193561" fg:w="53159477"/><text x="73.3694%" y="351.50">core::c..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (53,159,477 samples, 5.32%)</title><rect x="73.1194%" y="325" width="5.3159%" height="15" fill="rgb(206,124,46)" fg:x="731193561" fg:w="53159477"/><text x="73.3694%" y="335.50">core::a..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (53,159,477 samples, 5.32%)</title><rect x="73.1194%" y="309" width="5.3159%" height="15" fill="rgb(249,21,11)" fg:x="731193561" fg:w="53159477"/><text x="73.3694%" y="319.50">&lt;T as c..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (12,036,108 samples, 1.20%)</title><rect x="78.4353%" y="373" width="1.2036%" height="15" fill="rgb(222,201,40)" fg:x="784353038" fg:w="12036108"/><text x="78.6853%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (12,036,108 samples, 1.20%)</title><rect x="78.4353%" y="357" width="1.2036%" height="15" fill="rgb(235,61,29)" fg:x="784353038" fg:w="12036108"/><text x="78.6853%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,036,108 samples, 1.20%)</title><rect x="78.4353%" y="341" width="1.2036%" height="15" fill="rgb(219,207,3)" fg:x="784353038" fg:w="12036108"/><text x="78.6853%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (68,204,612 samples, 6.82%)</title><rect x="73.1194%" y="389" width="6.8205%" height="15" fill="rgb(222,56,46)" fg:x="731193561" fg:w="68204612"/><text x="73.3694%" y="399.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3,009,027 samples, 0.30%)</title><rect x="79.6389%" y="373" width="0.3009%" height="15" fill="rgb(239,76,54)" fg:x="796389146" fg:w="3009027"/><text x="79.8889%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,009,027 samples, 0.30%)</title><rect x="79.6389%" y="357" width="0.3009%" height="15" fill="rgb(231,124,27)" fg:x="796389146" fg:w="3009027"/><text x="79.8889%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,009,027 samples, 0.30%)</title><rect x="79.6389%" y="341" width="0.3009%" height="15" fill="rgb(249,195,6)" fg:x="796389146" fg:w="3009027"/><text x="79.8889%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::gt (152,457,368 samples, 15.25%)</title><rect x="66.0983%" y="533" width="15.2457%" height="15" fill="rgb(237,174,47)" fg:x="660982931" fg:w="152457368"/><text x="66.3483%" y="543.50">core::cmp::PartialOrd::..</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (152,457,368 samples, 15.25%)</title><rect x="66.0983%" y="517" width="15.2457%" height="15" fill="rgb(206,201,31)" fg:x="660982931" fg:w="152457368"/><text x="66.3483%" y="527.50">&lt;aoc_2024_megaproject::..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (150,451,350 samples, 15.05%)</title><rect x="66.2989%" y="501" width="15.0451%" height="15" fill="rgb(231,57,52)" fg:x="662988949" fg:w="150451350"/><text x="66.5489%" y="511.50">aoc_2024_megaproject::p..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (145,436,305 samples, 14.54%)</title><rect x="66.8004%" y="485" width="14.5436%" height="15" fill="rgb(248,177,22)" fg:x="668003994" fg:w="145436305"/><text x="67.0504%" y="495.50">std::collections::hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (145,436,305 samples, 14.54%)</title><rect x="66.8004%" y="469" width="14.5436%" height="15" fill="rgb(215,211,37)" fg:x="668003994" fg:w="145436305"/><text x="67.0504%" y="479.50">hashbrown::map::HashMa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (145,436,305 samples, 14.54%)</title><rect x="66.8004%" y="453" width="14.5436%" height="15" fill="rgb(241,128,51)" fg:x="668003994" fg:w="145436305"/><text x="67.0504%" y="463.50">hashbrown::map::HashMa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (109,327,981 samples, 10.93%)</title><rect x="70.4112%" y="437" width="10.9328%" height="15" fill="rgb(227,165,31)" fg:x="704112318" fg:w="109327981"/><text x="70.6612%" y="447.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (109,327,981 samples, 10.93%)</title><rect x="70.4112%" y="421" width="10.9328%" height="15" fill="rgb(228,167,24)" fg:x="704112318" fg:w="109327981"/><text x="70.6612%" y="431.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (109,327,981 samples, 10.93%)</title><rect x="70.4112%" y="405" width="10.9328%" height="15" fill="rgb(228,143,12)" fg:x="704112318" fg:w="109327981"/><text x="70.6612%" y="415.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (14,042,126 samples, 1.40%)</title><rect x="79.9398%" y="389" width="1.4042%" height="15" fill="rgb(249,149,8)" fg:x="799398173" fg:w="14042126"/><text x="80.1898%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="81.5446%" y="501" width="0.1003%" height="15" fill="rgb(243,35,44)" fg:x="815446317" fg:w="1003009"/><text x="81.7946%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="81.5446%" y="485" width="0.1003%" height="15" fill="rgb(246,89,9)" fg:x="815446317" fg:w="1003009"/><text x="81.7946%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5,015,045 samples, 0.50%)</title><rect x="81.3440%" y="533" width="0.5015%" height="15" fill="rgb(233,213,13)" fg:x="813440299" fg:w="5015045"/><text x="81.5940%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,015,045 samples, 0.50%)</title><rect x="81.3440%" y="517" width="0.5015%" height="15" fill="rgb(233,141,41)" fg:x="813440299" fg:w="5015045"/><text x="81.5940%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="81.6449%" y="501" width="0.2006%" height="15" fill="rgb(239,167,4)" fg:x="816449326" fg:w="2006018"/><text x="81.8949%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="82.5476%" y="517" width="0.1003%" height="15" fill="rgb(209,217,16)" fg:x="825476407" fg:w="1003009"/><text x="82.7976%" y="527.50"></text></g><g><title>core::intrinsics::copy (11,033,099 samples, 1.10%)</title><rect x="82.7482%" y="485" width="1.1033%" height="15" fill="rgb(219,88,35)" fg:x="827482425" fg:w="11033099"/><text x="82.9982%" y="495.50"></text></g><g><title>[libc.so.6] (9,027,081 samples, 0.90%)</title><rect x="82.9488%" y="469" width="0.9027%" height="15" fill="rgb(220,193,23)" fg:x="829488443" fg:w="9027081"/><text x="83.1988%" y="479.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::sort_with_partialord (199,598,791 samples, 19.96%)</title><rect x="64.3932%" y="549" width="19.9599%" height="15" fill="rgb(230,90,52)" fg:x="643931778" fg:w="199598791"/><text x="64.6432%" y="559.50">aoc_2024_megaproject::problems:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::rotate_right (25,075,225 samples, 2.51%)</title><rect x="81.8455%" y="533" width="2.5075%" height="15" fill="rgb(252,106,19)" fg:x="818455344" fg:w="25075225"/><text x="82.0955%" y="543.50">co..</text></g><g><title>core::slice::rotate::ptr_rotate (17,051,153 samples, 1.71%)</title><rect x="82.6479%" y="517" width="1.7051%" height="15" fill="rgb(206,74,20)" fg:x="826479416" fg:w="17051153"/><text x="82.8979%" y="527.50"></text></g><g><title>core::slice::rotate::ptr_rotate_memmove (17,051,153 samples, 1.71%)</title><rect x="82.6479%" y="501" width="1.7051%" height="15" fill="rgb(230,138,44)" fg:x="826479416" fg:w="17051153"/><text x="82.8979%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.50%)</title><rect x="83.8516%" y="485" width="0.5015%" height="15" fill="rgb(235,182,43)" fg:x="838515524" fg:w="5015045"/><text x="84.1016%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,027,081 samples, 0.90%)</title><rect x="86.7603%" y="437" width="0.9027%" height="15" fill="rgb(242,16,51)" fg:x="867602785" fg:w="9027081"/><text x="87.0103%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (9,027,081 samples, 0.90%)</title><rect x="86.7603%" y="421" width="0.9027%" height="15" fill="rgb(248,9,4)" fg:x="867602785" fg:w="9027081"/><text x="87.0103%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,027,081 samples, 0.90%)</title><rect x="86.7603%" y="405" width="0.9027%" height="15" fill="rgb(210,31,22)" fg:x="867602785" fg:w="9027081"/><text x="87.0103%" y="415.50"></text></g><g><title>[libc.so.6] (5,015,045 samples, 0.50%)</title><rect x="87.1615%" y="389" width="0.5015%" height="15" fill="rgb(239,54,39)" fg:x="871614821" fg:w="5015045"/><text x="87.4115%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (6,018,054 samples, 0.60%)</title><rect x="87.6630%" y="437" width="0.6018%" height="15" fill="rgb(230,99,41)" fg:x="876629866" fg:w="6018054"/><text x="87.9130%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6,018,054 samples, 0.60%)</title><rect x="87.6630%" y="421" width="0.6018%" height="15" fill="rgb(253,106,12)" fg:x="876629866" fg:w="6018054"/><text x="87.9130%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (6,018,054 samples, 0.60%)</title><rect x="87.6630%" y="405" width="0.6018%" height="15" fill="rgb(213,46,41)" fg:x="876629866" fg:w="6018054"/><text x="87.9130%" y="415.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="89.3681%" y="389" width="0.1003%" height="15" fill="rgb(215,133,35)" fg:x="893681019" fg:w="1003009"/><text x="89.6181%" y="399.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2,006,018 samples, 0.20%)</title><rect x="89.4684%" y="389" width="0.2006%" height="15" fill="rgb(213,28,5)" fg:x="894684028" fg:w="2006018"/><text x="89.7184%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (60,180,540 samples, 6.02%)</title><rect x="84.3531%" y="549" width="6.0181%" height="15" fill="rgb(215,77,49)" fg:x="843530569" fg:w="60180540"/><text x="84.6031%" y="559.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (60,180,540 samples, 6.02%)</title><rect x="84.3531%" y="533" width="6.0181%" height="15" fill="rgb(248,100,22)" fg:x="843530569" fg:w="60180540"/><text x="84.6031%" y="543.50">core::it..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (60,180,540 samples, 6.02%)</title><rect x="84.3531%" y="517" width="6.0181%" height="15" fill="rgb(208,67,9)" fg:x="843530569" fg:w="60180540"/><text x="84.6031%" y="527.50">&lt;core::s..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (60,180,540 samples, 6.02%)</title><rect x="84.3531%" y="501" width="6.0181%" height="15" fill="rgb(219,133,21)" fg:x="843530569" fg:w="60180540"/><text x="84.6031%" y="511.50">&lt;core::i..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (60,180,540 samples, 6.02%)</title><rect x="84.3531%" y="485" width="6.0181%" height="15" fill="rgb(246,46,29)" fg:x="843530569" fg:w="60180540"/><text x="84.6031%" y="495.50">&lt;core::s..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (60,180,540 samples, 6.02%)</title><rect x="84.3531%" y="469" width="6.0181%" height="15" fill="rgb(246,185,52)" fg:x="843530569" fg:w="60180540"/><text x="84.6031%" y="479.50">core::st..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (44,132,396 samples, 4.41%)</title><rect x="85.9579%" y="453" width="4.4132%" height="15" fill="rgb(252,136,11)" fg:x="859578713" fg:w="44132396"/><text x="86.2079%" y="463.50">&lt;core..</text></g><g><title>core::slice::memchr::memchr (21,063,189 samples, 2.11%)</title><rect x="88.2648%" y="437" width="2.1063%" height="15" fill="rgb(219,138,53)" fg:x="882647920" fg:w="21063189"/><text x="88.5148%" y="447.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (19,057,171 samples, 1.91%)</title><rect x="88.4654%" y="421" width="1.9057%" height="15" fill="rgb(211,51,23)" fg:x="884653938" fg:w="19057171"/><text x="88.7154%" y="431.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (13,039,117 samples, 1.30%)</title><rect x="89.0672%" y="405" width="1.3039%" height="15" fill="rgb(247,221,28)" fg:x="890671992" fg:w="13039117"/><text x="89.3172%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (7,021,063 samples, 0.70%)</title><rect x="89.6690%" y="389" width="0.7021%" height="15" fill="rgb(251,222,45)" fg:x="896690046" fg:w="7021063"/><text x="89.9190%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1,003,009 samples, 0.10%)</title><rect x="90.3711%" y="549" width="0.1003%" height="15" fill="rgb(217,162,53)" fg:x="903711109" fg:w="1003009"/><text x="90.6211%" y="559.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (1,003,009 samples, 0.10%)</title><rect x="90.3711%" y="533" width="0.1003%" height="15" fill="rgb(229,93,14)" fg:x="903711109" fg:w="1003009"/><text x="90.6211%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="94.5838%" y="485" width="0.2006%" height="15" fill="rgb(209,67,49)" fg:x="945837487" fg:w="2006018"/><text x="94.8338%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,006,018 samples, 0.20%)</title><rect x="94.5838%" y="469" width="0.2006%" height="15" fill="rgb(213,87,29)" fg:x="945837487" fg:w="2006018"/><text x="94.8338%" y="479.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="94.5838%" y="453" width="0.2006%" height="15" fill="rgb(205,151,52)" fg:x="945837487" fg:w="2006018"/><text x="94.8338%" y="463.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (2,006,018 samples, 0.20%)</title><rect x="94.7844%" y="485" width="0.2006%" height="15" fill="rgb(253,215,39)" fg:x="947843505" fg:w="2006018"/><text x="95.0344%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,006,018 samples, 0.20%)</title><rect x="94.7844%" y="469" width="0.2006%" height="15" fill="rgb(221,220,41)" fg:x="947843505" fg:w="2006018"/><text x="95.0344%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (46,138,414 samples, 4.61%)</title><rect x="90.4714%" y="549" width="4.6138%" height="15" fill="rgb(218,133,21)" fg:x="904714118" fg:w="46138414"/><text x="90.7214%" y="559.50">core:..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (17,051,153 samples, 1.71%)</title><rect x="93.3801%" y="533" width="1.7051%" height="15" fill="rgb(221,193,43)" fg:x="933801379" fg:w="17051153"/><text x="93.6301%" y="543.50"></text></g><g><title>core::str::pattern::StrSearcher::new (16,048,144 samples, 1.60%)</title><rect x="93.4804%" y="517" width="1.6048%" height="15" fill="rgb(240,128,52)" fg:x="934804388" fg:w="16048144"/><text x="93.7304%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (6,018,054 samples, 0.60%)</title><rect x="94.4835%" y="501" width="0.6018%" height="15" fill="rgb(253,114,12)" fg:x="944834478" fg:w="6018054"/><text x="94.7335%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1,003,009 samples, 0.10%)</title><rect x="94.9850%" y="485" width="0.1003%" height="15" fill="rgb(215,223,47)" fg:x="949849523" fg:w="1003009"/><text x="95.2350%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,006,018 samples, 0.20%)</title><rect x="95.2859%" y="485" width="0.2006%" height="15" fill="rgb(248,225,23)" fg:x="952858550" fg:w="2006018"/><text x="95.5359%" y="495.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.60%)</title><rect x="95.8877%" y="469" width="0.6018%" height="15" fill="rgb(250,108,0)" fg:x="958876604" fg:w="6018054"/><text x="96.1377%" y="479.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (6,018,054 samples, 0.60%)</title><rect x="95.8877%" y="453" width="0.6018%" height="15" fill="rgb(228,208,7)" fg:x="958876604" fg:w="6018054"/><text x="96.1377%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.20%)</title><rect x="96.4895%" y="469" width="0.2006%" height="15" fill="rgb(244,45,10)" fg:x="964894658" fg:w="2006018"/><text x="96.7395%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.20%)</title><rect x="96.4895%" y="453" width="0.2006%" height="15" fill="rgb(207,125,25)" fg:x="964894658" fg:w="2006018"/><text x="96.7395%" y="463.50"></text></g><g><title>hashbrown::control::tag::Tag::full (6,018,054 samples, 0.60%)</title><rect x="96.6901%" y="469" width="0.6018%" height="15" fill="rgb(210,195,18)" fg:x="966900676" fg:w="6018054"/><text x="96.9401%" y="479.50"></text></g><g><title>core::intrinsics::unlikely (1,003,009 samples, 0.10%)</title><rect x="97.2919%" y="453" width="0.1003%" height="15" fill="rgb(249,80,12)" fg:x="972918730" fg:w="1003009"/><text x="97.5419%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (23,069,207 samples, 2.31%)</title><rect x="95.2859%" y="517" width="2.3069%" height="15" fill="rgb(221,65,9)" fg:x="952858550" fg:w="23069207"/><text x="95.5359%" y="527.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (23,069,207 samples, 2.31%)</title><rect x="95.2859%" y="501" width="2.3069%" height="15" fill="rgb(235,49,36)" fg:x="952858550" fg:w="23069207"/><text x="95.5359%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (21,063,189 samples, 2.11%)</title><rect x="95.4865%" y="485" width="2.1063%" height="15" fill="rgb(225,32,20)" fg:x="954864568" fg:w="21063189"/><text x="95.7365%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3,009,027 samples, 0.30%)</title><rect x="97.2919%" y="469" width="0.3009%" height="15" fill="rgb(215,141,46)" fg:x="972918730" fg:w="3009027"/><text x="97.5419%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2,006,018 samples, 0.20%)</title><rect x="97.3922%" y="453" width="0.2006%" height="15" fill="rgb(250,160,47)" fg:x="973921739" fg:w="2006018"/><text x="97.6422%" y="463.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (2,006,018 samples, 0.20%)</title><rect x="97.3922%" y="437" width="0.2006%" height="15" fill="rgb(216,222,40)" fg:x="973921739" fg:w="2006018"/><text x="97.6422%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.40%)</title><rect x="97.5928%" y="485" width="0.4012%" height="15" fill="rgb(234,217,39)" fg:x="975927757" fg:w="4012036"/><text x="97.8428%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.40%)</title><rect x="97.5928%" y="469" width="0.4012%" height="15" fill="rgb(207,178,40)" fg:x="975927757" fg:w="4012036"/><text x="97.8428%" y="479.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,006,018 samples, 0.20%)</title><rect x="97.9940%" y="485" width="0.2006%" height="15" fill="rgb(221,136,13)" fg:x="979939793" fg:w="2006018"/><text x="98.2440%" y="495.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2,006,018 samples, 0.20%)</title><rect x="97.9940%" y="469" width="0.2006%" height="15" fill="rgb(249,199,10)" fg:x="979939793" fg:w="2006018"/><text x="98.2440%" y="479.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="98.6961%" y="389" width="0.2006%" height="15" fill="rgb(249,222,13)" fg:x="986960856" fg:w="2006018"/><text x="98.9461%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (15,045,135 samples, 1.50%)</title><rect x="97.5928%" y="517" width="1.5045%" height="15" fill="rgb(244,185,38)" fg:x="975927757" fg:w="15045135"/><text x="97.8428%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15,045,135 samples, 1.50%)</title><rect x="97.5928%" y="501" width="1.5045%" height="15" fill="rgb(236,202,9)" fg:x="975927757" fg:w="15045135"/><text x="97.8428%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9,027,081 samples, 0.90%)</title><rect x="98.1946%" y="485" width="0.9027%" height="15" fill="rgb(250,229,37)" fg:x="981945811" fg:w="9027081"/><text x="98.4446%" y="495.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (9,027,081 samples, 0.90%)</title><rect x="98.1946%" y="469" width="0.9027%" height="15" fill="rgb(206,174,23)" fg:x="981945811" fg:w="9027081"/><text x="98.4446%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9,027,081 samples, 0.90%)</title><rect x="98.1946%" y="453" width="0.9027%" height="15" fill="rgb(211,33,43)" fg:x="981945811" fg:w="9027081"/><text x="98.4446%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (5,015,045 samples, 0.50%)</title><rect x="98.5958%" y="437" width="0.5015%" height="15" fill="rgb(245,58,50)" fg:x="985957847" fg:w="5015045"/><text x="98.8458%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.50%)</title><rect x="98.5958%" y="421" width="0.5015%" height="15" fill="rgb(244,68,36)" fg:x="985957847" fg:w="5015045"/><text x="98.8458%" y="431.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (5,015,045 samples, 0.50%)</title><rect x="98.5958%" y="405" width="0.5015%" height="15" fill="rgb(232,229,15)" fg:x="985957847" fg:w="5015045"/><text x="98.8458%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="98.8967%" y="389" width="0.2006%" height="15" fill="rgb(254,30,23)" fg:x="988966874" fg:w="2006018"/><text x="99.1467%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4,012,036 samples, 0.40%)</title><rect x="99.0973%" y="501" width="0.4012%" height="15" fill="rgb(235,160,14)" fg:x="990972892" fg:w="4012036"/><text x="99.3473%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4,012,036 samples, 0.40%)</title><rect x="99.0973%" y="485" width="0.4012%" height="15" fill="rgb(212,155,44)" fg:x="990972892" fg:w="4012036"/><text x="99.3473%" y="495.50"></text></g><g><title>core::ptr::write (4,012,036 samples, 0.40%)</title><rect x="99.0973%" y="469" width="0.4012%" height="15" fill="rgb(226,2,50)" fg:x="990972892" fg:w="4012036"/><text x="99.3473%" y="479.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (997,993,955 samples, 99.80%)</title><rect x="0.0000%" y="597" width="99.7994%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="607.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2 (996,990,946 samples, 99.70%)</title><rect x="0.1003%" y="581" width="99.6991%" height="15" fill="rgb(217,24,9)" fg:x="1003009" fg:w="996990946"/><text x="0.3503%" y="591.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day5::part2 (996,990,946 samples, 99.70%)</title><rect x="0.1003%" y="565" width="99.6991%" height="15" fill="rgb(220,13,46)" fg:x="1003009" fg:w="996990946"/><text x="0.3503%" y="575.50">aoc_2024_megaproject::problems::day5::part2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (47,141,423 samples, 4.71%)</title><rect x="95.0853%" y="549" width="4.7141%" height="15" fill="rgb(239,221,27)" fg:x="950852532" fg:w="47141423"/><text x="95.3353%" y="559.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (47,141,423 samples, 4.71%)</title><rect x="95.0853%" y="533" width="4.7141%" height="15" fill="rgb(222,198,25)" fg:x="950852532" fg:w="47141423"/><text x="95.3353%" y="543.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (7,021,063 samples, 0.70%)</title><rect x="99.0973%" y="517" width="0.7021%" height="15" fill="rgb(211,99,13)" fg:x="990972892" fg:w="7021063"/><text x="99.3473%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3,009,027 samples, 0.30%)</title><rect x="99.4985%" y="501" width="0.3009%" height="15" fill="rgb(232,111,31)" fg:x="994984928" fg:w="3009027"/><text x="99.7485%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (3,009,027 samples, 0.30%)</title><rect x="99.4985%" y="485" width="0.3009%" height="15" fill="rgb(245,82,37)" fg:x="994984928" fg:w="3009027"/><text x="99.7485%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3,009,027 samples, 0.30%)</title><rect x="99.4985%" y="469" width="0.3009%" height="15" fill="rgb(227,149,46)" fg:x="994984928" fg:w="3009027"/><text x="99.7485%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3,009,027 samples, 0.30%)</title><rect x="99.4985%" y="453" width="0.3009%" height="15" fill="rgb(218,36,50)" fg:x="994984928" fg:w="3009027"/><text x="99.7485%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::env::Args&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="597" width="0.1003%" height="15" fill="rgb(226,80,48)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::env::ArgsOs&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="581" width="0.1003%" height="15" fill="rgb(238,224,15)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::args::common::Args&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="565" width="0.1003%" height="15" fill="rgb(241,136,10)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;std::ffi::os_str::OsString&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="549" width="0.1003%" height="15" fill="rgb(208,32,45)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="559.50"></text></g><g><title>cfree (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="533" width="0.1003%" height="15" fill="rgb(207,135,9)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="543.50"></text></g><g><title>all (999,999,973 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="927.50"></text></g><g><title>aoc-2024-megapr (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="911.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="895.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="879.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="863.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="687.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="671.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="639.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="623.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="597" width="0.1003%" height="15" fill="rgb(244,192,49)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="607.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="581" width="0.1003%" height="15" fill="rgb(226,211,11)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="591.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="565" width="0.1003%" height="15" fill="rgb(236,162,54)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="549" width="0.1003%" height="15" fill="rgb(220,229,9)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="533" width="0.1003%" height="15" fill="rgb(250,87,22)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="517" width="0.1003%" height="15" fill="rgb(239,43,17)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="527.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="501" width="0.1003%" height="15" fill="rgb(231,177,25)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="511.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="485" width="0.1003%" height="15" fill="rgb(219,179,1)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="469" width="0.1003%" height="15" fill="rgb(238,219,53)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="453" width="0.1003%" height="15" fill="rgb(232,167,36)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="437" width="0.1003%" height="15" fill="rgb(244,19,51)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="421" width="0.1003%" height="15" fill="rgb(224,6,22)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="405" width="0.1003%" height="15" fill="rgb(224,145,5)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="389" width="0.1003%" height="15" fill="rgb(234,130,49)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="373" width="0.1003%" height="15" fill="rgb(254,6,2)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="357" width="0.1003%" height="15" fill="rgb(208,96,46)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="341" width="0.1003%" height="15" fill="rgb(239,3,39)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="325" width="0.1003%" height="15" fill="rgb(233,210,1)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="309" width="0.1003%" height="15" fill="rgb(244,137,37)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="293" width="0.1003%" height="15" fill="rgb(240,136,2)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="277" width="0.1003%" height="15" fill="rgb(239,18,37)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="261" width="0.1003%" height="15" fill="rgb(218,185,22)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="245" width="0.1003%" height="15" fill="rgb(225,218,4)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="229" width="0.1003%" height="15" fill="rgb(230,182,32)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="213" width="0.1003%" height="15" fill="rgb(242,56,43)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="197" width="0.1003%" height="15" fill="rgb(233,99,24)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="181" width="0.1003%" height="15" fill="rgb(234,209,42)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="165" width="0.1003%" height="15" fill="rgb(227,7,12)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="149" width="0.1003%" height="15" fill="rgb(245,203,43)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="159.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="133" width="0.1003%" height="15" fill="rgb(238,205,33)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="143.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="117" width="0.1003%" height="15" fill="rgb(231,56,7)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="101" width="0.1003%" height="15" fill="rgb(244,186,29)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="111.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="85" width="0.1003%" height="15" fill="rgb(234,111,31)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="69" width="0.1003%" height="15" fill="rgb(241,149,10)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="53" width="0.1003%" height="15" fill="rgb(249,206,44)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="37" width="0.1003%" height="15" fill="rgb(251,153,30)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="47.50"></text></g></svg></svg>