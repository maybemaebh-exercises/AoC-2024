<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="7.7154%" y="373" width="0.2004%" height="15" fill="rgb(227,0,7)" fg:x="77231693" fg:w="2006018"/><text x="7.9654%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (2,006,018 samples, 0.20%)</title><rect x="7.7154%" y="357" width="0.2004%" height="15" fill="rgb(217,0,24)" fg:x="77231693" fg:w="2006018"/><text x="7.9654%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (2,006,018 samples, 0.20%)</title><rect x="7.7154%" y="341" width="0.2004%" height="15" fill="rgb(221,193,54)" fg:x="77231693" fg:w="2006018"/><text x="7.9654%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="7.7154%" y="325" width="0.2004%" height="15" fill="rgb(248,212,6)" fg:x="77231693" fg:w="2006018"/><text x="7.9654%" y="335.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (58,174,522 samples, 5.81%)</title><rect x="2.2044%" y="405" width="5.8116%" height="15" fill="rgb(208,68,35)" fg:x="22066198" fg:w="58174522"/><text x="2.4544%" y="415.50">&lt;core::..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (50,150,450 samples, 5.01%)</title><rect x="3.0060%" y="389" width="5.0100%" height="15" fill="rgb(232,128,0)" fg:x="30090270" fg:w="50150450"/><text x="3.2560%" y="399.50">core::..</text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (1,003,009 samples, 0.10%)</title><rect x="7.9158%" y="373" width="0.1002%" height="15" fill="rgb(207,160,47)" fg:x="79237711" fg:w="1003009"/><text x="8.1658%" y="383.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (77,231,693 samples, 7.72%)</title><rect x="0.4008%" y="437" width="7.7154%" height="15" fill="rgb(228,23,34)" fg:x="4012036" fg:w="77231693"/><text x="0.6508%" y="447.50">&lt;core::str:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (74,222,666 samples, 7.41%)</title><rect x="0.7014%" y="421" width="7.4148%" height="15" fill="rgb(218,30,26)" fg:x="7021063" fg:w="74222666"/><text x="0.9514%" y="431.50">core::str:..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="8.0160%" y="405" width="0.1002%" height="15" fill="rgb(220,122,19)" fg:x="80240720" fg:w="1003009"/><text x="8.2660%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="8.0160%" y="389" width="0.1002%" height="15" fill="rgb(250,228,42)" fg:x="80240720" fg:w="1003009"/><text x="8.2660%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93,279,837 samples, 9.32%)</title><rect x="0.3006%" y="453" width="9.3186%" height="15" fill="rgb(240,193,28)" fg:x="3009027" fg:w="93279837"/><text x="0.5506%" y="463.50">&lt;core::iter::..</text></g><g><title>core::option::Option&lt;T&gt;::map (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="437" width="1.5030%" height="15" fill="rgb(216,20,37)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="421" width="1.5030%" height="15" fill="rgb(206,188,39)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="431.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="405" width="1.5030%" height="15" fill="rgb(217,207,13)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="389" width="1.5030%" height="15" fill="rgb(231,73,38)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="399.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="373" width="1.5030%" height="15" fill="rgb(225,20,46)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="357" width="1.5030%" height="15" fill="rgb(210,31,41)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (15,045,135 samples, 1.50%)</title><rect x="8.1162%" y="341" width="1.5030%" height="15" fill="rgb(221,200,47)" fg:x="81243729" fg:w="15045135"/><text x="8.3662%" y="351.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2,006,018 samples, 0.20%)</title><rect x="9.4188%" y="325" width="0.2004%" height="15" fill="rgb(226,26,5)" fg:x="94282846" fg:w="2006018"/><text x="9.6688%" y="335.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="9.4188%" y="309" width="0.2004%" height="15" fill="rgb(249,33,26)" fg:x="94282846" fg:w="2006018"/><text x="9.6688%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (99,297,891 samples, 9.92%)</title><rect x="0.2004%" y="501" width="9.9198%" height="15" fill="rgb(235,183,28)" fg:x="2006018" fg:w="99297891"/><text x="0.4504%" y="511.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (99,297,891 samples, 9.92%)</title><rect x="0.2004%" y="485" width="9.9198%" height="15" fill="rgb(221,5,38)" fg:x="2006018" fg:w="99297891"/><text x="0.4504%" y="495.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (99,297,891 samples, 9.92%)</title><rect x="0.2004%" y="469" width="9.9198%" height="15" fill="rgb(247,18,42)" fg:x="2006018" fg:w="99297891"/><text x="0.4504%" y="479.50">alloc::vec::Ve..</text></g><g><title>core::ptr::write (5,015,045 samples, 0.50%)</title><rect x="9.6192%" y="453" width="0.5010%" height="15" fill="rgb(241,131,45)" fg:x="96288864" fg:w="5015045"/><text x="9.8692%" y="463.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (30,090,270 samples, 3.01%)</title><rect x="11.3226%" y="453" width="3.0060%" height="15" fill="rgb(249,31,29)" fg:x="113340017" fg:w="30090270"/><text x="11.5726%" y="463.50">&lt;co..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (26,078,234 samples, 2.61%)</title><rect x="11.7234%" y="437" width="2.6052%" height="15" fill="rgb(225,111,53)" fg:x="117352053" fg:w="26078234"/><text x="11.9734%" y="447.50">co..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="14.2285%" y="421" width="0.1002%" height="15" fill="rgb(238,160,17)" fg:x="142427278" fg:w="1003009"/><text x="14.4785%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="14.2285%" y="405" width="0.1002%" height="15" fill="rgb(214,148,48)" fg:x="142427278" fg:w="1003009"/><text x="14.4785%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="14.2285%" y="389" width="0.1002%" height="15" fill="rgb(232,36,49)" fg:x="142427278" fg:w="1003009"/><text x="14.4785%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="14.2285%" y="373" width="0.1002%" height="15" fill="rgb(209,103,24)" fg:x="142427278" fg:w="1003009"/><text x="14.4785%" y="383.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (42,126,378 samples, 4.21%)</title><rect x="10.2204%" y="485" width="4.2084%" height="15" fill="rgb(229,88,8)" fg:x="102306918" fg:w="42126378"/><text x="10.4704%" y="495.50">&lt;core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (42,126,378 samples, 4.21%)</title><rect x="10.2204%" y="469" width="4.2084%" height="15" fill="rgb(213,181,19)" fg:x="102306918" fg:w="42126378"/><text x="10.4704%" y="479.50">core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="14.3287%" y="453" width="0.1002%" height="15" fill="rgb(254,191,54)" fg:x="143430287" fg:w="1003009"/><text x="14.5787%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="14.3287%" y="437" width="0.1002%" height="15" fill="rgb(241,83,37)" fg:x="143430287" fg:w="1003009"/><text x="14.5787%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="14.3287%" y="421" width="0.1002%" height="15" fill="rgb(233,36,39)" fg:x="143430287" fg:w="1003009"/><text x="14.5787%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="14.3287%" y="405" width="0.1002%" height="15" fill="rgb(226,3,54)" fg:x="143430287" fg:w="1003009"/><text x="14.5787%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54,162,486 samples, 5.41%)</title><rect x="10.1202%" y="501" width="5.4108%" height="15" fill="rgb(245,192,40)" fg:x="101303909" fg:w="54162486"/><text x="10.3702%" y="511.50">&lt;core::..</text></g><g><title>core::option::Option&lt;T&gt;::map (11,033,099 samples, 1.10%)</title><rect x="14.4289%" y="485" width="1.1022%" height="15" fill="rgb(238,167,29)" fg:x="144433296" fg:w="11033099"/><text x="14.6789%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10,030,090 samples, 1.00%)</title><rect x="14.5291%" y="469" width="1.0020%" height="15" fill="rgb(232,182,51)" fg:x="145436305" fg:w="10030090"/><text x="14.7791%" y="479.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (10,030,090 samples, 1.00%)</title><rect x="14.5291%" y="453" width="1.0020%" height="15" fill="rgb(231,60,39)" fg:x="145436305" fg:w="10030090"/><text x="14.7791%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (10,030,090 samples, 1.00%)</title><rect x="14.5291%" y="437" width="1.0020%" height="15" fill="rgb(208,69,12)" fg:x="145436305" fg:w="10030090"/><text x="14.7791%" y="447.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (10,030,090 samples, 1.00%)</title><rect x="14.5291%" y="421" width="1.0020%" height="15" fill="rgb(235,93,37)" fg:x="145436305" fg:w="10030090"/><text x="14.7791%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (10,030,090 samples, 1.00%)</title><rect x="14.5291%" y="405" width="1.0020%" height="15" fill="rgb(213,116,39)" fg:x="145436305" fg:w="10030090"/><text x="14.7791%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (10,030,090 samples, 1.00%)</title><rect x="14.5291%" y="389" width="1.0020%" height="15" fill="rgb(222,207,29)" fg:x="145436305" fg:w="10030090"/><text x="14.7791%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (4,012,036 samples, 0.40%)</title><rect x="15.1303%" y="373" width="0.4008%" height="15" fill="rgb(206,96,30)" fg:x="151454359" fg:w="4012036"/><text x="15.3803%" y="383.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (4,012,036 samples, 0.40%)</title><rect x="15.1303%" y="357" width="0.4008%" height="15" fill="rgb(218,138,4)" fg:x="151454359" fg:w="4012036"/><text x="15.3803%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="16.4329%" y="421" width="0.2004%" height="15" fill="rgb(250,191,14)" fg:x="164493476" fg:w="2006018"/><text x="16.6829%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="16.4329%" y="405" width="0.2004%" height="15" fill="rgb(239,60,40)" fg:x="164493476" fg:w="2006018"/><text x="16.6829%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,006,018 samples, 0.20%)</title><rect x="16.4329%" y="389" width="0.2004%" height="15" fill="rgb(206,27,48)" fg:x="164493476" fg:w="2006018"/><text x="16.6829%" y="399.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="16.5331%" y="373" width="0.1002%" height="15" fill="rgb(225,35,8)" fg:x="165496485" fg:w="1003009"/><text x="16.7831%" y="383.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="17.6353%" y="373" width="0.1002%" height="15" fill="rgb(250,213,24)" fg:x="176529584" fg:w="1003009"/><text x="17.8853%" y="383.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="17.7355%" y="373" width="0.1002%" height="15" fill="rgb(247,123,22)" fg:x="177532593" fg:w="1003009"/><text x="17.9855%" y="383.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,087,261 samples, 2.91%)</title><rect x="15.5311%" y="469" width="2.9058%" height="15" fill="rgb(231,138,38)" fg:x="155466395" fg:w="29087261"/><text x="15.7811%" y="479.50">&lt;c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (29,087,261 samples, 2.91%)</title><rect x="15.5311%" y="453" width="2.9058%" height="15" fill="rgb(231,145,46)" fg:x="155466395" fg:w="29087261"/><text x="15.7811%" y="463.50">co..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (23,069,207 samples, 2.30%)</title><rect x="16.1323%" y="437" width="2.3046%" height="15" fill="rgb(251,118,11)" fg:x="161484449" fg:w="23069207"/><text x="16.3823%" y="447.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (18,054,162 samples, 1.80%)</title><rect x="16.6333%" y="421" width="1.8036%" height="15" fill="rgb(217,147,25)" fg:x="166499494" fg:w="18054162"/><text x="16.8833%" y="431.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (15,045,135 samples, 1.50%)</title><rect x="16.9339%" y="405" width="1.5030%" height="15" fill="rgb(247,81,37)" fg:x="169508521" fg:w="15045135"/><text x="17.1839%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (13,039,117 samples, 1.30%)</title><rect x="17.1343%" y="389" width="1.3026%" height="15" fill="rgb(209,12,38)" fg:x="171514539" fg:w="13039117"/><text x="17.3843%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_naive (6,018,054 samples, 0.60%)</title><rect x="17.8357%" y="373" width="0.6012%" height="15" fill="rgb(227,1,9)" fg:x="178535602" fg:w="6018054"/><text x="18.0857%" y="383.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (34,102,306 samples, 3.41%)</title><rect x="15.5311%" y="501" width="3.4068%" height="15" fill="rgb(248,47,43)" fg:x="155466395" fg:w="34102306"/><text x="15.7811%" y="511.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,102,306 samples, 3.41%)</title><rect x="15.5311%" y="485" width="3.4068%" height="15" fill="rgb(221,10,30)" fg:x="155466395" fg:w="34102306"/><text x="15.7811%" y="495.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (5,015,045 samples, 0.50%)</title><rect x="18.4369%" y="469" width="0.5010%" height="15" fill="rgb(210,229,1)" fg:x="184553656" fg:w="5015045"/><text x="18.6869%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,015,045 samples, 0.50%)</title><rect x="18.4369%" y="453" width="0.5010%" height="15" fill="rgb(222,148,37)" fg:x="184553656" fg:w="5015045"/><text x="18.6869%" y="463.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (5,015,045 samples, 0.50%)</title><rect x="18.4369%" y="437" width="0.5010%" height="15" fill="rgb(234,67,33)" fg:x="184553656" fg:w="5015045"/><text x="18.6869%" y="447.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (5,015,045 samples, 0.50%)</title><rect x="18.4369%" y="421" width="0.5010%" height="15" fill="rgb(247,98,35)" fg:x="184553656" fg:w="5015045"/><text x="18.6869%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,012,036 samples, 0.40%)</title><rect x="18.5371%" y="405" width="0.4008%" height="15" fill="rgb(247,138,52)" fg:x="185556665" fg:w="4012036"/><text x="18.7871%" y="415.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,012,036 samples, 0.40%)</title><rect x="18.5371%" y="389" width="0.4008%" height="15" fill="rgb(213,79,30)" fg:x="185556665" fg:w="4012036"/><text x="18.7871%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (4,012,036 samples, 0.40%)</title><rect x="18.5371%" y="373" width="0.4008%" height="15" fill="rgb(246,177,23)" fg:x="185556665" fg:w="4012036"/><text x="18.7871%" y="383.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (4,012,036 samples, 0.40%)</title><rect x="18.5371%" y="357" width="0.4008%" height="15" fill="rgb(230,62,27)" fg:x="185556665" fg:w="4012036"/><text x="18.7871%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (4,012,036 samples, 0.40%)</title><rect x="18.5371%" y="341" width="0.4008%" height="15" fill="rgb(216,154,8)" fg:x="185556665" fg:w="4012036"/><text x="18.7871%" y="351.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="18.9379%" y="341" width="0.1002%" height="15" fill="rgb(244,35,45)" fg:x="189568701" fg:w="1003009"/><text x="19.1879%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="501" width="0.2004%" height="15" fill="rgb(251,115,12)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="485" width="0.2004%" height="15" fill="rgb(240,54,50)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="469" width="0.2004%" height="15" fill="rgb(233,84,52)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="453" width="0.2004%" height="15" fill="rgb(207,117,47)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="437" width="0.2004%" height="15" fill="rgb(249,43,39)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="421" width="0.2004%" height="15" fill="rgb(209,38,44)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="405" width="0.2004%" height="15" fill="rgb(236,212,23)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="389" width="0.2004%" height="15" fill="rgb(242,79,21)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="399.50"></text></g><g><title>__rustc::__rust_alloc (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="373" width="0.2004%" height="15" fill="rgb(211,96,35)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="383.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (2,006,018 samples, 0.20%)</title><rect x="18.9379%" y="357" width="0.2004%" height="15" fill="rgb(253,215,40)" fg:x="189568701" fg:w="2006018"/><text x="19.1879%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="341" width="0.1002%" height="15" fill="rgb(211,81,21)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="351.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="325" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="21.1423%" y="485" width="0.3006%" height="15" fill="rgb(235,213,38)" fg:x="211634899" fg:w="3009027"/><text x="21.3923%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="21.2425%" y="469" width="0.2004%" height="15" fill="rgb(237,122,38)" fg:x="212637908" fg:w="2006018"/><text x="21.4925%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="21.3427%" y="453" width="0.1002%" height="15" fill="rgb(244,218,35)" fg:x="213640917" fg:w="1003009"/><text x="21.5927%" y="463.50"></text></g><g><title>ahash::operations::folded_multiply (7,021,063 samples, 0.70%)</title><rect x="23.1463%" y="325" width="0.7014%" height="15" fill="rgb(240,68,47)" fg:x="231695079" fg:w="7021063"/><text x="23.3963%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (13,039,117 samples, 1.30%)</title><rect x="23.1463%" y="341" width="1.3026%" height="15" fill="rgb(210,16,53)" fg:x="231695079" fg:w="13039117"/><text x="23.3963%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.60%)</title><rect x="23.8477%" y="325" width="0.6012%" height="15" fill="rgb(235,124,12)" fg:x="238716142" fg:w="6018054"/><text x="24.0977%" y="335.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (14,042,126 samples, 1.40%)</title><rect x="24.4489%" y="341" width="1.4028%" height="15" fill="rgb(224,169,11)" fg:x="244734196" fg:w="14042126"/><text x="24.6989%" y="351.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (14,042,126 samples, 1.40%)</title><rect x="24.4489%" y="325" width="1.4028%" height="15" fill="rgb(250,166,2)" fg:x="244734196" fg:w="14042126"/><text x="24.6989%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.10%)</title><rect x="25.8517%" y="293" width="0.1002%" height="15" fill="rgb(242,216,29)" fg:x="258776322" fg:w="1003009"/><text x="26.1017%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,003,009 samples, 0.10%)</title><rect x="25.8517%" y="277" width="0.1002%" height="15" fill="rgb(230,116,27)" fg:x="258776322" fg:w="1003009"/><text x="26.1017%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,003,009 samples, 0.10%)</title><rect x="25.8517%" y="261" width="0.1002%" height="15" fill="rgb(228,99,48)" fg:x="258776322" fg:w="1003009"/><text x="26.1017%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,003,009 samples, 0.10%)</title><rect x="25.8517%" y="245" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="258776322" fg:w="1003009"/><text x="26.1017%" y="255.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (20,060,180 samples, 2.00%)</title><rect x="25.9519%" y="261" width="2.0040%" height="15" fill="rgb(247,143,39)" fg:x="259779331" fg:w="20060180"/><text x="26.2019%" y="271.50">a..</text></g><g><title>ahash::operations::folded_multiply (15,045,135 samples, 1.50%)</title><rect x="26.4529%" y="245" width="1.5030%" height="15" fill="rgb(236,97,10)" fg:x="264794376" fg:w="15045135"/><text x="26.7029%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (53,159,477 samples, 5.31%)</title><rect x="23.1463%" y="373" width="5.3106%" height="15" fill="rgb(233,208,19)" fg:x="231695079" fg:w="53159477"/><text x="23.3963%" y="383.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (53,159,477 samples, 5.31%)</title><rect x="23.1463%" y="357" width="5.3106%" height="15" fill="rgb(216,164,2)" fg:x="231695079" fg:w="53159477"/><text x="23.3963%" y="367.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (26,078,234 samples, 2.61%)</title><rect x="25.8517%" y="341" width="2.6052%" height="15" fill="rgb(220,129,5)" fg:x="258776322" fg:w="26078234"/><text x="26.1017%" y="351.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (26,078,234 samples, 2.61%)</title><rect x="25.8517%" y="325" width="2.6052%" height="15" fill="rgb(242,17,10)" fg:x="258776322" fg:w="26078234"/><text x="26.1017%" y="335.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (26,078,234 samples, 2.61%)</title><rect x="25.8517%" y="309" width="2.6052%" height="15" fill="rgb(242,107,0)" fg:x="258776322" fg:w="26078234"/><text x="26.1017%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (25,075,225 samples, 2.51%)</title><rect x="25.9519%" y="293" width="2.5050%" height="15" fill="rgb(251,28,31)" fg:x="259779331" fg:w="25075225"/><text x="26.2019%" y="303.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (25,075,225 samples, 2.51%)</title><rect x="25.9519%" y="277" width="2.5050%" height="15" fill="rgb(233,223,10)" fg:x="259779331" fg:w="25075225"/><text x="26.2019%" y="287.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (5,015,045 samples, 0.50%)</title><rect x="27.9559%" y="261" width="0.5010%" height="15" fill="rgb(215,21,27)" fg:x="279839511" fg:w="5015045"/><text x="28.2059%" y="271.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="29.3587%" y="325" width="0.8016%" height="15" fill="rgb(232,23,21)" fg:x="293881637" fg:w="8024072"/><text x="29.6087%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.80%)</title><rect x="29.3587%" y="309" width="0.8016%" height="15" fill="rgb(244,5,23)" fg:x="293881637" fg:w="8024072"/><text x="29.6087%" y="319.50"></text></g><g><title>core::intrinsics::likely (15,045,135 samples, 1.50%)</title><rect x="30.1603%" y="325" width="1.5030%" height="15" fill="rgb(226,81,46)" fg:x="301905709" fg:w="15045135"/><text x="30.4103%" y="335.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (3,009,027 samples, 0.30%)</title><rect x="31.6633%" y="325" width="0.3006%" height="15" fill="rgb(247,70,30)" fg:x="316950844" fg:w="3009027"/><text x="31.9133%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,009,027 samples, 0.30%)</title><rect x="31.6633%" y="309" width="0.3006%" height="15" fill="rgb(212,68,19)" fg:x="316950844" fg:w="3009027"/><text x="31.9133%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="31.6633%" y="293" width="0.3006%" height="15" fill="rgb(240,187,13)" fg:x="316950844" fg:w="3009027"/><text x="31.9133%" y="303.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,003,009 samples, 0.10%)</title><rect x="31.9639%" y="325" width="0.1002%" height="15" fill="rgb(223,113,26)" fg:x="319959871" fg:w="1003009"/><text x="32.2139%" y="335.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="31.9639%" y="309" width="0.1002%" height="15" fill="rgb(206,192,2)" fg:x="319959871" fg:w="1003009"/><text x="32.2139%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="31.9639%" y="293" width="0.1002%" height="15" fill="rgb(241,108,4)" fg:x="319959871" fg:w="1003009"/><text x="32.2139%" y="303.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,009,027 samples, 0.30%)</title><rect x="32.0641%" y="325" width="0.3006%" height="15" fill="rgb(247,173,49)" fg:x="320962880" fg:w="3009027"/><text x="32.3141%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,009,027 samples, 0.30%)</title><rect x="32.0641%" y="309" width="0.3006%" height="15" fill="rgb(224,114,35)" fg:x="320962880" fg:w="3009027"/><text x="32.3141%" y="319.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,006,018 samples, 0.20%)</title><rect x="32.3647%" y="325" width="0.2004%" height="15" fill="rgb(245,159,27)" fg:x="323971907" fg:w="2006018"/><text x="32.6147%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (68,204,612 samples, 6.81%)</title><rect x="32.5651%" y="309" width="6.8136%" height="15" fill="rgb(245,172,44)" fg:x="325977925" fg:w="68204612"/><text x="32.8151%" y="319.50">hashbrown..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (68,204,612 samples, 6.81%)</title><rect x="32.5651%" y="293" width="6.8136%" height="15" fill="rgb(236,23,11)" fg:x="325977925" fg:w="68204612"/><text x="32.8151%" y="303.50">&lt;Q as has..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (68,204,612 samples, 6.81%)</title><rect x="32.5651%" y="277" width="6.8136%" height="15" fill="rgb(205,117,38)" fg:x="325977925" fg:w="68204612"/><text x="32.8151%" y="287.50">core::cmp..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (68,204,612 samples, 6.81%)</title><rect x="32.5651%" y="261" width="6.8136%" height="15" fill="rgb(237,72,25)" fg:x="325977925" fg:w="68204612"/><text x="32.8151%" y="271.50">core::arr..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (68,204,612 samples, 6.81%)</title><rect x="32.5651%" y="245" width="6.8136%" height="15" fill="rgb(244,70,9)" fg:x="325977925" fg:w="68204612"/><text x="32.8151%" y="255.50">&lt;T as cor..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (19,057,171 samples, 1.90%)</title><rect x="39.3788%" y="309" width="1.9038%" height="15" fill="rgb(217,125,39)" fg:x="394182537" fg:w="19057171"/><text x="39.6288%" y="319.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (19,057,171 samples, 1.90%)</title><rect x="39.3788%" y="293" width="1.9038%" height="15" fill="rgb(235,36,10)" fg:x="394182537" fg:w="19057171"/><text x="39.6288%" y="303.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (19,057,171 samples, 1.90%)</title><rect x="39.3788%" y="277" width="1.9038%" height="15" fill="rgb(251,123,47)" fg:x="394182537" fg:w="19057171"/><text x="39.6288%" y="287.50">c..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (95,285,855 samples, 9.52%)</title><rect x="32.5651%" y="325" width="9.5190%" height="15" fill="rgb(221,13,13)" fg:x="325977925" fg:w="95285855"/><text x="32.8151%" y="335.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8,024,072 samples, 0.80%)</title><rect x="41.2826%" y="309" width="0.8016%" height="15" fill="rgb(238,131,9)" fg:x="413239708" fg:w="8024072"/><text x="41.5326%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8,024,072 samples, 0.80%)</title><rect x="41.2826%" y="293" width="0.8016%" height="15" fill="rgb(211,50,8)" fg:x="413239708" fg:w="8024072"/><text x="41.5326%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8,024,072 samples, 0.80%)</title><rect x="41.2826%" y="277" width="0.8016%" height="15" fill="rgb(245,182,24)" fg:x="413239708" fg:w="8024072"/><text x="41.5326%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (226,680,034 samples, 22.65%)</title><rect x="21.4429%" y="485" width="22.6453%" height="15" fill="rgb(242,14,37)" fg:x="214643926" fg:w="226680034"/><text x="21.6929%" y="495.50">core::cmp::impls::&lt;impl core::cmp::P..</text></g><g><title>core::cmp::PartialOrd::gt (226,680,034 samples, 22.65%)</title><rect x="21.4429%" y="469" width="22.6453%" height="15" fill="rgb(246,228,12)" fg:x="214643926" fg:w="226680034"/><text x="21.6929%" y="479.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (223,671,007 samples, 22.34%)</title><rect x="21.7435%" y="453" width="22.3447%" height="15" fill="rgb(213,55,15)" fg:x="217652953" fg:w="223671007"/><text x="21.9935%" y="463.50">&lt;aoc_2024_megaproject::problems::da..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (222,667,998 samples, 22.24%)</title><rect x="21.8437%" y="437" width="22.2445%" height="15" fill="rgb(209,9,3)" fg:x="218655962" fg:w="222667998"/><text x="22.0937%" y="447.50">aoc_2024_megaproject::problems::day..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (221,664,989 samples, 22.14%)</title><rect x="21.9439%" y="421" width="22.1443%" height="15" fill="rgb(230,59,30)" fg:x="219658971" fg:w="221664989"/><text x="22.1939%" y="431.50">std::collections::hash::map::HashMa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (221,664,989 samples, 22.14%)</title><rect x="21.9439%" y="405" width="22.1443%" height="15" fill="rgb(209,121,21)" fg:x="219658971" fg:w="221664989"/><text x="22.1939%" y="415.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::g..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (221,664,989 samples, 22.14%)</title><rect x="21.9439%" y="389" width="22.1443%" height="15" fill="rgb(220,109,13)" fg:x="219658971" fg:w="221664989"/><text x="22.1939%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::g..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (156,469,404 samples, 15.63%)</title><rect x="28.4569%" y="373" width="15.6313%" height="15" fill="rgb(232,18,1)" fg:x="284854556" fg:w="156469404"/><text x="28.7069%" y="383.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (156,469,404 samples, 15.63%)</title><rect x="28.4569%" y="357" width="15.6313%" height="15" fill="rgb(215,41,42)" fg:x="284854556" fg:w="156469404"/><text x="28.7069%" y="367.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (156,469,404 samples, 15.63%)</title><rect x="28.4569%" y="341" width="15.6313%" height="15" fill="rgb(224,123,36)" fg:x="284854556" fg:w="156469404"/><text x="28.7069%" y="351.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (20,060,180 samples, 2.00%)</title><rect x="42.0842%" y="325" width="2.0040%" height="15" fill="rgb(240,125,3)" fg:x="421263780" fg:w="20060180"/><text x="42.3342%" y="335.50">h..</text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="45.3908%" y="325" width="0.9018%" height="15" fill="rgb(205,98,50)" fg:x="454363077" fg:w="9027081"/><text x="45.6408%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="46.1924%" y="309" width="0.1002%" height="15" fill="rgb(205,185,37)" fg:x="462387149" fg:w="1003009"/><text x="46.4424%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (11,033,099 samples, 1.10%)</title><rect x="45.3908%" y="341" width="1.1022%" height="15" fill="rgb(238,207,15)" fg:x="454363077" fg:w="11033099"/><text x="45.6408%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="46.2926%" y="325" width="0.2004%" height="15" fill="rgb(213,199,42)" fg:x="463390158" fg:w="2006018"/><text x="46.5426%" y="335.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (10,030,090 samples, 1.00%)</title><rect x="46.4930%" y="341" width="1.0020%" height="15" fill="rgb(235,201,11)" fg:x="465396176" fg:w="10030090"/><text x="46.7430%" y="351.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (10,030,090 samples, 1.00%)</title><rect x="46.4930%" y="325" width="1.0020%" height="15" fill="rgb(207,46,11)" fg:x="465396176" fg:w="10030090"/><text x="46.7430%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.10%)</title><rect x="47.4950%" y="293" width="0.1002%" height="15" fill="rgb(241,35,35)" fg:x="475426266" fg:w="1003009"/><text x="47.7450%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,003,009 samples, 0.10%)</title><rect x="47.4950%" y="277" width="0.1002%" height="15" fill="rgb(243,32,47)" fg:x="475426266" fg:w="1003009"/><text x="47.7450%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,003,009 samples, 0.10%)</title><rect x="47.4950%" y="261" width="0.1002%" height="15" fill="rgb(247,202,23)" fg:x="475426266" fg:w="1003009"/><text x="47.7450%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,003,009 samples, 0.10%)</title><rect x="47.4950%" y="245" width="0.1002%" height="15" fill="rgb(219,102,11)" fg:x="475426266" fg:w="1003009"/><text x="47.7450%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="47.4950%" y="229" width="0.1002%" height="15" fill="rgb(243,110,44)" fg:x="475426266" fg:w="1003009"/><text x="47.7450%" y="239.50"></text></g><g><title>ahash::operations::folded_multiply (10,030,090 samples, 1.00%)</title><rect x="47.6954%" y="245" width="1.0020%" height="15" fill="rgb(222,74,54)" fg:x="477432284" fg:w="10030090"/><text x="47.9454%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="48.5972%" y="229" width="0.1002%" height="15" fill="rgb(216,99,12)" fg:x="486459365" fg:w="1003009"/><text x="48.8472%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (12,036,108 samples, 1.20%)</title><rect x="47.5952%" y="261" width="1.2024%" height="15" fill="rgb(226,22,26)" fg:x="476429275" fg:w="12036108"/><text x="47.8452%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.10%)</title><rect x="48.6974%" y="245" width="0.1002%" height="15" fill="rgb(217,163,10)" fg:x="487462374" fg:w="1003009"/><text x="48.9474%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (45,135,405 samples, 4.51%)</title><rect x="45.3908%" y="373" width="4.5090%" height="15" fill="rgb(213,25,53)" fg:x="454363077" fg:w="45135405"/><text x="45.6408%" y="383.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (45,135,405 samples, 4.51%)</title><rect x="45.3908%" y="357" width="4.5090%" height="15" fill="rgb(252,105,26)" fg:x="454363077" fg:w="45135405"/><text x="45.6408%" y="367.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (24,072,216 samples, 2.40%)</title><rect x="47.4950%" y="341" width="2.4048%" height="15" fill="rgb(220,39,43)" fg:x="475426266" fg:w="24072216"/><text x="47.7450%" y="351.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (24,072,216 samples, 2.40%)</title><rect x="47.4950%" y="325" width="2.4048%" height="15" fill="rgb(229,68,48)" fg:x="475426266" fg:w="24072216"/><text x="47.7450%" y="335.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (24,072,216 samples, 2.40%)</title><rect x="47.4950%" y="309" width="2.4048%" height="15" fill="rgb(252,8,32)" fg:x="475426266" fg:w="24072216"/><text x="47.7450%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (23,069,207 samples, 2.30%)</title><rect x="47.5952%" y="293" width="2.3046%" height="15" fill="rgb(223,20,43)" fg:x="476429275" fg:w="23069207"/><text x="47.8452%" y="303.50">c..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (23,069,207 samples, 2.30%)</title><rect x="47.5952%" y="277" width="2.3046%" height="15" fill="rgb(229,81,49)" fg:x="476429275" fg:w="23069207"/><text x="47.8452%" y="287.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (11,033,099 samples, 1.10%)</title><rect x="48.7976%" y="261" width="1.1022%" height="15" fill="rgb(236,28,36)" fg:x="488465383" fg:w="11033099"/><text x="49.0476%" y="271.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13,039,117 samples, 1.30%)</title><rect x="50.9018%" y="325" width="1.3026%" height="15" fill="rgb(249,185,26)" fg:x="509528572" fg:w="13039117"/><text x="51.1518%" y="335.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (13,039,117 samples, 1.30%)</title><rect x="50.9018%" y="309" width="1.3026%" height="15" fill="rgb(249,174,33)" fg:x="509528572" fg:w="13039117"/><text x="51.1518%" y="319.50"></text></g><g><title>core::intrinsics::likely (10,030,090 samples, 1.00%)</title><rect x="52.2044%" y="325" width="1.0020%" height="15" fill="rgb(233,201,37)" fg:x="522567689" fg:w="10030090"/><text x="52.4544%" y="335.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (6,018,054 samples, 0.60%)</title><rect x="53.2064%" y="325" width="0.6012%" height="15" fill="rgb(221,78,26)" fg:x="532597779" fg:w="6018054"/><text x="53.4564%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,018,054 samples, 0.60%)</title><rect x="53.2064%" y="309" width="0.6012%" height="15" fill="rgb(250,127,30)" fg:x="532597779" fg:w="6018054"/><text x="53.4564%" y="319.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.30%)</title><rect x="53.8076%" y="325" width="0.3006%" height="15" fill="rgb(230,49,44)" fg:x="538615833" fg:w="3009027"/><text x="54.0576%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (62,186,558 samples, 6.21%)</title><rect x="54.1082%" y="309" width="6.2124%" height="15" fill="rgb(229,67,23)" fg:x="541624860" fg:w="62186558"/><text x="54.3582%" y="319.50">hashbrow..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (62,186,558 samples, 6.21%)</title><rect x="54.1082%" y="293" width="6.2124%" height="15" fill="rgb(249,83,47)" fg:x="541624860" fg:w="62186558"/><text x="54.3582%" y="303.50">&lt;Q as ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (62,186,558 samples, 6.21%)</title><rect x="54.1082%" y="277" width="6.2124%" height="15" fill="rgb(215,43,3)" fg:x="541624860" fg:w="62186558"/><text x="54.3582%" y="287.50">core::cm..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (62,186,558 samples, 6.21%)</title><rect x="54.1082%" y="261" width="6.2124%" height="15" fill="rgb(238,154,13)" fg:x="541624860" fg:w="62186558"/><text x="54.3582%" y="271.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (62,186,558 samples, 6.21%)</title><rect x="54.1082%" y="245" width="6.2124%" height="15" fill="rgb(219,56,2)" fg:x="541624860" fg:w="62186558"/><text x="54.3582%" y="255.50">&lt;T as co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (9,027,081 samples, 0.90%)</title><rect x="60.3206%" y="309" width="0.9018%" height="15" fill="rgb(233,0,4)" fg:x="603811418" fg:w="9027081"/><text x="60.5706%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (9,027,081 samples, 0.90%)</title><rect x="60.3206%" y="293" width="0.9018%" height="15" fill="rgb(235,30,7)" fg:x="603811418" fg:w="9027081"/><text x="60.5706%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9,027,081 samples, 0.90%)</title><rect x="60.3206%" y="277" width="0.9018%" height="15" fill="rgb(250,79,13)" fg:x="603811418" fg:w="9027081"/><text x="60.5706%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (77,231,693 samples, 7.72%)</title><rect x="54.1082%" y="325" width="7.7154%" height="15" fill="rgb(211,146,34)" fg:x="541624860" fg:w="77231693"/><text x="54.3582%" y="335.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (6,018,054 samples, 0.60%)</title><rect x="61.2224%" y="309" width="0.6012%" height="15" fill="rgb(228,22,38)" fg:x="612838499" fg:w="6018054"/><text x="61.4724%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6,018,054 samples, 0.60%)</title><rect x="61.2224%" y="293" width="0.6012%" height="15" fill="rgb(235,168,5)" fg:x="612838499" fg:w="6018054"/><text x="61.4724%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6,018,054 samples, 0.60%)</title><rect x="61.2224%" y="277" width="0.6012%" height="15" fill="rgb(221,155,16)" fg:x="612838499" fg:w="6018054"/><text x="61.4724%" y="287.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (441,323,960 samples, 44.09%)</title><rect x="19.1383%" y="501" width="44.0882%" height="15" fill="rgb(215,215,53)" fg:x="191574719" fg:w="441323960"/><text x="19.3883%" y="511.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (191,574,719 samples, 19.14%)</title><rect x="44.0882%" y="485" width="19.1383%" height="15" fill="rgb(223,4,10)" fg:x="441323960" fg:w="191574719"/><text x="44.3382%" y="495.50">core::cmp::impls::&lt;impl core::..</text></g><g><title>core::cmp::PartialOrd::lt (191,574,719 samples, 19.14%)</title><rect x="44.0882%" y="469" width="19.1383%" height="15" fill="rgb(234,103,6)" fg:x="441323960" fg:w="191574719"/><text x="44.3382%" y="479.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (191,574,719 samples, 19.14%)</title><rect x="44.0882%" y="453" width="19.1383%" height="15" fill="rgb(227,97,0)" fg:x="441323960" fg:w="191574719"/><text x="44.3382%" y="463.50">&lt;aoc_2024_megaproject::problem..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (191,574,719 samples, 19.14%)</title><rect x="44.0882%" y="437" width="19.1383%" height="15" fill="rgb(234,150,53)" fg:x="441323960" fg:w="191574719"/><text x="44.3382%" y="447.50">aoc_2024_megaproject::problems..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (190,571,710 samples, 19.04%)</title><rect x="44.1884%" y="421" width="19.0381%" height="15" fill="rgb(228,201,54)" fg:x="442326969" fg:w="190571710"/><text x="44.4384%" y="431.50">std::collections::hash::map::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (190,571,710 samples, 19.04%)</title><rect x="44.1884%" y="405" width="19.0381%" height="15" fill="rgb(222,22,37)" fg:x="442326969" fg:w="190571710"/><text x="44.4384%" y="415.50">hashbrown::map::HashMap&lt;K,V,S,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (190,571,710 samples, 19.04%)</title><rect x="44.1884%" y="389" width="19.0381%" height="15" fill="rgb(237,53,32)" fg:x="442326969" fg:w="190571710"/><text x="44.4384%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (133,400,197 samples, 13.33%)</title><rect x="49.8998%" y="373" width="13.3267%" height="15" fill="rgb(233,25,53)" fg:x="499498482" fg:w="133400197"/><text x="50.1498%" y="383.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (133,400,197 samples, 13.33%)</title><rect x="49.8998%" y="357" width="13.3267%" height="15" fill="rgb(210,40,34)" fg:x="499498482" fg:w="133400197"/><text x="50.1498%" y="367.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (133,400,197 samples, 13.33%)</title><rect x="49.8998%" y="341" width="13.3267%" height="15" fill="rgb(241,220,44)" fg:x="499498482" fg:w="133400197"/><text x="50.1498%" y="351.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (14,042,126 samples, 1.40%)</title><rect x="61.8236%" y="325" width="1.4028%" height="15" fill="rgb(235,28,35)" fg:x="618856553" fg:w="14042126"/><text x="62.0736%" y="335.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="66.0321%" y="341" width="0.2004%" height="15" fill="rgb(210,56,17)" fg:x="660982931" fg:w="2006018"/><text x="66.2821%" y="351.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="66.1323%" y="325" width="0.1002%" height="15" fill="rgb(224,130,29)" fg:x="661985940" fg:w="1003009"/><text x="66.3823%" y="335.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (14,042,126 samples, 1.40%)</title><rect x="66.0321%" y="357" width="1.4028%" height="15" fill="rgb(235,212,8)" fg:x="660982931" fg:w="14042126"/><text x="66.2821%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,036,108 samples, 1.20%)</title><rect x="66.2325%" y="341" width="1.2024%" height="15" fill="rgb(223,33,50)" fg:x="662988949" fg:w="12036108"/><text x="66.4825%" y="351.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,006,018 samples, 0.20%)</title><rect x="67.4349%" y="357" width="0.2004%" height="15" fill="rgb(219,149,13)" fg:x="675025057" fg:w="2006018"/><text x="67.6849%" y="367.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2,006,018 samples, 0.20%)</title><rect x="67.4349%" y="341" width="0.2004%" height="15" fill="rgb(250,156,29)" fg:x="675025057" fg:w="2006018"/><text x="67.6849%" y="351.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6,018,054 samples, 0.60%)</title><rect x="67.6353%" y="309" width="0.6012%" height="15" fill="rgb(216,193,19)" fg:x="677031075" fg:w="6018054"/><text x="67.8853%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (6,018,054 samples, 0.60%)</title><rect x="67.6353%" y="293" width="0.6012%" height="15" fill="rgb(216,135,14)" fg:x="677031075" fg:w="6018054"/><text x="67.8853%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (6,018,054 samples, 0.60%)</title><rect x="67.6353%" y="277" width="0.6012%" height="15" fill="rgb(241,47,5)" fg:x="677031075" fg:w="6018054"/><text x="67.8853%" y="287.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (6,018,054 samples, 0.60%)</title><rect x="67.6353%" y="261" width="0.6012%" height="15" fill="rgb(233,42,35)" fg:x="677031075" fg:w="6018054"/><text x="67.8853%" y="271.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="68.0361%" y="245" width="0.2004%" height="15" fill="rgb(231,13,6)" fg:x="681043111" fg:w="2006018"/><text x="68.2861%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="68.1363%" y="229" width="0.1002%" height="15" fill="rgb(207,181,40)" fg:x="682046120" fg:w="1003009"/><text x="68.3863%" y="239.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="68.6373%" y="261" width="0.2004%" height="15" fill="rgb(254,173,49)" fg:x="687061165" fg:w="2006018"/><text x="68.8873%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="68.6373%" y="245" width="0.2004%" height="15" fill="rgb(221,1,38)" fg:x="687061165" fg:w="2006018"/><text x="68.8873%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="68.8377%" y="261" width="0.1002%" height="15" fill="rgb(206,124,46)" fg:x="689067183" fg:w="1003009"/><text x="69.0877%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (12,036,108 samples, 1.20%)</title><rect x="68.2365%" y="277" width="1.2024%" height="15" fill="rgb(249,21,11)" fg:x="683049129" fg:w="12036108"/><text x="68.4865%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,015,045 samples, 0.50%)</title><rect x="68.9379%" y="261" width="0.5010%" height="15" fill="rgb(222,201,40)" fg:x="690070192" fg:w="5015045"/><text x="69.1879%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (35,105,315 samples, 3.51%)</title><rect x="66.0321%" y="389" width="3.5070%" height="15" fill="rgb(235,61,29)" fg:x="660982931" fg:w="35105315"/><text x="66.2821%" y="399.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (35,105,315 samples, 3.51%)</title><rect x="66.0321%" y="373" width="3.5070%" height="15" fill="rgb(219,207,3)" fg:x="660982931" fg:w="35105315"/><text x="66.2821%" y="383.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19,057,171 samples, 1.90%)</title><rect x="67.6353%" y="357" width="1.9038%" height="15" fill="rgb(222,56,46)" fg:x="677031075" fg:w="19057171"/><text x="67.8853%" y="367.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (19,057,171 samples, 1.90%)</title><rect x="67.6353%" y="341" width="1.9038%" height="15" fill="rgb(239,76,54)" fg:x="677031075" fg:w="19057171"/><text x="67.8853%" y="351.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (19,057,171 samples, 1.90%)</title><rect x="67.6353%" y="325" width="1.9038%" height="15" fill="rgb(231,124,27)" fg:x="677031075" fg:w="19057171"/><text x="67.8853%" y="335.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (13,039,117 samples, 1.30%)</title><rect x="68.2365%" y="309" width="1.3026%" height="15" fill="rgb(249,195,6)" fg:x="683049129" fg:w="13039117"/><text x="68.4865%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (13,039,117 samples, 1.30%)</title><rect x="68.2365%" y="293" width="1.3026%" height="15" fill="rgb(237,174,47)" fg:x="683049129" fg:w="13039117"/><text x="68.4865%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="69.4389%" y="277" width="0.1002%" height="15" fill="rgb(206,201,31)" fg:x="695085237" fg:w="1003009"/><text x="69.6889%" y="287.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 0.50%)</title><rect x="70.2405%" y="341" width="0.5010%" height="15" fill="rgb(231,57,52)" fg:x="703109309" fg:w="5015045"/><text x="70.4905%" y="351.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (5,015,045 samples, 0.50%)</title><rect x="70.2405%" y="325" width="0.5010%" height="15" fill="rgb(248,177,22)" fg:x="703109309" fg:w="5015045"/><text x="70.4905%" y="335.50"></text></g><g><title>core::intrinsics::likely (5,015,045 samples, 0.50%)</title><rect x="70.7415%" y="341" width="0.5010%" height="15" fill="rgb(215,211,37)" fg:x="708124354" fg:w="5015045"/><text x="70.9915%" y="351.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (5,015,045 samples, 0.50%)</title><rect x="71.2425%" y="341" width="0.5010%" height="15" fill="rgb(241,128,51)" fg:x="713139399" fg:w="5015045"/><text x="71.4925%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5,015,045 samples, 0.50%)</title><rect x="71.2425%" y="325" width="0.5010%" height="15" fill="rgb(227,165,31)" fg:x="713139399" fg:w="5015045"/><text x="71.4925%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.50%)</title><rect x="71.2425%" y="309" width="0.5010%" height="15" fill="rgb(228,167,24)" fg:x="713139399" fg:w="5015045"/><text x="71.4925%" y="319.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,009,027 samples, 0.30%)</title><rect x="71.7435%" y="341" width="0.3006%" height="15" fill="rgb(228,143,12)" fg:x="718154444" fg:w="3009027"/><text x="71.9935%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,009,027 samples, 0.30%)</title><rect x="71.7435%" y="325" width="0.3006%" height="15" fill="rgb(249,149,8)" fg:x="718154444" fg:w="3009027"/><text x="71.9935%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (60,180,540 samples, 6.01%)</title><rect x="72.0441%" y="325" width="6.0120%" height="15" fill="rgb(243,35,44)" fg:x="721163471" fg:w="60180540"/><text x="72.2941%" y="335.50">hashbrow..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (60,180,540 samples, 6.01%)</title><rect x="72.0441%" y="309" width="6.0120%" height="15" fill="rgb(246,89,9)" fg:x="721163471" fg:w="60180540"/><text x="72.2941%" y="319.50">&lt;Q as ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (60,180,540 samples, 6.01%)</title><rect x="72.0441%" y="293" width="6.0120%" height="15" fill="rgb(233,213,13)" fg:x="721163471" fg:w="60180540"/><text x="72.2941%" y="303.50">core::cm..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (60,180,540 samples, 6.01%)</title><rect x="72.0441%" y="277" width="6.0120%" height="15" fill="rgb(233,141,41)" fg:x="721163471" fg:w="60180540"/><text x="72.2941%" y="287.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (60,180,540 samples, 6.01%)</title><rect x="72.0441%" y="261" width="6.0120%" height="15" fill="rgb(239,167,4)" fg:x="721163471" fg:w="60180540"/><text x="72.2941%" y="271.50">&lt;T as co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (7,021,063 samples, 0.70%)</title><rect x="78.0561%" y="325" width="0.7014%" height="15" fill="rgb(209,217,16)" fg:x="781344011" fg:w="7021063"/><text x="78.3061%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (7,021,063 samples, 0.70%)</title><rect x="78.0561%" y="309" width="0.7014%" height="15" fill="rgb(219,88,35)" fg:x="781344011" fg:w="7021063"/><text x="78.3061%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7,021,063 samples, 0.70%)</title><rect x="78.0561%" y="293" width="0.7014%" height="15" fill="rgb(220,193,23)" fg:x="781344011" fg:w="7021063"/><text x="78.3061%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (70,210,630 samples, 7.01%)</title><rect x="72.0441%" y="341" width="7.0140%" height="15" fill="rgb(230,90,52)" fg:x="721163471" fg:w="70210630"/><text x="72.2941%" y="351.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3,009,027 samples, 0.30%)</title><rect x="78.7575%" y="325" width="0.3006%" height="15" fill="rgb(252,106,19)" fg:x="788365074" fg:w="3009027"/><text x="79.0075%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,009,027 samples, 0.30%)</title><rect x="78.7575%" y="309" width="0.3006%" height="15" fill="rgb(206,74,20)" fg:x="788365074" fg:w="3009027"/><text x="79.0075%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,009,027 samples, 0.30%)</title><rect x="78.7575%" y="293" width="0.3006%" height="15" fill="rgb(230,138,44)" fg:x="788365074" fg:w="3009027"/><text x="79.0075%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::gt (156,469,404 samples, 15.63%)</title><rect x="64.6293%" y="485" width="15.6313%" height="15" fill="rgb(235,182,43)" fg:x="646940805" fg:w="156469404"/><text x="64.8793%" y="495.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (156,469,404 samples, 15.63%)</title><rect x="64.6293%" y="469" width="15.6313%" height="15" fill="rgb(242,16,51)" fg:x="646940805" fg:w="156469404"/><text x="64.8793%" y="479.50">&lt;aoc_2024_megaproject::p..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (156,469,404 samples, 15.63%)</title><rect x="64.6293%" y="453" width="15.6313%" height="15" fill="rgb(248,9,4)" fg:x="646940805" fg:w="156469404"/><text x="64.8793%" y="463.50">aoc_2024_megaproject::pr..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (148,445,332 samples, 14.83%)</title><rect x="65.4309%" y="437" width="14.8297%" height="15" fill="rgb(210,31,22)" fg:x="654964877" fg:w="148445332"/><text x="65.6809%" y="447.50">std::collections::hash:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (148,445,332 samples, 14.83%)</title><rect x="65.4309%" y="421" width="14.8297%" height="15" fill="rgb(239,54,39)" fg:x="654964877" fg:w="148445332"/><text x="65.6809%" y="431.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (148,445,332 samples, 14.83%)</title><rect x="65.4309%" y="405" width="14.8297%" height="15" fill="rgb(230,99,41)" fg:x="654964877" fg:w="148445332"/><text x="65.6809%" y="415.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (107,321,963 samples, 10.72%)</title><rect x="69.5391%" y="389" width="10.7214%" height="15" fill="rgb(253,106,12)" fg:x="696088246" fg:w="107321963"/><text x="69.7891%" y="399.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (107,321,963 samples, 10.72%)</title><rect x="69.5391%" y="373" width="10.7214%" height="15" fill="rgb(213,46,41)" fg:x="696088246" fg:w="107321963"/><text x="69.7891%" y="383.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (107,321,963 samples, 10.72%)</title><rect x="69.5391%" y="357" width="10.7214%" height="15" fill="rgb(215,133,35)" fg:x="696088246" fg:w="107321963"/><text x="69.7891%" y="367.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (12,036,108 samples, 1.20%)</title><rect x="79.0581%" y="341" width="1.2024%" height="15" fill="rgb(213,28,5)" fg:x="791374101" fg:w="12036108"/><text x="79.3081%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,006,018 samples, 0.20%)</title><rect x="80.3607%" y="453" width="0.2004%" height="15" fill="rgb(215,77,49)" fg:x="804413218" fg:w="2006018"/><text x="80.6107%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,006,018 samples, 0.20%)</title><rect x="80.3607%" y="437" width="0.2004%" height="15" fill="rgb(248,100,22)" fg:x="804413218" fg:w="2006018"/><text x="80.6107%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,012,036 samples, 0.40%)</title><rect x="80.2605%" y="485" width="0.4008%" height="15" fill="rgb(208,67,9)" fg:x="803410209" fg:w="4012036"/><text x="80.5105%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,012,036 samples, 0.40%)</title><rect x="80.2605%" y="469" width="0.4008%" height="15" fill="rgb(219,133,21)" fg:x="803410209" fg:w="4012036"/><text x="80.5105%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="80.5611%" y="453" width="0.1002%" height="15" fill="rgb(246,46,29)" fg:x="806419236" fg:w="1003009"/><text x="80.8111%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="81.2625%" y="469" width="0.1002%" height="15" fill="rgb(246,185,52)" fg:x="813440299" fg:w="1003009"/><text x="81.5125%" y="479.50"></text></g><g><title>core::intrinsics::copy (15,045,135 samples, 1.50%)</title><rect x="81.5631%" y="437" width="1.5030%" height="15" fill="rgb(252,136,11)" fg:x="816449326" fg:w="15045135"/><text x="81.8131%" y="447.50"></text></g><g><title>[libc.so.6] (12,036,108 samples, 1.20%)</title><rect x="81.8637%" y="421" width="1.2024%" height="15" fill="rgb(219,138,53)" fg:x="819458353" fg:w="12036108"/><text x="82.1137%" y="431.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::sort_with_partialord (201,604,809 samples, 20.14%)</title><rect x="63.2265%" y="501" width="20.1403%" height="15" fill="rgb(211,51,23)" fg:x="632898679" fg:w="201604809"/><text x="63.4765%" y="511.50">aoc_2024_megaproject::problems::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::rotate_right (27,081,243 samples, 2.71%)</title><rect x="80.6613%" y="485" width="2.7054%" height="15" fill="rgb(247,221,28)" fg:x="807422245" fg:w="27081243"/><text x="80.9113%" y="495.50">co..</text></g><g><title>core::slice::rotate::ptr_rotate (20,060,180 samples, 2.00%)</title><rect x="81.3627%" y="469" width="2.0040%" height="15" fill="rgb(251,222,45)" fg:x="814443308" fg:w="20060180"/><text x="81.6127%" y="479.50">c..</text></g><g><title>core::slice::rotate::ptr_rotate_memmove (20,060,180 samples, 2.00%)</title><rect x="81.3627%" y="453" width="2.0040%" height="15" fill="rgb(217,162,53)" fg:x="814443308" fg:w="20060180"/><text x="81.6127%" y="463.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="83.0661%" y="437" width="0.3006%" height="15" fill="rgb(229,93,14)" fg:x="831494461" fg:w="3009027"/><text x="83.3161%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (11,033,099 samples, 1.10%)</title><rect x="85.0701%" y="389" width="1.1022%" height="15" fill="rgb(209,67,49)" fg:x="851554641" fg:w="11033099"/><text x="85.3201%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (11,033,099 samples, 1.10%)</title><rect x="85.0701%" y="373" width="1.1022%" height="15" fill="rgb(213,87,29)" fg:x="851554641" fg:w="11033099"/><text x="85.3201%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (11,033,099 samples, 1.10%)</title><rect x="85.0701%" y="357" width="1.1022%" height="15" fill="rgb(205,151,52)" fg:x="851554641" fg:w="11033099"/><text x="85.3201%" y="367.50"></text></g><g><title>[libc.so.6] (8,024,072 samples, 0.80%)</title><rect x="85.3707%" y="341" width="0.8016%" height="15" fill="rgb(253,215,39)" fg:x="854563668" fg:w="8024072"/><text x="85.6207%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="86.1723%" y="389" width="0.2004%" height="15" fill="rgb(221,220,41)" fg:x="862587740" fg:w="2006018"/><text x="86.4223%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="86.1723%" y="373" width="0.2004%" height="15" fill="rgb(218,133,21)" fg:x="862587740" fg:w="2006018"/><text x="86.4223%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2,006,018 samples, 0.20%)</title><rect x="86.1723%" y="357" width="0.2004%" height="15" fill="rgb(221,193,43)" fg:x="862587740" fg:w="2006018"/><text x="86.4223%" y="367.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="87.3747%" y="341" width="0.1002%" height="15" fill="rgb(240,128,52)" fg:x="874623848" fg:w="1003009"/><text x="87.6247%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (47,141,423 samples, 4.71%)</title><rect x="83.3667%" y="501" width="4.7094%" height="15" fill="rgb(253,114,12)" fg:x="834503488" fg:w="47141423"/><text x="83.6167%" y="511.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (47,141,423 samples, 4.71%)</title><rect x="83.3667%" y="485" width="4.7094%" height="15" fill="rgb(215,223,47)" fg:x="834503488" fg:w="47141423"/><text x="83.6167%" y="495.50">core:..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (47,141,423 samples, 4.71%)</title><rect x="83.3667%" y="469" width="4.7094%" height="15" fill="rgb(248,225,23)" fg:x="834503488" fg:w="47141423"/><text x="83.6167%" y="479.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47,141,423 samples, 4.71%)</title><rect x="83.3667%" y="453" width="4.7094%" height="15" fill="rgb(250,108,0)" fg:x="834503488" fg:w="47141423"/><text x="83.6167%" y="463.50">&lt;core..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (47,141,423 samples, 4.71%)</title><rect x="83.3667%" y="437" width="4.7094%" height="15" fill="rgb(228,208,7)" fg:x="834503488" fg:w="47141423"/><text x="83.6167%" y="447.50">&lt;core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (47,141,423 samples, 4.71%)</title><rect x="83.3667%" y="421" width="4.7094%" height="15" fill="rgb(244,45,10)" fg:x="834503488" fg:w="47141423"/><text x="83.6167%" y="431.50">core:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (36,108,324 samples, 3.61%)</title><rect x="84.4689%" y="405" width="3.6072%" height="15" fill="rgb(207,125,25)" fg:x="845536587" fg:w="36108324"/><text x="84.7189%" y="415.50">&lt;cor..</text></g><g><title>core::slice::memchr::memchr (17,051,153 samples, 1.70%)</title><rect x="86.3727%" y="389" width="1.7034%" height="15" fill="rgb(210,195,18)" fg:x="864593758" fg:w="17051153"/><text x="86.6227%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (13,039,117 samples, 1.30%)</title><rect x="86.7735%" y="373" width="1.3026%" height="15" fill="rgb(249,80,12)" fg:x="868605794" fg:w="13039117"/><text x="87.0235%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (10,030,090 samples, 1.00%)</title><rect x="87.0741%" y="357" width="1.0020%" height="15" fill="rgb(221,65,9)" fg:x="871614821" fg:w="10030090"/><text x="87.3241%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (6,018,054 samples, 0.60%)</title><rect x="87.4749%" y="341" width="0.6012%" height="15" fill="rgb(235,49,36)" fg:x="875626857" fg:w="6018054"/><text x="87.7249%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1,003,009 samples, 0.10%)</title><rect x="88.0762%" y="501" width="0.1002%" height="15" fill="rgb(225,32,20)" fg:x="881644911" fg:w="1003009"/><text x="88.3262%" y="511.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (1,003,009 samples, 0.10%)</title><rect x="88.0762%" y="485" width="0.1002%" height="15" fill="rgb(215,141,46)" fg:x="881644911" fg:w="1003009"/><text x="88.3262%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,018,054 samples, 0.60%)</title><rect x="93.3868%" y="437" width="0.6012%" height="15" fill="rgb(250,160,47)" fg:x="934804388" fg:w="6018054"/><text x="93.6368%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,018,054 samples, 0.60%)</title><rect x="93.3868%" y="421" width="0.6012%" height="15" fill="rgb(216,222,40)" fg:x="934804388" fg:w="6018054"/><text x="93.6368%" y="431.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="93.6874%" y="405" width="0.3006%" height="15" fill="rgb(234,217,39)" fg:x="937813415" fg:w="3009027"/><text x="93.9374%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.10%)</title><rect x="93.9880%" y="437" width="0.1002%" height="15" fill="rgb(207,178,40)" fg:x="940822442" fg:w="1003009"/><text x="94.2380%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="93.9880%" y="421" width="0.1002%" height="15" fill="rgb(221,136,13)" fg:x="940822442" fg:w="1003009"/><text x="94.2380%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="93.9880%" y="405" width="0.1002%" height="15" fill="rgb(249,199,10)" fg:x="940822442" fg:w="1003009"/><text x="94.2380%" y="415.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (4,012,036 samples, 0.40%)</title><rect x="94.0882%" y="437" width="0.4008%" height="15" fill="rgb(249,222,13)" fg:x="941825451" fg:w="4012036"/><text x="94.3382%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,012,036 samples, 0.40%)</title><rect x="94.0882%" y="421" width="0.4008%" height="15" fill="rgb(244,185,38)" fg:x="941825451" fg:w="4012036"/><text x="94.3382%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (65,195,585 samples, 6.51%)</title><rect x="88.1764%" y="501" width="6.5130%" height="15" fill="rgb(236,202,9)" fg:x="882647920" fg:w="65195585"/><text x="88.4264%" y="511.50">core::str..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (36,108,324 samples, 3.61%)</title><rect x="91.0822%" y="485" width="3.6072%" height="15" fill="rgb(250,229,37)" fg:x="911735181" fg:w="36108324"/><text x="91.3322%" y="495.50">&lt;&amp;st..</text></g><g><title>core::str::pattern::StrSearcher::new (31,093,279 samples, 3.11%)</title><rect x="91.5832%" y="469" width="3.1062%" height="15" fill="rgb(206,174,23)" fg:x="916750226" fg:w="31093279"/><text x="91.8332%" y="479.50">cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (19,057,171 samples, 1.90%)</title><rect x="92.7856%" y="453" width="1.9038%" height="15" fill="rgb(211,33,43)" fg:x="928786334" fg:w="19057171"/><text x="93.0356%" y="463.50">c..</text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (2,006,018 samples, 0.20%)</title><rect x="94.4890%" y="437" width="0.2004%" height="15" fill="rgb(245,58,50)" fg:x="945837487" fg:w="2006018"/><text x="94.7390%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,003,009 samples, 0.10%)</title><rect x="95.0902%" y="437" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="951855541" fg:w="1003009"/><text x="95.3402%" y="447.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="95.2906%" y="421" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="953861559" fg:w="1003009"/><text x="95.5406%" y="431.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,003,009 samples, 0.10%)</title><rect x="95.2906%" y="405" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="953861559" fg:w="1003009"/><text x="95.5406%" y="415.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,003,009 samples, 0.10%)</title><rect x="95.3908%" y="421" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="954864568" fg:w="1003009"/><text x="95.6408%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 0.10%)</title><rect x="95.3908%" y="405" width="0.1002%" height="15" fill="rgb(212,155,44)" fg:x="954864568" fg:w="1003009"/><text x="95.6408%" y="415.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,012,036 samples, 0.40%)</title><rect x="95.4910%" y="421" width="0.4008%" height="15" fill="rgb(226,2,50)" fg:x="955867577" fg:w="4012036"/><text x="95.7410%" y="431.50"></text></g><g><title>core::intrinsics::unlikely (2,006,018 samples, 0.20%)</title><rect x="95.8918%" y="405" width="0.2004%" height="15" fill="rgb(234,177,6)" fg:x="959879613" fg:w="2006018"/><text x="96.1418%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (14,042,126 samples, 1.40%)</title><rect x="95.0902%" y="469" width="1.4028%" height="15" fill="rgb(217,24,9)" fg:x="951855541" fg:w="14042126"/><text x="95.3402%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (14,042,126 samples, 1.40%)</title><rect x="95.0902%" y="453" width="1.4028%" height="15" fill="rgb(220,13,46)" fg:x="951855541" fg:w="14042126"/><text x="95.3402%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (13,039,117 samples, 1.30%)</title><rect x="95.1904%" y="437" width="1.3026%" height="15" fill="rgb(239,221,27)" fg:x="952858550" fg:w="13039117"/><text x="95.4404%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (6,018,054 samples, 0.60%)</title><rect x="95.8918%" y="421" width="0.6012%" height="15" fill="rgb(222,198,25)" fg:x="959879613" fg:w="6018054"/><text x="96.1418%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4,012,036 samples, 0.40%)</title><rect x="96.0922%" y="405" width="0.4008%" height="15" fill="rgb(211,99,13)" fg:x="961885631" fg:w="4012036"/><text x="96.3422%" y="415.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (4,012,036 samples, 0.40%)</title><rect x="96.0922%" y="389" width="0.4008%" height="15" fill="rgb(232,111,31)" fg:x="961885631" fg:w="4012036"/><text x="96.3422%" y="399.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="96.4930%" y="421" width="0.2004%" height="15" fill="rgb(245,82,37)" fg:x="965897667" fg:w="2006018"/><text x="96.7430%" y="431.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="96.4930%" y="405" width="0.2004%" height="15" fill="rgb(227,149,46)" fg:x="965897667" fg:w="2006018"/><text x="96.7430%" y="415.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.70%)</title><rect x="96.4930%" y="437" width="0.7014%" height="15" fill="rgb(218,36,50)" fg:x="965897667" fg:w="7021063"/><text x="96.7430%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.50%)</title><rect x="96.6934%" y="421" width="0.5010%" height="15" fill="rgb(226,80,48)" fg:x="967903685" fg:w="5015045"/><text x="96.9434%" y="431.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.10%)</title><rect x="97.9960%" y="389" width="0.1002%" height="15" fill="rgb(238,224,15)" fg:x="980942802" fg:w="1003009"/><text x="98.2460%" y="399.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,003,009 samples, 0.10%)</title><rect x="97.9960%" y="373" width="0.1002%" height="15" fill="rgb(241,136,10)" fg:x="980942802" fg:w="1003009"/><text x="98.2460%" y="383.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,003,009 samples, 0.10%)</title><rect x="97.9960%" y="357" width="0.1002%" height="15" fill="rgb(208,32,45)" fg:x="980942802" fg:w="1003009"/><text x="98.2460%" y="367.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,003,009 samples, 0.10%)</title><rect x="97.9960%" y="341" width="0.1002%" height="15" fill="rgb(207,135,9)" fg:x="980942802" fg:w="1003009"/><text x="98.2460%" y="351.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="98.0962%" y="341" width="0.5010%" height="15" fill="rgb(206,86,44)" fg:x="981945811" fg:w="5015045"/><text x="98.3462%" y="351.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3,009,027 samples, 0.30%)</title><rect x="98.2966%" y="325" width="0.3006%" height="15" fill="rgb(245,177,15)" fg:x="983951829" fg:w="3009027"/><text x="98.5466%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (22,066,198 samples, 2.20%)</title><rect x="96.4930%" y="469" width="2.2044%" height="15" fill="rgb(206,64,50)" fg:x="965897667" fg:w="22066198"/><text x="96.7430%" y="479.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (22,066,198 samples, 2.20%)</title><rect x="96.4930%" y="453" width="2.2044%" height="15" fill="rgb(234,36,40)" fg:x="965897667" fg:w="22066198"/><text x="96.7430%" y="463.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15,045,135 samples, 1.50%)</title><rect x="97.1944%" y="437" width="1.5030%" height="15" fill="rgb(213,64,8)" fg:x="972918730" fg:w="15045135"/><text x="97.4444%" y="447.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (15,045,135 samples, 1.50%)</title><rect x="97.1944%" y="421" width="1.5030%" height="15" fill="rgb(210,75,36)" fg:x="972918730" fg:w="15045135"/><text x="97.4444%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (15,045,135 samples, 1.50%)</title><rect x="97.1944%" y="405" width="1.5030%" height="15" fill="rgb(229,88,21)" fg:x="972918730" fg:w="15045135"/><text x="97.4444%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (6,018,054 samples, 0.60%)</title><rect x="98.0962%" y="389" width="0.6012%" height="15" fill="rgb(252,204,47)" fg:x="981945811" fg:w="6018054"/><text x="98.3462%" y="399.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (6,018,054 samples, 0.60%)</title><rect x="98.0962%" y="373" width="0.6012%" height="15" fill="rgb(208,77,27)" fg:x="981945811" fg:w="6018054"/><text x="98.3462%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (6,018,054 samples, 0.60%)</title><rect x="98.0962%" y="357" width="0.6012%" height="15" fill="rgb(221,76,26)" fg:x="981945811" fg:w="6018054"/><text x="98.3462%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="98.5972%" y="341" width="0.1002%" height="15" fill="rgb(225,139,18)" fg:x="986960856" fg:w="1003009"/><text x="98.8472%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7,021,063 samples, 0.70%)</title><rect x="98.6974%" y="453" width="0.7014%" height="15" fill="rgb(230,137,11)" fg:x="987963865" fg:w="7021063"/><text x="98.9474%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7,021,063 samples, 0.70%)</title><rect x="98.6974%" y="437" width="0.7014%" height="15" fill="rgb(212,28,1)" fg:x="987963865" fg:w="7021063"/><text x="98.9474%" y="447.50"></text></g><g><title>core::ptr::write (7,021,063 samples, 0.70%)</title><rect x="98.6974%" y="421" width="0.7014%" height="15" fill="rgb(248,164,17)" fg:x="987963865" fg:w="7021063"/><text x="98.9474%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (50,150,450 samples, 5.01%)</title><rect x="94.6894%" y="501" width="5.0100%" height="15" fill="rgb(222,171,42)" fg:x="947843505" fg:w="50150450"/><text x="94.9394%" y="511.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50,150,450 samples, 5.01%)</title><rect x="94.6894%" y="485" width="5.0100%" height="15" fill="rgb(243,84,45)" fg:x="947843505" fg:w="50150450"/><text x="94.9394%" y="495.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (10,030,090 samples, 1.00%)</title><rect x="98.6974%" y="469" width="1.0020%" height="15" fill="rgb(252,49,23)" fg:x="987963865" fg:w="10030090"/><text x="98.9474%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3,009,027 samples, 0.30%)</title><rect x="99.3988%" y="453" width="0.3006%" height="15" fill="rgb(215,19,7)" fg:x="994984928" fg:w="3009027"/><text x="99.6488%" y="463.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (998,996,964 samples, 99.80%)</title><rect x="0.0000%" y="549" width="99.7996%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="998996964"/><text x="0.2500%" y="559.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2 (998,996,964 samples, 99.80%)</title><rect x="0.0000%" y="533" width="99.7996%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="998996964"/><text x="0.2500%" y="543.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day5::part2 (998,996,964 samples, 99.80%)</title><rect x="0.0000%" y="517" width="99.7996%" height="15" fill="rgb(244,192,49)" fg:x="0" fg:w="998996964"/><text x="0.2500%" y="527.50">aoc_2024_megaproject::problems::day5::part2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="501" width="0.1002%" height="15" fill="rgb(226,211,11)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="485" width="0.1002%" height="15" fill="rgb(236,162,54)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="549" width="0.1002%" height="15" fill="rgb(220,229,9)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="533" width="0.1002%" height="15" fill="rgb(250,87,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="517" width="0.1002%" height="15" fill="rgb(239,43,17)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="527.50"></text></g><g><title>aoc_2024_megaproject::repeat_part::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="501" width="0.1002%" height="15" fill="rgb(231,177,25)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="485" width="0.1002%" height="15" fill="rgb(219,179,1)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="469" width="0.1002%" height="15" fill="rgb(238,219,53)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="453" width="0.1002%" height="15" fill="rgb(232,167,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="437" width="0.1002%" height="15" fill="rgb(244,19,51)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="421" width="0.1002%" height="15" fill="rgb(224,6,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="405" width="0.1002%" height="15" fill="rgb(224,145,5)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="389" width="0.1002%" height="15" fill="rgb(234,130,49)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="399.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="373" width="0.1002%" height="15" fill="rgb(254,6,2)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="383.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="357" width="0.1002%" height="15" fill="rgb(208,96,46)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(239,3,39)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>cfree (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="325" width="0.1002%" height="15" fill="rgb(233,210,1)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="335.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="879.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="863.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="847.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="815.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="623.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="591.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="575.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="549" width="0.1002%" height="15" fill="rgb(244,64,35)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="559.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="533" width="0.1002%" height="15" fill="rgb(216,46,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="543.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="517" width="0.1002%" height="15" fill="rgb(250,74,19)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="501" width="0.1002%" height="15" fill="rgb(249,42,33)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="485" width="0.1002%" height="15" fill="rgb(242,149,17)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="469" width="0.1002%" height="15" fill="rgb(244,29,21)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="479.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="453" width="0.1002%" height="15" fill="rgb(220,130,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="437" width="0.1002%" height="15" fill="rgb(211,67,2)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="421" width="0.1002%" height="15" fill="rgb(235,68,52)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="405" width="0.1002%" height="15" fill="rgb(246,142,3)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="389" width="0.1002%" height="15" fill="rgb(241,25,7)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="373" width="0.1002%" height="15" fill="rgb(242,119,39)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="357" width="0.1002%" height="15" fill="rgb(241,98,45)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="341" width="0.1002%" height="15" fill="rgb(254,28,30)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="325" width="0.1002%" height="15" fill="rgb(241,142,54)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="309" width="0.1002%" height="15" fill="rgb(222,85,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="293" width="0.1002%" height="15" fill="rgb(210,85,47)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="277" width="0.1002%" height="15" fill="rgb(224,206,25)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="261" width="0.1002%" height="15" fill="rgb(243,201,19)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="245" width="0.1002%" height="15" fill="rgb(236,59,4)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="229" width="0.1002%" height="15" fill="rgb(254,179,45)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(226,14,10)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="197" width="0.1002%" height="15" fill="rgb(244,27,41)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="181" width="0.1002%" height="15" fill="rgb(235,35,32)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="165" width="0.1002%" height="15" fill="rgb(218,68,31)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="149" width="0.1002%" height="15" fill="rgb(207,120,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="133" width="0.1002%" height="15" fill="rgb(227,98,0)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="117" width="0.1002%" height="15" fill="rgb(207,7,3)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="101" width="0.1002%" height="15" fill="rgb(206,98,19)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="111.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="85" width="0.1002%" height="15" fill="rgb(217,5,26)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="95.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="69" width="0.1002%" height="15" fill="rgb(235,190,38)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="53" width="0.1002%" height="15" fill="rgb(247,86,24)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="63.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="37" width="0.1002%" height="15" fill="rgb(205,101,16)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="47.50"></text></g></svg></svg>