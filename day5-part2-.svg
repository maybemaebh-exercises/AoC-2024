<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="7.4148%" y="197" width="0.3006%" height="15" fill="rgb(227,0,7)" fg:x="74222666" fg:w="3009027"/><text x="7.6648%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (3,009,027 samples, 0.30%)</title><rect x="7.4148%" y="181" width="0.3006%" height="15" fill="rgb(217,0,24)" fg:x="74222666" fg:w="3009027"/><text x="7.6648%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3,009,027 samples, 0.30%)</title><rect x="7.4148%" y="165" width="0.3006%" height="15" fill="rgb(221,193,54)" fg:x="74222666" fg:w="3009027"/><text x="7.6648%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="7.5150%" y="149" width="0.2004%" height="15" fill="rgb(248,212,6)" fg:x="75225675" fg:w="2006018"/><text x="7.7650%" y="159.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (5,015,045 samples, 0.50%)</title><rect x="7.7154%" y="197" width="0.5010%" height="15" fill="rgb(208,68,35)" fg:x="77231693" fg:w="5015045"/><text x="7.9654%" y="207.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (58,174,522 samples, 5.81%)</title><rect x="2.6052%" y="229" width="5.8116%" height="15" fill="rgb(232,128,0)" fg:x="26078234" fg:w="58174522"/><text x="2.8552%" y="239.50">&lt;core::..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (51,153,459 samples, 5.11%)</title><rect x="3.3066%" y="213" width="5.1102%" height="15" fill="rgb(207,160,47)" fg:x="33099297" fg:w="51153459"/><text x="3.5566%" y="223.50">core::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="8.2164%" y="197" width="0.2004%" height="15" fill="rgb(228,23,34)" fg:x="82246738" fg:w="2006018"/><text x="8.4664%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="8.2164%" y="181" width="0.2004%" height="15" fill="rgb(218,30,26)" fg:x="82246738" fg:w="2006018"/><text x="8.4664%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="8.2164%" y="165" width="0.2004%" height="15" fill="rgb(220,122,19)" fg:x="82246738" fg:w="2006018"/><text x="8.4664%" y="175.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (70,210,630 samples, 7.01%)</title><rect x="1.5030%" y="261" width="7.0140%" height="15" fill="rgb(250,228,42)" fg:x="15045135" fg:w="70210630"/><text x="1.7530%" y="271.50">&lt;core::st..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (69,207,621 samples, 6.91%)</title><rect x="1.6032%" y="245" width="6.9138%" height="15" fill="rgb(240,193,28)" fg:x="16048144" fg:w="69207621"/><text x="1.8532%" y="255.50">core::str..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="8.4168%" y="229" width="0.1002%" height="15" fill="rgb(216,20,37)" fg:x="84252756" fg:w="1003009"/><text x="8.6668%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="8.4168%" y="213" width="0.1002%" height="15" fill="rgb(206,188,39)" fg:x="84252756" fg:w="1003009"/><text x="8.6668%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88,264,792 samples, 8.82%)</title><rect x="1.5030%" y="277" width="8.8176%" height="15" fill="rgb(217,207,13)" fg:x="15045135" fg:w="88264792"/><text x="1.7530%" y="287.50">&lt;core::iter:..</text></g><g><title>core::option::Option&lt;T&gt;::map (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="261" width="1.8036%" height="15" fill="rgb(231,73,38)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="271.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="245" width="1.8036%" height="15" fill="rgb(225,20,46)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="255.50">c..</text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="229" width="1.8036%" height="15" fill="rgb(210,31,41)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="239.50">a..</text></g><g><title>core::str::&lt;impl str&gt;::parse (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="213" width="1.8036%" height="15" fill="rgb(221,200,47)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="223.50">c..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="197" width="1.8036%" height="15" fill="rgb(226,26,5)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="207.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="181" width="1.8036%" height="15" fill="rgb(249,33,26)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="191.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (18,054,162 samples, 1.80%)</title><rect x="8.5170%" y="165" width="1.8036%" height="15" fill="rgb(235,183,28)" fg:x="85255765" fg:w="18054162"/><text x="8.7670%" y="175.50">c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (4,012,036 samples, 0.40%)</title><rect x="9.9198%" y="149" width="0.4008%" height="15" fill="rgb(221,5,38)" fg:x="99297891" fg:w="4012036"/><text x="10.1698%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (4,012,036 samples, 0.40%)</title><rect x="9.9198%" y="133" width="0.4008%" height="15" fill="rgb(247,18,42)" fg:x="99297891" fg:w="4012036"/><text x="10.1698%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (98,294,882 samples, 9.82%)</title><rect x="1.0020%" y="325" width="9.8196%" height="15" fill="rgb(241,131,45)" fg:x="10030090" fg:w="98294882"/><text x="1.2520%" y="335.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (98,294,882 samples, 9.82%)</title><rect x="1.0020%" y="309" width="9.8196%" height="15" fill="rgb(249,31,29)" fg:x="10030090" fg:w="98294882"/><text x="1.2520%" y="319.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (98,294,882 samples, 9.82%)</title><rect x="1.0020%" y="293" width="9.8196%" height="15" fill="rgb(225,111,53)" fg:x="10030090" fg:w="98294882"/><text x="1.2520%" y="303.50">alloc::vec::Ve..</text></g><g><title>core::ptr::write (5,015,045 samples, 0.50%)</title><rect x="10.3206%" y="277" width="0.5010%" height="15" fill="rgb(238,160,17)" fg:x="103309927" fg:w="5015045"/><text x="10.5706%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="15.3307%" y="245" width="0.3006%" height="15" fill="rgb(214,148,48)" fg:x="153460377" fg:w="3009027"/><text x="15.5807%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (3,009,027 samples, 0.30%)</title><rect x="15.3307%" y="229" width="0.3006%" height="15" fill="rgb(232,36,49)" fg:x="153460377" fg:w="3009027"/><text x="15.5807%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3,009,027 samples, 0.30%)</title><rect x="15.3307%" y="213" width="0.3006%" height="15" fill="rgb(209,103,24)" fg:x="153460377" fg:w="3009027"/><text x="15.5807%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="15.3307%" y="197" width="0.3006%" height="15" fill="rgb(229,88,8)" fg:x="153460377" fg:w="3009027"/><text x="15.5807%" y="207.50"></text></g><g><title>&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (1,003,009 samples, 0.10%)</title><rect x="15.6313%" y="245" width="0.1002%" height="15" fill="rgb(213,181,19)" fg:x="156469404" fg:w="1003009"/><text x="15.8813%" y="255.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (34,102,306 samples, 3.41%)</title><rect x="12.4248%" y="277" width="3.4068%" height="15" fill="rgb(254,191,54)" fg:x="124373116" fg:w="34102306"/><text x="12.6748%" y="287.50">&lt;co..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (26,078,234 samples, 2.61%)</title><rect x="13.2265%" y="261" width="2.6052%" height="15" fill="rgb(241,83,37)" fg:x="132397188" fg:w="26078234"/><text x="13.4765%" y="271.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="15.7315%" y="245" width="0.1002%" height="15" fill="rgb(233,36,39)" fg:x="157472413" fg:w="1003009"/><text x="15.9815%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="15.7315%" y="229" width="0.1002%" height="15" fill="rgb(226,3,54)" fg:x="157472413" fg:w="1003009"/><text x="15.9815%" y="239.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (50,150,450 samples, 5.01%)</title><rect x="10.9218%" y="309" width="5.0100%" height="15" fill="rgb(245,192,40)" fg:x="109327981" fg:w="50150450"/><text x="11.1718%" y="319.50">&lt;core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (50,150,450 samples, 5.01%)</title><rect x="10.9218%" y="293" width="5.0100%" height="15" fill="rgb(238,167,29)" fg:x="109327981" fg:w="50150450"/><text x="11.1718%" y="303.50">core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="15.8317%" y="277" width="0.1002%" height="15" fill="rgb(232,182,51)" fg:x="158475422" fg:w="1003009"/><text x="16.0817%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59,177,531 samples, 5.91%)</title><rect x="10.8216%" y="325" width="5.9118%" height="15" fill="rgb(231,60,39)" fg:x="108324972" fg:w="59177531"/><text x="11.0716%" y="335.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (8,024,072 samples, 0.80%)</title><rect x="15.9319%" y="309" width="0.8016%" height="15" fill="rgb(208,69,12)" fg:x="159478431" fg:w="8024072"/><text x="16.1819%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,021,063 samples, 0.70%)</title><rect x="16.0321%" y="293" width="0.7014%" height="15" fill="rgb(235,93,37)" fg:x="160481440" fg:w="7021063"/><text x="16.2821%" y="303.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="16.0321%" y="277" width="0.7014%" height="15" fill="rgb(213,116,39)" fg:x="160481440" fg:w="7021063"/><text x="16.2821%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (7,021,063 samples, 0.70%)</title><rect x="16.0321%" y="261" width="0.7014%" height="15" fill="rgb(222,207,29)" fg:x="160481440" fg:w="7021063"/><text x="16.2821%" y="271.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (7,021,063 samples, 0.70%)</title><rect x="16.0321%" y="245" width="0.7014%" height="15" fill="rgb(206,96,30)" fg:x="160481440" fg:w="7021063"/><text x="16.2821%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (7,021,063 samples, 0.70%)</title><rect x="16.0321%" y="229" width="0.7014%" height="15" fill="rgb(218,138,4)" fg:x="160481440" fg:w="7021063"/><text x="16.2821%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (7,021,063 samples, 0.70%)</title><rect x="16.0321%" y="213" width="0.7014%" height="15" fill="rgb(250,191,14)" fg:x="160481440" fg:w="7021063"/><text x="16.2821%" y="223.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2,006,018 samples, 0.20%)</title><rect x="16.5331%" y="197" width="0.2004%" height="15" fill="rgb(239,60,40)" fg:x="165496485" fg:w="2006018"/><text x="16.7831%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="16.6333%" y="181" width="0.1002%" height="15" fill="rgb(206,27,48)" fg:x="166499494" fg:w="1003009"/><text x="16.8833%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="17.2345%" y="245" width="0.8016%" height="15" fill="rgb(225,35,8)" fg:x="172517548" fg:w="8024072"/><text x="17.4845%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="17.2345%" y="229" width="0.8016%" height="15" fill="rgb(250,213,24)" fg:x="172517548" fg:w="8024072"/><text x="17.4845%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,024,072 samples, 0.80%)</title><rect x="17.2345%" y="213" width="0.8016%" height="15" fill="rgb(247,123,22)" fg:x="172517548" fg:w="8024072"/><text x="17.4845%" y="223.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="17.4349%" y="197" width="0.6012%" height="15" fill="rgb(231,138,38)" fg:x="174523566" fg:w="6018054"/><text x="17.6849%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4,012,036 samples, 0.40%)</title><rect x="18.0361%" y="245" width="0.4008%" height="15" fill="rgb(231,145,46)" fg:x="180541620" fg:w="4012036"/><text x="18.2861%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4,012,036 samples, 0.40%)</title><rect x="18.0361%" y="229" width="0.4008%" height="15" fill="rgb(251,118,11)" fg:x="180541620" fg:w="4012036"/><text x="18.2861%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (4,012,036 samples, 0.40%)</title><rect x="18.0361%" y="213" width="0.4008%" height="15" fill="rgb(217,147,25)" fg:x="180541620" fg:w="4012036"/><text x="18.2861%" y="223.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (2,006,018 samples, 0.20%)</title><rect x="19.5391%" y="197" width="0.2004%" height="15" fill="rgb(247,81,37)" fg:x="195586755" fg:w="2006018"/><text x="19.7891%" y="207.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,105,315 samples, 3.51%)</title><rect x="16.7335%" y="293" width="3.5070%" height="15" fill="rgb(209,12,38)" fg:x="167502503" fg:w="35105315"/><text x="16.9835%" y="303.50">&lt;co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (35,105,315 samples, 3.51%)</title><rect x="16.7335%" y="277" width="3.5070%" height="15" fill="rgb(227,1,9)" fg:x="167502503" fg:w="35105315"/><text x="16.9835%" y="287.50">cor..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (32,096,288 samples, 3.21%)</title><rect x="17.0341%" y="261" width="3.2064%" height="15" fill="rgb(248,47,43)" fg:x="170511530" fg:w="32096288"/><text x="17.2841%" y="271.50">&lt;co..</text></g><g><title>core::slice::memchr::memchr (18,054,162 samples, 1.80%)</title><rect x="18.4369%" y="245" width="1.8036%" height="15" fill="rgb(221,10,30)" fg:x="184553656" fg:w="18054162"/><text x="18.6869%" y="255.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (17,051,153 samples, 1.70%)</title><rect x="18.5371%" y="229" width="1.7034%" height="15" fill="rgb(210,229,1)" fg:x="185556665" fg:w="17051153"/><text x="18.7871%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (12,036,108 samples, 1.20%)</title><rect x="19.0381%" y="213" width="1.2024%" height="15" fill="rgb(222,148,37)" fg:x="190571710" fg:w="12036108"/><text x="19.2881%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_naive (5,015,045 samples, 0.50%)</title><rect x="19.7395%" y="197" width="0.5010%" height="15" fill="rgb(234,67,33)" fg:x="197592773" fg:w="5015045"/><text x="19.9895%" y="207.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (37,111,333 samples, 3.71%)</title><rect x="16.7335%" y="325" width="3.7074%" height="15" fill="rgb(247,98,35)" fg:x="167502503" fg:w="37111333"/><text x="16.9835%" y="335.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,111,333 samples, 3.71%)</title><rect x="16.7335%" y="309" width="3.7074%" height="15" fill="rgb(247,138,52)" fg:x="167502503" fg:w="37111333"/><text x="16.9835%" y="319.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="293" width="0.2004%" height="15" fill="rgb(213,79,30)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="277" width="0.2004%" height="15" fill="rgb(246,177,23)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="287.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="261" width="0.2004%" height="15" fill="rgb(230,62,27)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="271.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="245" width="0.2004%" height="15" fill="rgb(216,154,8)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="229" width="0.2004%" height="15" fill="rgb(244,35,45)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="239.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="213" width="0.2004%" height="15" fill="rgb(251,115,12)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="223.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="197" width="0.2004%" height="15" fill="rgb(240,54,50)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="207.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="181" width="0.2004%" height="15" fill="rgb(233,84,52)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (2,006,018 samples, 0.20%)</title><rect x="20.2405%" y="165" width="0.2004%" height="15" fill="rgb(207,117,47)" fg:x="202607818" fg:w="2006018"/><text x="20.4905%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="23.5471%" y="309" width="0.2004%" height="15" fill="rgb(249,43,39)" fg:x="235707115" fg:w="2006018"/><text x="23.7971%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="23.5471%" y="293" width="0.2004%" height="15" fill="rgb(209,38,44)" fg:x="235707115" fg:w="2006018"/><text x="23.7971%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="23.5471%" y="277" width="0.2004%" height="15" fill="rgb(236,212,23)" fg:x="235707115" fg:w="2006018"/><text x="23.7971%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (13,039,117 samples, 1.30%)</title><rect x="25.0501%" y="149" width="1.3026%" height="15" fill="rgb(242,79,21)" fg:x="250752250" fg:w="13039117"/><text x="25.3001%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (15,045,135 samples, 1.50%)</title><rect x="25.0501%" y="165" width="1.5030%" height="15" fill="rgb(211,96,35)" fg:x="250752250" fg:w="15045135"/><text x="25.3001%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.20%)</title><rect x="26.3527%" y="149" width="0.2004%" height="15" fill="rgb(253,215,40)" fg:x="263791367" fg:w="2006018"/><text x="26.6027%" y="159.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,006,018 samples, 0.20%)</title><rect x="26.5531%" y="165" width="0.2004%" height="15" fill="rgb(211,81,21)" fg:x="265797385" fg:w="2006018"/><text x="26.8031%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2,006,018 samples, 0.20%)</title><rect x="26.5531%" y="149" width="0.2004%" height="15" fill="rgb(208,190,38)" fg:x="265797385" fg:w="2006018"/><text x="26.8031%" y="159.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6,018,054 samples, 0.60%)</title><rect x="26.7535%" y="117" width="0.6012%" height="15" fill="rgb(235,213,38)" fg:x="267803403" fg:w="6018054"/><text x="27.0035%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (6,018,054 samples, 0.60%)</title><rect x="26.7535%" y="101" width="0.6012%" height="15" fill="rgb(237,122,38)" fg:x="267803403" fg:w="6018054"/><text x="27.0035%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (6,018,054 samples, 0.60%)</title><rect x="26.7535%" y="85" width="0.6012%" height="15" fill="rgb(244,218,35)" fg:x="267803403" fg:w="6018054"/><text x="27.0035%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (6,018,054 samples, 0.60%)</title><rect x="26.7535%" y="69" width="0.6012%" height="15" fill="rgb(240,68,47)" fg:x="267803403" fg:w="6018054"/><text x="27.0035%" y="79.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (11,033,099 samples, 1.10%)</title><rect x="27.3547%" y="85" width="1.1022%" height="15" fill="rgb(210,16,53)" fg:x="273821457" fg:w="11033099"/><text x="27.6047%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="27.5551%" y="69" width="0.9018%" height="15" fill="rgb(235,124,12)" fg:x="275827475" fg:w="9027081"/><text x="27.8051%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (44,132,396 samples, 4.41%)</title><rect x="25.0501%" y="197" width="4.4088%" height="15" fill="rgb(224,169,11)" fg:x="250752250" fg:w="44132396"/><text x="25.3001%" y="207.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (44,132,396 samples, 4.41%)</title><rect x="25.0501%" y="181" width="4.4088%" height="15" fill="rgb(250,166,2)" fg:x="250752250" fg:w="44132396"/><text x="25.3001%" y="191.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27,081,243 samples, 2.71%)</title><rect x="26.7535%" y="165" width="2.7054%" height="15" fill="rgb(242,216,29)" fg:x="267803403" fg:w="27081243"/><text x="27.0035%" y="175.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (27,081,243 samples, 2.71%)</title><rect x="26.7535%" y="149" width="2.7054%" height="15" fill="rgb(230,116,27)" fg:x="267803403" fg:w="27081243"/><text x="27.0035%" y="159.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (27,081,243 samples, 2.71%)</title><rect x="26.7535%" y="133" width="2.7054%" height="15" fill="rgb(228,99,48)" fg:x="267803403" fg:w="27081243"/><text x="27.0035%" y="143.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (21,063,189 samples, 2.10%)</title><rect x="27.3547%" y="117" width="2.1042%" height="15" fill="rgb(253,11,6)" fg:x="273821457" fg:w="21063189"/><text x="27.6047%" y="127.50">c..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (21,063,189 samples, 2.10%)</title><rect x="27.3547%" y="101" width="2.1042%" height="15" fill="rgb(247,143,39)" fg:x="273821457" fg:w="21063189"/><text x="27.6047%" y="111.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (10,030,090 samples, 1.00%)</title><rect x="28.4569%" y="85" width="1.0020%" height="15" fill="rgb(236,97,10)" fg:x="284854556" fg:w="10030090"/><text x="28.7069%" y="95.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9,027,081 samples, 0.90%)</title><rect x="30.6613%" y="149" width="0.9018%" height="15" fill="rgb(233,208,19)" fg:x="306920754" fg:w="9027081"/><text x="30.9113%" y="159.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (9,027,081 samples, 0.90%)</title><rect x="30.6613%" y="133" width="0.9018%" height="15" fill="rgb(216,164,2)" fg:x="306920754" fg:w="9027081"/><text x="30.9113%" y="143.50"></text></g><g><title>core::intrinsics::likely (14,042,126 samples, 1.40%)</title><rect x="31.5631%" y="149" width="1.4028%" height="15" fill="rgb(220,129,5)" fg:x="315947835" fg:w="14042126"/><text x="31.8131%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1,003,009 samples, 0.10%)</title><rect x="32.9659%" y="149" width="0.1002%" height="15" fill="rgb(242,17,10)" fg:x="329989961" fg:w="1003009"/><text x="33.2159%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,003,009 samples, 0.10%)</title><rect x="32.9659%" y="133" width="0.1002%" height="15" fill="rgb(242,107,0)" fg:x="329989961" fg:w="1003009"/><text x="33.2159%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="32.9659%" y="117" width="0.1002%" height="15" fill="rgb(251,28,31)" fg:x="329989961" fg:w="1003009"/><text x="33.2159%" y="127.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,012,036 samples, 0.40%)</title><rect x="33.0661%" y="149" width="0.4008%" height="15" fill="rgb(233,223,10)" fg:x="330992970" fg:w="4012036"/><text x="33.3161%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.40%)</title><rect x="33.0661%" y="133" width="0.4008%" height="15" fill="rgb(215,21,27)" fg:x="330992970" fg:w="4012036"/><text x="33.3161%" y="143.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,006,018 samples, 0.20%)</title><rect x="33.4669%" y="149" width="0.2004%" height="15" fill="rgb(232,23,21)" fg:x="335005006" fg:w="2006018"/><text x="33.7169%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (63,189,567 samples, 6.31%)</title><rect x="33.6673%" y="133" width="6.3126%" height="15" fill="rgb(244,5,23)" fg:x="337011024" fg:w="63189567"/><text x="33.9173%" y="143.50">hashbrow..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (63,189,567 samples, 6.31%)</title><rect x="33.6673%" y="117" width="6.3126%" height="15" fill="rgb(226,81,46)" fg:x="337011024" fg:w="63189567"/><text x="33.9173%" y="127.50">&lt;Q as ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63,189,567 samples, 6.31%)</title><rect x="33.6673%" y="101" width="6.3126%" height="15" fill="rgb(247,70,30)" fg:x="337011024" fg:w="63189567"/><text x="33.9173%" y="111.50">core::cm..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (63,189,567 samples, 6.31%)</title><rect x="33.6673%" y="85" width="6.3126%" height="15" fill="rgb(212,68,19)" fg:x="337011024" fg:w="63189567"/><text x="33.9173%" y="95.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (63,189,567 samples, 6.31%)</title><rect x="33.6673%" y="69" width="6.3126%" height="15" fill="rgb(240,187,13)" fg:x="337011024" fg:w="63189567"/><text x="33.9173%" y="79.50">&lt;T as co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (18,054,162 samples, 1.80%)</title><rect x="39.9800%" y="133" width="1.8036%" height="15" fill="rgb(223,113,26)" fg:x="400200591" fg:w="18054162"/><text x="40.2300%" y="143.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (18,054,162 samples, 1.80%)</title><rect x="39.9800%" y="117" width="1.8036%" height="15" fill="rgb(206,192,2)" fg:x="400200591" fg:w="18054162"/><text x="40.2300%" y="127.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (18,054,162 samples, 1.80%)</title><rect x="39.9800%" y="101" width="1.8036%" height="15" fill="rgb(241,108,4)" fg:x="400200591" fg:w="18054162"/><text x="40.2300%" y="111.50">c..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (85,255,765 samples, 8.52%)</title><rect x="33.6673%" y="149" width="8.5170%" height="15" fill="rgb(247,173,49)" fg:x="337011024" fg:w="85255765"/><text x="33.9173%" y="159.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4,012,036 samples, 0.40%)</title><rect x="41.7836%" y="133" width="0.4008%" height="15" fill="rgb(224,114,35)" fg:x="418254753" fg:w="4012036"/><text x="42.0336%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4,012,036 samples, 0.40%)</title><rect x="41.7836%" y="117" width="0.4008%" height="15" fill="rgb(245,159,27)" fg:x="418254753" fg:w="4012036"/><text x="42.0336%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,012,036 samples, 0.40%)</title><rect x="41.7836%" y="101" width="0.4008%" height="15" fill="rgb(245,172,44)" fg:x="418254753" fg:w="4012036"/><text x="42.0336%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (201,604,809 samples, 20.14%)</title><rect x="23.7475%" y="309" width="20.1403%" height="15" fill="rgb(236,23,11)" fg:x="237713133" fg:w="201604809"/><text x="23.9975%" y="319.50">core::cmp::impls::&lt;impl core::cm..</text></g><g><title>core::cmp::PartialOrd::gt (201,604,809 samples, 20.14%)</title><rect x="23.7475%" y="293" width="20.1403%" height="15" fill="rgb(205,117,38)" fg:x="237713133" fg:w="201604809"/><text x="23.9975%" y="303.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (199,598,791 samples, 19.94%)</title><rect x="23.9479%" y="277" width="19.9399%" height="15" fill="rgb(237,72,25)" fg:x="239719151" fg:w="199598791"/><text x="24.1979%" y="287.50">&lt;aoc_2024_megaproject::problems..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (194,583,746 samples, 19.44%)</title><rect x="24.4489%" y="261" width="19.4389%" height="15" fill="rgb(244,70,9)" fg:x="244734196" fg:w="194583746"/><text x="24.6989%" y="271.50">aoc_2024_megaproject::problems..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (194,583,746 samples, 19.44%)</title><rect x="24.4489%" y="245" width="19.4389%" height="15" fill="rgb(217,125,39)" fg:x="244734196" fg:w="194583746"/><text x="24.6989%" y="255.50">std::collections::hash::map::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (194,583,746 samples, 19.44%)</title><rect x="24.4489%" y="229" width="19.4389%" height="15" fill="rgb(235,36,10)" fg:x="244734196" fg:w="194583746"/><text x="24.6989%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (194,583,746 samples, 19.44%)</title><rect x="24.4489%" y="213" width="19.4389%" height="15" fill="rgb(251,123,47)" fg:x="244734196" fg:w="194583746"/><text x="24.6989%" y="223.50">hashbrown::map::HashMap&lt;K,V,S,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (144,433,296 samples, 14.43%)</title><rect x="29.4589%" y="197" width="14.4289%" height="15" fill="rgb(221,13,13)" fg:x="294884646" fg:w="144433296"/><text x="29.7089%" y="207.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (144,433,296 samples, 14.43%)</title><rect x="29.4589%" y="181" width="14.4289%" height="15" fill="rgb(238,131,9)" fg:x="294884646" fg:w="144433296"/><text x="29.7089%" y="191.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (144,433,296 samples, 14.43%)</title><rect x="29.4589%" y="165" width="14.4289%" height="15" fill="rgb(211,50,8)" fg:x="294884646" fg:w="144433296"/><text x="29.7089%" y="175.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (17,051,153 samples, 1.70%)</title><rect x="42.1844%" y="149" width="1.7034%" height="15" fill="rgb(245,182,24)" fg:x="422266789" fg:w="17051153"/><text x="42.4344%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (11,033,099 samples, 1.10%)</title><rect x="44.9900%" y="149" width="1.1022%" height="15" fill="rgb(242,14,37)" fg:x="450351041" fg:w="11033099"/><text x="45.2400%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="45.9920%" y="133" width="0.1002%" height="15" fill="rgb(246,228,12)" fg:x="460381131" fg:w="1003009"/><text x="46.2420%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (15,045,135 samples, 1.50%)</title><rect x="44.9900%" y="165" width="1.5030%" height="15" fill="rgb(213,55,15)" fg:x="450351041" fg:w="15045135"/><text x="45.2400%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.40%)</title><rect x="46.0922%" y="149" width="0.4008%" height="15" fill="rgb(209,9,3)" fg:x="461384140" fg:w="4012036"/><text x="46.3422%" y="159.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (10,030,090 samples, 1.00%)</title><rect x="46.4930%" y="165" width="1.0020%" height="15" fill="rgb(230,59,30)" fg:x="465396176" fg:w="10030090"/><text x="46.7430%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (10,030,090 samples, 1.00%)</title><rect x="46.4930%" y="149" width="1.0020%" height="15" fill="rgb(209,121,21)" fg:x="465396176" fg:w="10030090"/><text x="46.7430%" y="159.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4,012,036 samples, 0.40%)</title><rect x="47.4950%" y="117" width="0.4008%" height="15" fill="rgb(220,109,13)" fg:x="475426266" fg:w="4012036"/><text x="47.7450%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (4,012,036 samples, 0.40%)</title><rect x="47.4950%" y="101" width="0.4008%" height="15" fill="rgb(232,18,1)" fg:x="475426266" fg:w="4012036"/><text x="47.7450%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (4,012,036 samples, 0.40%)</title><rect x="47.4950%" y="85" width="0.4008%" height="15" fill="rgb(215,41,42)" fg:x="475426266" fg:w="4012036"/><text x="47.7450%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (4,012,036 samples, 0.40%)</title><rect x="47.4950%" y="69" width="0.4008%" height="15" fill="rgb(224,123,36)" fg:x="475426266" fg:w="4012036"/><text x="47.7450%" y="79.50"></text></g><g><title>ahash::operations::folded_multiply (3,009,027 samples, 0.30%)</title><rect x="47.5952%" y="53" width="0.3006%" height="15" fill="rgb(240,125,3)" fg:x="476429275" fg:w="3009027"/><text x="47.8452%" y="63.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="47.7956%" y="37" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="478435293" fg:w="1003009"/><text x="48.0456%" y="47.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (11,033,099 samples, 1.10%)</title><rect x="47.8958%" y="85" width="1.1022%" height="15" fill="rgb(205,185,37)" fg:x="479438302" fg:w="11033099"/><text x="48.1458%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (10,030,090 samples, 1.00%)</title><rect x="47.9960%" y="69" width="1.0020%" height="15" fill="rgb(238,207,15)" fg:x="480441311" fg:w="10030090"/><text x="48.2460%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (53,159,477 samples, 5.31%)</title><rect x="44.9900%" y="197" width="5.3106%" height="15" fill="rgb(213,199,42)" fg:x="450351041" fg:w="53159477"/><text x="45.2400%" y="207.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (53,159,477 samples, 5.31%)</title><rect x="44.9900%" y="181" width="5.3106%" height="15" fill="rgb(235,201,11)" fg:x="450351041" fg:w="53159477"/><text x="45.2400%" y="191.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="47.4950%" y="165" width="2.8056%" height="15" fill="rgb(207,46,11)" fg:x="475426266" fg:w="28084252"/><text x="47.7450%" y="175.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="47.4950%" y="149" width="2.8056%" height="15" fill="rgb(241,35,35)" fg:x="475426266" fg:w="28084252"/><text x="47.7450%" y="159.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (28,084,252 samples, 2.81%)</title><rect x="47.4950%" y="133" width="2.8056%" height="15" fill="rgb(243,32,47)" fg:x="475426266" fg:w="28084252"/><text x="47.7450%" y="143.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (24,072,216 samples, 2.40%)</title><rect x="47.8958%" y="117" width="2.4048%" height="15" fill="rgb(247,202,23)" fg:x="479438302" fg:w="24072216"/><text x="48.1458%" y="127.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (24,072,216 samples, 2.40%)</title><rect x="47.8958%" y="101" width="2.4048%" height="15" fill="rgb(219,102,11)" fg:x="479438302" fg:w="24072216"/><text x="48.1458%" y="111.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (13,039,117 samples, 1.30%)</title><rect x="48.9980%" y="85" width="1.3026%" height="15" fill="rgb(243,110,44)" fg:x="490471401" fg:w="13039117"/><text x="49.2480%" y="95.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="50.9018%" y="149" width="0.8016%" height="15" fill="rgb(222,74,54)" fg:x="509528572" fg:w="8024072"/><text x="51.1518%" y="159.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.80%)</title><rect x="50.9018%" y="133" width="0.8016%" height="15" fill="rgb(216,99,12)" fg:x="509528572" fg:w="8024072"/><text x="51.1518%" y="143.50"></text></g><g><title>core::intrinsics::likely (6,018,054 samples, 0.60%)</title><rect x="51.7034%" y="149" width="0.6012%" height="15" fill="rgb(226,22,26)" fg:x="517552644" fg:w="6018054"/><text x="51.9534%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (8,024,072 samples, 0.80%)</title><rect x="52.3046%" y="149" width="0.8016%" height="15" fill="rgb(217,163,10)" fg:x="523570698" fg:w="8024072"/><text x="52.5546%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8,024,072 samples, 0.80%)</title><rect x="52.3046%" y="133" width="0.8016%" height="15" fill="rgb(213,25,53)" fg:x="523570698" fg:w="8024072"/><text x="52.5546%" y="143.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,006,018 samples, 0.20%)</title><rect x="53.1062%" y="149" width="0.2004%" height="15" fill="rgb(252,105,26)" fg:x="531594770" fg:w="2006018"/><text x="53.3562%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (63,189,567 samples, 6.31%)</title><rect x="53.3066%" y="133" width="6.3126%" height="15" fill="rgb(220,39,43)" fg:x="533600788" fg:w="63189567"/><text x="53.5566%" y="143.50">hashbrow..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (63,189,567 samples, 6.31%)</title><rect x="53.3066%" y="117" width="6.3126%" height="15" fill="rgb(229,68,48)" fg:x="533600788" fg:w="63189567"/><text x="53.5566%" y="127.50">&lt;Q as ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63,189,567 samples, 6.31%)</title><rect x="53.3066%" y="101" width="6.3126%" height="15" fill="rgb(252,8,32)" fg:x="533600788" fg:w="63189567"/><text x="53.5566%" y="111.50">core::cm..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (63,189,567 samples, 6.31%)</title><rect x="53.3066%" y="85" width="6.3126%" height="15" fill="rgb(223,20,43)" fg:x="533600788" fg:w="63189567"/><text x="53.5566%" y="95.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (63,189,567 samples, 6.31%)</title><rect x="53.3066%" y="69" width="6.3126%" height="15" fill="rgb(229,81,49)" fg:x="533600788" fg:w="63189567"/><text x="53.5566%" y="79.50">&lt;T as co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (14,042,126 samples, 1.40%)</title><rect x="59.6192%" y="133" width="1.4028%" height="15" fill="rgb(236,28,36)" fg:x="596790355" fg:w="14042126"/><text x="59.8692%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (14,042,126 samples, 1.40%)</title><rect x="59.6192%" y="117" width="1.4028%" height="15" fill="rgb(249,185,26)" fg:x="596790355" fg:w="14042126"/><text x="59.8692%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14,042,126 samples, 1.40%)</title><rect x="59.6192%" y="101" width="1.4028%" height="15" fill="rgb(249,174,33)" fg:x="596790355" fg:w="14042126"/><text x="59.8692%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (88,264,792 samples, 8.82%)</title><rect x="53.3066%" y="149" width="8.8176%" height="15" fill="rgb(233,201,37)" fg:x="533600788" fg:w="88264792"/><text x="53.5566%" y="159.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (11,033,099 samples, 1.10%)</title><rect x="61.0220%" y="133" width="1.1022%" height="15" fill="rgb(221,78,26)" fg:x="610832481" fg:w="11033099"/><text x="61.2720%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (11,033,099 samples, 1.10%)</title><rect x="61.0220%" y="117" width="1.1022%" height="15" fill="rgb(250,127,30)" fg:x="610832481" fg:w="11033099"/><text x="61.2720%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11,033,099 samples, 1.10%)</title><rect x="61.0220%" y="101" width="1.1022%" height="15" fill="rgb(230,49,44)" fg:x="610832481" fg:w="11033099"/><text x="61.2720%" y="111.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (435,305,906 samples, 43.49%)</title><rect x="20.4409%" y="325" width="43.4870%" height="15" fill="rgb(229,67,23)" fg:x="204613836" fg:w="435305906"/><text x="20.6909%" y="335.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (200,601,800 samples, 20.04%)</title><rect x="43.8878%" y="309" width="20.0401%" height="15" fill="rgb(249,83,47)" fg:x="439317942" fg:w="200601800"/><text x="44.1378%" y="319.50">core::cmp::impls::&lt;impl core::c..</text></g><g><title>core::cmp::PartialOrd::lt (200,601,800 samples, 20.04%)</title><rect x="43.8878%" y="293" width="20.0401%" height="15" fill="rgb(215,43,3)" fg:x="439317942" fg:w="200601800"/><text x="44.1378%" y="303.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (200,601,800 samples, 20.04%)</title><rect x="43.8878%" y="277" width="20.0401%" height="15" fill="rgb(238,154,13)" fg:x="439317942" fg:w="200601800"/><text x="44.1378%" y="287.50">&lt;aoc_2024_megaproject::problems..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (197,592,773 samples, 19.74%)</title><rect x="44.1884%" y="261" width="19.7395%" height="15" fill="rgb(219,56,2)" fg:x="442326969" fg:w="197592773"/><text x="44.4384%" y="271.50">aoc_2024_megaproject::problems:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (196,589,764 samples, 19.64%)</title><rect x="44.2886%" y="245" width="19.6393%" height="15" fill="rgb(233,0,4)" fg:x="443329978" fg:w="196589764"/><text x="44.5386%" y="255.50">std::collections::hash::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (196,589,764 samples, 19.64%)</title><rect x="44.2886%" y="229" width="19.6393%" height="15" fill="rgb(235,30,7)" fg:x="443329978" fg:w="196589764"/><text x="44.5386%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (196,589,764 samples, 19.64%)</title><rect x="44.2886%" y="213" width="19.6393%" height="15" fill="rgb(250,79,13)" fg:x="443329978" fg:w="196589764"/><text x="44.5386%" y="223.50">hashbrown::map::HashMap&lt;K,V,S,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (136,409,224 samples, 13.63%)</title><rect x="50.3006%" y="197" width="13.6273%" height="15" fill="rgb(211,146,34)" fg:x="503510518" fg:w="136409224"/><text x="50.5506%" y="207.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (136,409,224 samples, 13.63%)</title><rect x="50.3006%" y="181" width="13.6273%" height="15" fill="rgb(228,22,38)" fg:x="503510518" fg:w="136409224"/><text x="50.5506%" y="191.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (136,409,224 samples, 13.63%)</title><rect x="50.3006%" y="165" width="13.6273%" height="15" fill="rgb(235,168,5)" fg:x="503510518" fg:w="136409224"/><text x="50.5506%" y="175.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (18,054,162 samples, 1.80%)</title><rect x="62.1242%" y="149" width="1.8036%" height="15" fill="rgb(221,155,16)" fg:x="621865580" fg:w="18054162"/><text x="62.3742%" y="159.50">h..</text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="65.6313%" y="165" width="0.2004%" height="15" fill="rgb(215,215,53)" fg:x="656970895" fg:w="2006018"/><text x="65.8813%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="65.6313%" y="149" width="0.2004%" height="15" fill="rgb(223,4,10)" fg:x="656970895" fg:w="2006018"/><text x="65.8813%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (11,033,099 samples, 1.10%)</title><rect x="65.6313%" y="181" width="1.1022%" height="15" fill="rgb(234,103,6)" fg:x="656970895" fg:w="11033099"/><text x="65.8813%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9,027,081 samples, 0.90%)</title><rect x="65.8317%" y="165" width="0.9018%" height="15" fill="rgb(227,97,0)" fg:x="658976913" fg:w="9027081"/><text x="66.0817%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="66.7335%" y="133" width="0.3006%" height="15" fill="rgb(234,150,53)" fg:x="668003994" fg:w="3009027"/><text x="66.9835%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="66.7335%" y="117" width="0.3006%" height="15" fill="rgb(228,201,54)" fg:x="668003994" fg:w="3009027"/><text x="66.9835%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="66.7335%" y="101" width="0.3006%" height="15" fill="rgb(222,22,37)" fg:x="668003994" fg:w="3009027"/><text x="66.9835%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="66.7335%" y="85" width="0.3006%" height="15" fill="rgb(237,53,32)" fg:x="668003994" fg:w="3009027"/><text x="66.9835%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (3,009,027 samples, 0.30%)</title><rect x="66.7335%" y="69" width="0.3006%" height="15" fill="rgb(233,25,53)" fg:x="668003994" fg:w="3009027"/><text x="66.9835%" y="79.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (3,009,027 samples, 0.30%)</title><rect x="66.7335%" y="53" width="0.3006%" height="15" fill="rgb(210,40,34)" fg:x="668003994" fg:w="3009027"/><text x="66.9835%" y="63.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="67.6353%" y="85" width="0.1002%" height="15" fill="rgb(241,220,44)" fg:x="677031075" fg:w="1003009"/><text x="67.8853%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="67.6353%" y="69" width="0.1002%" height="15" fill="rgb(235,28,35)" fg:x="677031075" fg:w="1003009"/><text x="67.8853%" y="79.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (12,036,108 samples, 1.20%)</title><rect x="67.0341%" y="101" width="1.2024%" height="15" fill="rgb(210,56,17)" fg:x="671013021" fg:w="12036108"/><text x="67.2841%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,015,045 samples, 0.50%)</title><rect x="67.7355%" y="85" width="0.5010%" height="15" fill="rgb(224,130,29)" fg:x="678034084" fg:w="5015045"/><text x="67.9855%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (34,102,306 samples, 3.41%)</title><rect x="65.6313%" y="213" width="3.4068%" height="15" fill="rgb(235,212,8)" fg:x="656970895" fg:w="34102306"/><text x="65.8813%" y="223.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (34,102,306 samples, 3.41%)</title><rect x="65.6313%" y="197" width="3.4068%" height="15" fill="rgb(223,33,50)" fg:x="656970895" fg:w="34102306"/><text x="65.8813%" y="207.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (23,069,207 samples, 2.30%)</title><rect x="66.7335%" y="181" width="2.3046%" height="15" fill="rgb(219,149,13)" fg:x="668003994" fg:w="23069207"/><text x="66.9835%" y="191.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (23,069,207 samples, 2.30%)</title><rect x="66.7335%" y="165" width="2.3046%" height="15" fill="rgb(250,156,29)" fg:x="668003994" fg:w="23069207"/><text x="66.9835%" y="175.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (23,069,207 samples, 2.30%)</title><rect x="66.7335%" y="149" width="2.3046%" height="15" fill="rgb(216,193,19)" fg:x="668003994" fg:w="23069207"/><text x="66.9835%" y="159.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (20,060,180 samples, 2.00%)</title><rect x="67.0341%" y="133" width="2.0040%" height="15" fill="rgb(216,135,14)" fg:x="671013021" fg:w="20060180"/><text x="67.2841%" y="143.50">c..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (20,060,180 samples, 2.00%)</title><rect x="67.0341%" y="117" width="2.0040%" height="15" fill="rgb(241,47,5)" fg:x="671013021" fg:w="20060180"/><text x="67.2841%" y="127.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (8,024,072 samples, 0.80%)</title><rect x="68.2365%" y="101" width="0.8016%" height="15" fill="rgb(233,42,35)" fg:x="683049129" fg:w="8024072"/><text x="68.4865%" y="111.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.40%)</title><rect x="69.8397%" y="165" width="0.4008%" height="15" fill="rgb(231,13,6)" fg:x="699097273" fg:w="4012036"/><text x="70.0897%" y="175.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (4,012,036 samples, 0.40%)</title><rect x="69.8397%" y="149" width="0.4008%" height="15" fill="rgb(207,181,40)" fg:x="699097273" fg:w="4012036"/><text x="70.0897%" y="159.50"></text></g><g><title>core::intrinsics::likely (5,015,045 samples, 0.50%)</title><rect x="70.2405%" y="165" width="0.5010%" height="15" fill="rgb(254,173,49)" fg:x="703109309" fg:w="5015045"/><text x="70.4905%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (9,027,081 samples, 0.90%)</title><rect x="70.7415%" y="165" width="0.9018%" height="15" fill="rgb(221,1,38)" fg:x="708124354" fg:w="9027081"/><text x="70.9915%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9,027,081 samples, 0.90%)</title><rect x="70.7415%" y="149" width="0.9018%" height="15" fill="rgb(206,124,46)" fg:x="708124354" fg:w="9027081"/><text x="70.9915%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9,027,081 samples, 0.90%)</title><rect x="70.7415%" y="133" width="0.9018%" height="15" fill="rgb(249,21,11)" fg:x="708124354" fg:w="9027081"/><text x="70.9915%" y="143.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.20%)</title><rect x="71.6433%" y="165" width="0.2004%" height="15" fill="rgb(222,201,40)" fg:x="717151435" fg:w="2006018"/><text x="71.8933%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.20%)</title><rect x="71.6433%" y="149" width="0.2004%" height="15" fill="rgb(235,61,29)" fg:x="717151435" fg:w="2006018"/><text x="71.8933%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (61,183,549 samples, 6.11%)</title><rect x="71.8437%" y="149" width="6.1122%" height="15" fill="rgb(219,207,3)" fg:x="719157453" fg:w="61183549"/><text x="72.0937%" y="159.50">hashbrow..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (61,183,549 samples, 6.11%)</title><rect x="71.8437%" y="133" width="6.1122%" height="15" fill="rgb(222,56,46)" fg:x="719157453" fg:w="61183549"/><text x="72.0937%" y="143.50">&lt;Q as ha..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (61,183,549 samples, 6.11%)</title><rect x="71.8437%" y="117" width="6.1122%" height="15" fill="rgb(239,76,54)" fg:x="719157453" fg:w="61183549"/><text x="72.0937%" y="127.50">core::cm..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (61,183,549 samples, 6.11%)</title><rect x="71.8437%" y="101" width="6.1122%" height="15" fill="rgb(231,124,27)" fg:x="719157453" fg:w="61183549"/><text x="72.0937%" y="111.50">core::ar..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (61,183,549 samples, 6.11%)</title><rect x="71.8437%" y="85" width="6.1122%" height="15" fill="rgb(249,195,6)" fg:x="719157453" fg:w="61183549"/><text x="72.0937%" y="95.50">&lt;T as co..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (8,024,072 samples, 0.80%)</title><rect x="77.9559%" y="149" width="0.8016%" height="15" fill="rgb(237,174,47)" fg:x="780341002" fg:w="8024072"/><text x="78.2059%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8,024,072 samples, 0.80%)</title><rect x="77.9559%" y="133" width="0.8016%" height="15" fill="rgb(206,201,31)" fg:x="780341002" fg:w="8024072"/><text x="78.2059%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8,024,072 samples, 0.80%)</title><rect x="77.9559%" y="117" width="0.8016%" height="15" fill="rgb(231,57,52)" fg:x="780341002" fg:w="8024072"/><text x="78.2059%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (74,222,666 samples, 7.41%)</title><rect x="71.8437%" y="165" width="7.4148%" height="15" fill="rgb(248,177,22)" fg:x="719157453" fg:w="74222666"/><text x="72.0937%" y="175.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5,015,045 samples, 0.50%)</title><rect x="78.7575%" y="149" width="0.5010%" height="15" fill="rgb(215,211,37)" fg:x="788365074" fg:w="5015045"/><text x="79.0075%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5,015,045 samples, 0.50%)</title><rect x="78.7575%" y="133" width="0.5010%" height="15" fill="rgb(241,128,51)" fg:x="788365074" fg:w="5015045"/><text x="79.0075%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5,015,045 samples, 0.50%)</title><rect x="78.7575%" y="117" width="0.5010%" height="15" fill="rgb(227,165,31)" fg:x="788365074" fg:w="5015045"/><text x="79.0075%" y="127.50"></text></g><g><title>core::cmp::PartialOrd::gt (162,487,458 samples, 16.23%)</title><rect x="64.8297%" y="309" width="16.2325%" height="15" fill="rgb(228,167,24)" fg:x="648946823" fg:w="162487458"/><text x="65.0797%" y="319.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (162,487,458 samples, 16.23%)</title><rect x="64.8297%" y="293" width="16.2325%" height="15" fill="rgb(228,143,12)" fg:x="648946823" fg:w="162487458"/><text x="65.0797%" y="303.50">&lt;aoc_2024_megaproject::pr..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (162,487,458 samples, 16.23%)</title><rect x="64.8297%" y="277" width="16.2325%" height="15" fill="rgb(249,149,8)" fg:x="648946823" fg:w="162487458"/><text x="65.0797%" y="287.50">aoc_2024_megaproject::pro..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (158,475,422 samples, 15.83%)</title><rect x="65.2305%" y="261" width="15.8317%" height="15" fill="rgb(243,35,44)" fg:x="652958859" fg:w="158475422"/><text x="65.4805%" y="271.50">std::collections::hash::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (158,475,422 samples, 15.83%)</title><rect x="65.2305%" y="245" width="15.8317%" height="15" fill="rgb(246,89,9)" fg:x="652958859" fg:w="158475422"/><text x="65.4805%" y="255.50">hashbrown::map::HashMap&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (158,475,422 samples, 15.83%)</title><rect x="65.2305%" y="229" width="15.8317%" height="15" fill="rgb(233,213,13)" fg:x="652958859" fg:w="158475422"/><text x="65.4805%" y="239.50">hashbrown::map::HashMap&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (120,361,080 samples, 12.02%)</title><rect x="69.0381%" y="213" width="12.0240%" height="15" fill="rgb(233,141,41)" fg:x="691073201" fg:w="120361080"/><text x="69.2881%" y="223.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (120,361,080 samples, 12.02%)</title><rect x="69.0381%" y="197" width="12.0240%" height="15" fill="rgb(239,167,4)" fg:x="691073201" fg:w="120361080"/><text x="69.2881%" y="207.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (120,361,080 samples, 12.02%)</title><rect x="69.0381%" y="181" width="12.0240%" height="15" fill="rgb(209,217,16)" fg:x="691073201" fg:w="120361080"/><text x="69.2881%" y="191.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (18,054,162 samples, 1.80%)</title><rect x="79.2585%" y="165" width="1.8036%" height="15" fill="rgb(219,88,35)" fg:x="793380119" fg:w="18054162"/><text x="79.5085%" y="175.50">h..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,006,018 samples, 0.20%)</title><rect x="81.1623%" y="277" width="0.2004%" height="15" fill="rgb(220,193,23)" fg:x="812437290" fg:w="2006018"/><text x="81.4123%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,006,018 samples, 0.20%)</title><rect x="81.1623%" y="261" width="0.2004%" height="15" fill="rgb(230,90,52)" fg:x="812437290" fg:w="2006018"/><text x="81.4123%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5,015,045 samples, 0.50%)</title><rect x="81.0621%" y="309" width="0.5010%" height="15" fill="rgb(252,106,19)" fg:x="811434281" fg:w="5015045"/><text x="81.3121%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,015,045 samples, 0.50%)</title><rect x="81.0621%" y="293" width="0.5010%" height="15" fill="rgb(206,74,20)" fg:x="811434281" fg:w="5015045"/><text x="81.3121%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="81.3627%" y="277" width="0.2004%" height="15" fill="rgb(230,138,44)" fg:x="814443308" fg:w="2006018"/><text x="81.6127%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,006,018 samples, 0.20%)</title><rect x="82.3647%" y="293" width="0.2004%" height="15" fill="rgb(235,182,43)" fg:x="824473398" fg:w="2006018"/><text x="82.6147%" y="303.50"></text></g><g><title>core::intrinsics::copy (11,033,099 samples, 1.10%)</title><rect x="82.5651%" y="261" width="1.1022%" height="15" fill="rgb(242,16,51)" fg:x="826479416" fg:w="11033099"/><text x="82.8151%" y="271.50"></text></g><g><title>[libc.so.6] (10,030,090 samples, 1.00%)</title><rect x="82.6653%" y="245" width="1.0020%" height="15" fill="rgb(248,9,4)" fg:x="827482425" fg:w="10030090"/><text x="82.9153%" y="255.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::sort_with_partialord (200,601,800 samples, 20.04%)</title><rect x="63.9279%" y="325" width="20.0401%" height="15" fill="rgb(210,31,22)" fg:x="639919742" fg:w="200601800"/><text x="64.1779%" y="335.50">aoc_2024_megaproject::problems:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::rotate_right (24,072,216 samples, 2.40%)</title><rect x="81.5631%" y="309" width="2.4048%" height="15" fill="rgb(239,54,39)" fg:x="816449326" fg:w="24072216"/><text x="81.8131%" y="319.50">co..</text></g><g><title>core::slice::rotate::ptr_rotate (14,042,126 samples, 1.40%)</title><rect x="82.5651%" y="293" width="1.4028%" height="15" fill="rgb(230,99,41)" fg:x="826479416" fg:w="14042126"/><text x="82.8151%" y="303.50"></text></g><g><title>core::slice::rotate::ptr_rotate_memmove (14,042,126 samples, 1.40%)</title><rect x="82.5651%" y="277" width="1.4028%" height="15" fill="rgb(253,106,12)" fg:x="826479416" fg:w="14042126"/><text x="82.8151%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="83.6673%" y="261" width="0.3006%" height="15" fill="rgb(213,46,41)" fg:x="837512515" fg:w="3009027"/><text x="83.9173%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="85.2705%" y="213" width="0.8016%" height="15" fill="rgb(215,133,35)" fg:x="853560659" fg:w="8024072"/><text x="85.5205%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="85.2705%" y="197" width="0.8016%" height="15" fill="rgb(213,28,5)" fg:x="853560659" fg:w="8024072"/><text x="85.5205%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,024,072 samples, 0.80%)</title><rect x="85.2705%" y="181" width="0.8016%" height="15" fill="rgb(215,77,49)" fg:x="853560659" fg:w="8024072"/><text x="85.5205%" y="191.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="85.8717%" y="165" width="0.2004%" height="15" fill="rgb(248,100,22)" fg:x="859578713" fg:w="2006018"/><text x="86.1217%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,003,009 samples, 0.10%)</title><rect x="86.0721%" y="181" width="0.1002%" height="15" fill="rgb(208,67,9)" fg:x="861584731" fg:w="1003009"/><text x="86.3221%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,006,018 samples, 0.20%)</title><rect x="86.0721%" y="213" width="0.2004%" height="15" fill="rgb(219,133,21)" fg:x="861584731" fg:w="2006018"/><text x="86.3221%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,006,018 samples, 0.20%)</title><rect x="86.0721%" y="197" width="0.2004%" height="15" fill="rgb(246,46,29)" fg:x="861584731" fg:w="2006018"/><text x="86.3221%" y="207.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (1,003,009 samples, 0.10%)</title><rect x="86.1723%" y="181" width="0.1002%" height="15" fill="rgb(246,185,52)" fg:x="862587740" fg:w="1003009"/><text x="86.4223%" y="191.50"></text></g><g><title>core::slice::index::get_noubcheck (1,003,009 samples, 0.10%)</title><rect x="86.1723%" y="165" width="0.1002%" height="15" fill="rgb(252,136,11)" fg:x="862587740" fg:w="1003009"/><text x="86.4223%" y="175.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="86.7735%" y="165" width="0.1002%" height="15" fill="rgb(219,138,53)" fg:x="868605794" fg:w="1003009"/><text x="87.0235%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (38,114,342 samples, 3.81%)</title><rect x="83.9679%" y="325" width="3.8076%" height="15" fill="rgb(211,51,23)" fg:x="840521542" fg:w="38114342"/><text x="84.2179%" y="335.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (38,114,342 samples, 3.81%)</title><rect x="83.9679%" y="309" width="3.8076%" height="15" fill="rgb(247,221,28)" fg:x="840521542" fg:w="38114342"/><text x="84.2179%" y="319.50">core..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (38,114,342 samples, 3.81%)</title><rect x="83.9679%" y="293" width="3.8076%" height="15" fill="rgb(251,222,45)" fg:x="840521542" fg:w="38114342"/><text x="84.2179%" y="303.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38,114,342 samples, 3.81%)</title><rect x="83.9679%" y="277" width="3.8076%" height="15" fill="rgb(217,162,53)" fg:x="840521542" fg:w="38114342"/><text x="84.2179%" y="287.50">&lt;cor..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (38,114,342 samples, 3.81%)</title><rect x="83.9679%" y="261" width="3.8076%" height="15" fill="rgb(229,93,14)" fg:x="840521542" fg:w="38114342"/><text x="84.2179%" y="271.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (38,114,342 samples, 3.81%)</title><rect x="83.9679%" y="245" width="3.8076%" height="15" fill="rgb(209,67,49)" fg:x="840521542" fg:w="38114342"/><text x="84.2179%" y="255.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (29,087,261 samples, 2.91%)</title><rect x="84.8697%" y="229" width="2.9058%" height="15" fill="rgb(213,87,29)" fg:x="849548623" fg:w="29087261"/><text x="85.1197%" y="239.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr (15,045,135 samples, 1.50%)</title><rect x="86.2725%" y="213" width="1.5030%" height="15" fill="rgb(205,151,52)" fg:x="863590749" fg:w="15045135"/><text x="86.5225%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (13,039,117 samples, 1.30%)</title><rect x="86.4729%" y="197" width="1.3026%" height="15" fill="rgb(253,215,39)" fg:x="865596767" fg:w="13039117"/><text x="86.7229%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (13,039,117 samples, 1.30%)</title><rect x="86.4729%" y="181" width="1.3026%" height="15" fill="rgb(221,220,41)" fg:x="865596767" fg:w="13039117"/><text x="86.7229%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_naive (9,027,081 samples, 0.90%)</title><rect x="86.8737%" y="165" width="0.9018%" height="15" fill="rgb(218,133,21)" fg:x="869608803" fg:w="9027081"/><text x="87.1237%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (2,006,018 samples, 0.20%)</title><rect x="87.7756%" y="325" width="0.2004%" height="15" fill="rgb(221,193,43)" fg:x="878635884" fg:w="2006018"/><text x="88.0256%" y="335.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (2,006,018 samples, 0.20%)</title><rect x="87.7756%" y="309" width="0.2004%" height="15" fill="rgb(240,128,52)" fg:x="878635884" fg:w="2006018"/><text x="88.0256%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (7,021,063 samples, 0.70%)</title><rect x="91.8838%" y="261" width="0.7014%" height="15" fill="rgb(253,114,12)" fg:x="919759253" fg:w="7021063"/><text x="92.1338%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7,021,063 samples, 0.70%)</title><rect x="91.8838%" y="245" width="0.7014%" height="15" fill="rgb(215,223,47)" fg:x="919759253" fg:w="7021063"/><text x="92.1338%" y="255.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="91.9840%" y="229" width="0.6012%" height="15" fill="rgb(248,225,23)" fg:x="920762262" fg:w="6018054"/><text x="92.2340%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="92.5852%" y="245" width="0.1002%" height="15" fill="rgb(250,108,0)" fg:x="926780316" fg:w="1003009"/><text x="92.8352%" y="255.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (1,003,009 samples, 0.10%)</title><rect x="92.5852%" y="229" width="0.1002%" height="15" fill="rgb(228,208,7)" fg:x="926780316" fg:w="1003009"/><text x="92.8352%" y="239.50"></text></g><g><title>core::slice::index::get_noubcheck (1,003,009 samples, 0.10%)</title><rect x="92.5852%" y="213" width="0.1002%" height="15" fill="rgb(244,45,10)" fg:x="926780316" fg:w="1003009"/><text x="92.8352%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,012,036 samples, 0.40%)</title><rect x="92.5852%" y="261" width="0.4008%" height="15" fill="rgb(207,125,25)" fg:x="926780316" fg:w="4012036"/><text x="92.8352%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,009,027 samples, 0.30%)</title><rect x="92.6854%" y="245" width="0.3006%" height="15" fill="rgb(210,195,18)" fg:x="927783325" fg:w="3009027"/><text x="92.9354%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,009,027 samples, 0.30%)</title><rect x="92.6854%" y="229" width="0.3006%" height="15" fill="rgb(249,80,12)" fg:x="927783325" fg:w="3009027"/><text x="92.9354%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (56,168,504 samples, 5.61%)</title><rect x="87.9760%" y="325" width="5.6112%" height="15" fill="rgb(221,65,9)" fg:x="880641902" fg:w="56168504"/><text x="88.2260%" y="335.50">core::s..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (31,093,279 samples, 3.11%)</title><rect x="90.4810%" y="309" width="3.1062%" height="15" fill="rgb(235,49,36)" fg:x="905717127" fg:w="31093279"/><text x="90.7310%" y="319.50">&lt;&amp;s..</text></g><g><title>core::str::pattern::StrSearcher::new (31,093,279 samples, 3.11%)</title><rect x="90.4810%" y="293" width="3.1062%" height="15" fill="rgb(225,32,20)" fg:x="905717127" fg:w="31093279"/><text x="90.7310%" y="303.50">cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (21,063,189 samples, 2.10%)</title><rect x="91.4830%" y="277" width="2.1042%" height="15" fill="rgb(215,141,46)" fg:x="915747217" fg:w="21063189"/><text x="91.7330%" y="287.50">c..</text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (6,018,054 samples, 0.60%)</title><rect x="92.9860%" y="261" width="0.6012%" height="15" fill="rgb(250,160,47)" fg:x="930792352" fg:w="6018054"/><text x="93.2360%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,018,054 samples, 0.60%)</title><rect x="92.9860%" y="245" width="0.6012%" height="15" fill="rgb(216,222,40)" fg:x="930792352" fg:w="6018054"/><text x="93.2360%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="229" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="239.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="93.8878%" y="245" width="0.2004%" height="15" fill="rgb(207,178,40)" fg:x="939819433" fg:w="2006018"/><text x="94.1378%" y="255.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (2,006,018 samples, 0.20%)</title><rect x="93.8878%" y="229" width="0.2004%" height="15" fill="rgb(221,136,13)" fg:x="939819433" fg:w="2006018"/><text x="94.1378%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (5,015,045 samples, 0.50%)</title><rect x="94.0882%" y="245" width="0.5010%" height="15" fill="rgb(249,199,10)" fg:x="941825451" fg:w="5015045"/><text x="94.3382%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5,015,045 samples, 0.50%)</title><rect x="94.0882%" y="229" width="0.5010%" height="15" fill="rgb(249,222,13)" fg:x="941825451" fg:w="5015045"/><text x="94.3382%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::full (9,027,081 samples, 0.90%)</title><rect x="94.5892%" y="245" width="0.9018%" height="15" fill="rgb(244,185,38)" fg:x="946840496" fg:w="9027081"/><text x="94.8392%" y="255.50"></text></g><g><title>core::intrinsics::unlikely (1,003,009 samples, 0.10%)</title><rect x="95.4910%" y="229" width="0.1002%" height="15" fill="rgb(236,202,9)" fg:x="955867577" fg:w="1003009"/><text x="95.7410%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (28,084,252 samples, 2.81%)</title><rect x="93.6874%" y="293" width="2.8056%" height="15" fill="rgb(250,229,37)" fg:x="937813415" fg:w="28084252"/><text x="93.9374%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (28,084,252 samples, 2.81%)</title><rect x="93.6874%" y="277" width="2.8056%" height="15" fill="rgb(206,174,23)" fg:x="937813415" fg:w="28084252"/><text x="93.9374%" y="287.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (28,084,252 samples, 2.81%)</title><rect x="93.6874%" y="261" width="2.8056%" height="15" fill="rgb(211,33,43)" fg:x="937813415" fg:w="28084252"/><text x="93.9374%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (10,030,090 samples, 1.00%)</title><rect x="95.4910%" y="245" width="1.0020%" height="15" fill="rgb(245,58,50)" fg:x="955867577" fg:w="10030090"/><text x="95.7410%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (9,027,081 samples, 0.90%)</title><rect x="95.5912%" y="229" width="0.9018%" height="15" fill="rgb(244,68,36)" fg:x="956870586" fg:w="9027081"/><text x="95.8412%" y="239.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (9,027,081 samples, 0.90%)</title><rect x="95.5912%" y="213" width="0.9018%" height="15" fill="rgb(232,229,15)" fg:x="956870586" fg:w="9027081"/><text x="95.8412%" y="223.50"></text></g><g><title>ahash::operations::folded_multiply (1,003,009 samples, 0.10%)</title><rect x="96.4930%" y="245" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="965897667" fg:w="1003009"/><text x="96.7430%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="96.4930%" y="229" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="965897667" fg:w="1003009"/><text x="96.7430%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (6,018,054 samples, 0.60%)</title><rect x="96.4930%" y="261" width="0.6012%" height="15" fill="rgb(212,155,44)" fg:x="965897667" fg:w="6018054"/><text x="96.7430%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.50%)</title><rect x="96.5932%" y="245" width="0.5010%" height="15" fill="rgb(226,2,50)" fg:x="966900676" fg:w="5015045"/><text x="96.8432%" y="255.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,003,009 samples, 0.10%)</title><rect x="97.0942%" y="261" width="0.1002%" height="15" fill="rgb(234,177,6)" fg:x="971915721" fg:w="1003009"/><text x="97.3442%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1,003,009 samples, 0.10%)</title><rect x="97.0942%" y="245" width="0.1002%" height="15" fill="rgb(217,24,9)" fg:x="971915721" fg:w="1003009"/><text x="97.3442%" y="255.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.30%)</title><rect x="97.7956%" y="213" width="0.3006%" height="15" fill="rgb(220,13,46)" fg:x="978936784" fg:w="3009027"/><text x="98.0456%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3,009,027 samples, 0.30%)</title><rect x="97.7956%" y="197" width="0.3006%" height="15" fill="rgb(239,221,27)" fg:x="978936784" fg:w="3009027"/><text x="98.0456%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3,009,027 samples, 0.30%)</title><rect x="97.7956%" y="181" width="0.3006%" height="15" fill="rgb(222,198,25)" fg:x="978936784" fg:w="3009027"/><text x="98.0456%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3,009,027 samples, 0.30%)</title><rect x="97.7956%" y="165" width="0.3006%" height="15" fill="rgb(211,99,13)" fg:x="978936784" fg:w="3009027"/><text x="98.0456%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="97.8958%" y="149" width="0.2004%" height="15" fill="rgb(232,111,31)" fg:x="979939793" fg:w="2006018"/><text x="98.1458%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="97.8958%" y="133" width="0.2004%" height="15" fill="rgb(245,82,37)" fg:x="979939793" fg:w="2006018"/><text x="98.1458%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (24,072,216 samples, 2.40%)</title><rect x="96.4930%" y="293" width="2.4048%" height="15" fill="rgb(227,149,46)" fg:x="965897667" fg:w="24072216"/><text x="96.7430%" y="303.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (24,072,216 samples, 2.40%)</title><rect x="96.4930%" y="277" width="2.4048%" height="15" fill="rgb(218,36,50)" fg:x="965897667" fg:w="24072216"/><text x="96.7430%" y="287.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,051,153 samples, 1.70%)</title><rect x="97.1944%" y="261" width="1.7034%" height="15" fill="rgb(226,80,48)" fg:x="972918730" fg:w="17051153"/><text x="97.4444%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (17,051,153 samples, 1.70%)</title><rect x="97.1944%" y="245" width="1.7034%" height="15" fill="rgb(238,224,15)" fg:x="972918730" fg:w="17051153"/><text x="97.4444%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (17,051,153 samples, 1.70%)</title><rect x="97.1944%" y="229" width="1.7034%" height="15" fill="rgb(241,136,10)" fg:x="972918730" fg:w="17051153"/><text x="97.4444%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (8,024,072 samples, 0.80%)</title><rect x="98.0962%" y="213" width="0.8016%" height="15" fill="rgb(208,32,45)" fg:x="981945811" fg:w="8024072"/><text x="98.3462%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (8,024,072 samples, 0.80%)</title><rect x="98.0962%" y="197" width="0.8016%" height="15" fill="rgb(207,135,9)" fg:x="981945811" fg:w="8024072"/><text x="98.3462%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (8,024,072 samples, 0.80%)</title><rect x="98.0962%" y="181" width="0.8016%" height="15" fill="rgb(206,86,44)" fg:x="981945811" fg:w="8024072"/><text x="98.3462%" y="191.50"></text></g><g><title>ahash::operations::folded_multiply (7,021,063 samples, 0.70%)</title><rect x="98.1964%" y="165" width="0.7014%" height="15" fill="rgb(245,177,15)" fg:x="982948820" fg:w="7021063"/><text x="98.4464%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="98.6974%" y="149" width="0.2004%" height="15" fill="rgb(206,64,50)" fg:x="987963865" fg:w="2006018"/><text x="98.9474%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8,024,072 samples, 0.80%)</title><rect x="98.8978%" y="277" width="0.8016%" height="15" fill="rgb(234,36,40)" fg:x="989969883" fg:w="8024072"/><text x="99.1478%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (8,024,072 samples, 0.80%)</title><rect x="98.8978%" y="261" width="0.8016%" height="15" fill="rgb(213,64,8)" fg:x="989969883" fg:w="8024072"/><text x="99.1478%" y="271.50"></text></g><g><title>core::ptr::write (8,024,072 samples, 0.80%)</title><rect x="98.8978%" y="245" width="0.8016%" height="15" fill="rgb(210,75,36)" fg:x="989969883" fg:w="8024072"/><text x="99.1478%" y="255.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="373" width="99.8998%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="383.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2 (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="357" width="99.8998%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="367.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day5::part2 (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="341" width="99.8998%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="351.50">aoc_2024_megaproject::problems::day5::part2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (63,189,567 samples, 6.31%)</title><rect x="93.5872%" y="325" width="6.3126%" height="15" fill="rgb(221,76,26)" fg:x="936810406" fg:w="63189567"/><text x="93.8372%" y="335.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63,189,567 samples, 6.31%)</title><rect x="93.5872%" y="309" width="6.3126%" height="15" fill="rgb(225,139,18)" fg:x="936810406" fg:w="63189567"/><text x="93.8372%" y="319.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (10,030,090 samples, 1.00%)</title><rect x="98.8978%" y="293" width="1.0020%" height="15" fill="rgb(230,137,11)" fg:x="989969883" fg:w="10030090"/><text x="99.1478%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2,006,018 samples, 0.20%)</title><rect x="99.6994%" y="277" width="0.2004%" height="15" fill="rgb(212,28,1)" fg:x="997993955" fg:w="2006018"/><text x="99.9494%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(248,164,17)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(222,171,42)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="229" width="0.1002%" height="15" fill="rgb(243,84,45)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="239.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="687.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="671.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(244,192,49)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="639.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="543.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="415.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="399.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="373" width="0.1002%" height="15" fill="rgb(239,3,39)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="383.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="357" width="0.1002%" height="15" fill="rgb(233,210,1)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="341" width="0.1002%" height="15" fill="rgb(244,137,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="325" width="0.1002%" height="15" fill="rgb(240,136,2)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="309" width="0.1002%" height="15" fill="rgb(239,18,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="293" width="0.1002%" height="15" fill="rgb(218,185,22)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="277" width="0.1002%" height="15" fill="rgb(225,218,4)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="261" width="0.1002%" height="15" fill="rgb(230,182,32)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="245" width="0.1002%" height="15" fill="rgb(242,56,43)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="229" width="0.1002%" height="15" fill="rgb(233,99,24)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="213" width="0.1002%" height="15" fill="rgb(234,209,42)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="223.50"></text></g></svg></svg>