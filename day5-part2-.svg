<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="7.2144%" y="501" width="0.1002%" height="15" fill="rgb(227,0,7)" fg:x="72216648" fg:w="1003009"/><text x="7.4644%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,003,009 samples, 0.10%)</title><rect x="7.2144%" y="485" width="0.1002%" height="15" fill="rgb(217,0,24)" fg:x="72216648" fg:w="1003009"/><text x="7.4644%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,003,009 samples, 0.10%)</title><rect x="7.2144%" y="469" width="0.1002%" height="15" fill="rgb(221,193,54)" fg:x="72216648" fg:w="1003009"/><text x="7.4644%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="7.2144%" y="453" width="0.1002%" height="15" fill="rgb(248,212,6)" fg:x="72216648" fg:w="1003009"/><text x="7.4644%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="7.3146%" y="501" width="0.2004%" height="15" fill="rgb(208,68,35)" fg:x="73219657" fg:w="2006018"/><text x="7.5646%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="7.3146%" y="485" width="0.2004%" height="15" fill="rgb(232,128,0)" fg:x="73219657" fg:w="2006018"/><text x="7.5646%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="7.3146%" y="469" width="0.2004%" height="15" fill="rgb(207,160,47)" fg:x="73219657" fg:w="2006018"/><text x="7.5646%" y="479.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (59,177,531 samples, 5.91%)</title><rect x="2.1042%" y="533" width="5.9118%" height="15" fill="rgb(228,23,34)" fg:x="21063189" fg:w="59177531"/><text x="2.3542%" y="543.50">&lt;core::s..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (51,153,459 samples, 5.11%)</title><rect x="2.9058%" y="517" width="5.1102%" height="15" fill="rgb(218,30,26)" fg:x="29087261" fg:w="51153459"/><text x="3.1558%" y="527.50">core::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5,015,045 samples, 0.50%)</title><rect x="7.5150%" y="501" width="0.5010%" height="15" fill="rgb(220,122,19)" fg:x="75225675" fg:w="5015045"/><text x="7.7650%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5,015,045 samples, 0.50%)</title><rect x="7.5150%" y="485" width="0.5010%" height="15" fill="rgb(250,228,42)" fg:x="75225675" fg:w="5015045"/><text x="7.7650%" y="495.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (73,219,657 samples, 7.31%)</title><rect x="0.8016%" y="565" width="7.3146%" height="15" fill="rgb(240,193,28)" fg:x="8024072" fg:w="73219657"/><text x="1.0516%" y="575.50">&lt;core::str..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (72,216,648 samples, 7.21%)</title><rect x="0.9018%" y="549" width="7.2144%" height="15" fill="rgb(216,20,37)" fg:x="9027081" fg:w="72216648"/><text x="1.1518%" y="559.50">core::str:..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="8.0160%" y="533" width="0.1002%" height="15" fill="rgb(206,188,39)" fg:x="80240720" fg:w="1003009"/><text x="8.2660%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1,003,009 samples, 0.10%)</title><rect x="8.0160%" y="517" width="0.1002%" height="15" fill="rgb(217,207,13)" fg:x="80240720" fg:w="1003009"/><text x="8.2660%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (91,273,819 samples, 9.12%)</title><rect x="0.7014%" y="581" width="9.1182%" height="15" fill="rgb(231,73,38)" fg:x="7021063" fg:w="91273819"/><text x="0.9514%" y="591.50">&lt;core::iter::..</text></g><g><title>core::option::Option&lt;T&gt;::map (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="565" width="1.7034%" height="15" fill="rgb(225,20,46)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="549" width="1.7034%" height="15" fill="rgb(210,31,41)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="559.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="533" width="1.7034%" height="15" fill="rgb(221,200,47)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="517" width="1.7034%" height="15" fill="rgb(226,26,5)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="527.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="501" width="1.7034%" height="15" fill="rgb(249,33,26)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="485" width="1.7034%" height="15" fill="rgb(235,183,28)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (17,051,153 samples, 1.70%)</title><rect x="8.1162%" y="469" width="1.7034%" height="15" fill="rgb(221,5,38)" fg:x="81243729" fg:w="17051153"/><text x="8.3662%" y="479.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (1,003,009 samples, 0.10%)</title><rect x="9.7194%" y="453" width="0.1002%" height="15" fill="rgb(247,18,42)" fg:x="97291873" fg:w="1003009"/><text x="9.9694%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (100,300,900 samples, 10.02%)</title><rect x="0.4008%" y="629" width="10.0200%" height="15" fill="rgb(241,131,45)" fg:x="4012036" fg:w="100300900"/><text x="0.6508%" y="639.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (100,300,900 samples, 10.02%)</title><rect x="0.4008%" y="613" width="10.0200%" height="15" fill="rgb(249,31,29)" fg:x="4012036" fg:w="100300900"/><text x="0.6508%" y="623.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (98,294,882 samples, 9.82%)</title><rect x="0.6012%" y="597" width="9.8196%" height="15" fill="rgb(225,111,53)" fg:x="6018054" fg:w="98294882"/><text x="0.8512%" y="607.50">alloc::vec::Ve..</text></g><g><title>core::ptr::write (6,018,054 samples, 0.60%)</title><rect x="9.8196%" y="581" width="0.6012%" height="15" fill="rgb(238,160,17)" fg:x="98294882" fg:w="6018054"/><text x="10.0696%" y="591.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (26,078,234 samples, 2.61%)</title><rect x="11.9238%" y="581" width="2.6052%" height="15" fill="rgb(214,148,48)" fg:x="119358071" fg:w="26078234"/><text x="12.1738%" y="591.50">&lt;c..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (25,075,225 samples, 2.51%)</title><rect x="12.0240%" y="565" width="2.5050%" height="15" fill="rgb(232,36,49)" fg:x="120361080" fg:w="25075225"/><text x="12.2740%" y="575.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="14.4289%" y="549" width="0.1002%" height="15" fill="rgb(209,103,24)" fg:x="144433296" fg:w="1003009"/><text x="14.6789%" y="559.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="14.4289%" y="533" width="0.1002%" height="15" fill="rgb(229,88,8)" fg:x="144433296" fg:w="1003009"/><text x="14.6789%" y="543.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (44,132,396 samples, 4.41%)</title><rect x="10.4208%" y="613" width="4.4088%" height="15" fill="rgb(213,181,19)" fg:x="104312936" fg:w="44132396"/><text x="10.6708%" y="623.50">&lt;core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (44,132,396 samples, 4.41%)</title><rect x="10.4208%" y="597" width="4.4088%" height="15" fill="rgb(254,191,54)" fg:x="104312936" fg:w="44132396"/><text x="10.6708%" y="607.50">core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (3,009,027 samples, 0.30%)</title><rect x="14.5291%" y="581" width="0.3006%" height="15" fill="rgb(241,83,37)" fg:x="145436305" fg:w="3009027"/><text x="14.7791%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51,153,459 samples, 5.11%)</title><rect x="10.4208%" y="629" width="5.1102%" height="15" fill="rgb(233,36,39)" fg:x="104312936" fg:w="51153459"/><text x="10.6708%" y="639.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (7,021,063 samples, 0.70%)</title><rect x="14.8297%" y="613" width="0.7014%" height="15" fill="rgb(226,3,54)" fg:x="148445332" fg:w="7021063"/><text x="15.0797%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,015,045 samples, 0.50%)</title><rect x="15.0301%" y="597" width="0.5010%" height="15" fill="rgb(245,192,40)" fg:x="150451350" fg:w="5015045"/><text x="15.2801%" y="607.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::part2::_{{closure}} (5,015,045 samples, 0.50%)</title><rect x="15.0301%" y="581" width="0.5010%" height="15" fill="rgb(238,167,29)" fg:x="150451350" fg:w="5015045"/><text x="15.2801%" y="591.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (5,015,045 samples, 0.50%)</title><rect x="15.0301%" y="565" width="0.5010%" height="15" fill="rgb(232,182,51)" fg:x="150451350" fg:w="5015045"/><text x="15.2801%" y="575.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (5,015,045 samples, 0.50%)</title><rect x="15.0301%" y="549" width="0.5010%" height="15" fill="rgb(231,60,39)" fg:x="150451350" fg:w="5015045"/><text x="15.2801%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (5,015,045 samples, 0.50%)</title><rect x="15.0301%" y="533" width="0.5010%" height="15" fill="rgb(208,69,12)" fg:x="150451350" fg:w="5015045"/><text x="15.2801%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (5,015,045 samples, 0.50%)</title><rect x="15.0301%" y="517" width="0.5010%" height="15" fill="rgb(235,93,37)" fg:x="150451350" fg:w="5015045"/><text x="15.2801%" y="527.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (2,006,018 samples, 0.20%)</title><rect x="15.3307%" y="501" width="0.2004%" height="15" fill="rgb(213,116,39)" fg:x="153460377" fg:w="2006018"/><text x="15.5807%" y="511.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="15.4309%" y="485" width="0.1002%" height="15" fill="rgb(222,207,29)" fg:x="154463386" fg:w="1003009"/><text x="15.6809%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,012,036 samples, 0.40%)</title><rect x="16.3327%" y="549" width="0.4008%" height="15" fill="rgb(206,96,30)" fg:x="163490467" fg:w="4012036"/><text x="16.5827%" y="559.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,012,036 samples, 0.40%)</title><rect x="16.3327%" y="533" width="0.4008%" height="15" fill="rgb(218,138,4)" fg:x="163490467" fg:w="4012036"/><text x="16.5827%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,012,036 samples, 0.40%)</title><rect x="16.3327%" y="517" width="0.4008%" height="15" fill="rgb(250,191,14)" fg:x="163490467" fg:w="4012036"/><text x="16.5827%" y="527.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="16.3327%" y="501" width="0.4008%" height="15" fill="rgb(239,60,40)" fg:x="163490467" fg:w="4012036"/><text x="16.5827%" y="511.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1,003,009 samples, 0.10%)</title><rect x="17.8357%" y="501" width="0.1002%" height="15" fill="rgb(206,27,48)" fg:x="178535602" fg:w="1003009"/><text x="18.0857%" y="511.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,093,279 samples, 3.11%)</title><rect x="15.5311%" y="597" width="3.1062%" height="15" fill="rgb(225,35,8)" fg:x="155466395" fg:w="31093279"/><text x="15.7811%" y="607.50">&lt;co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (31,093,279 samples, 3.11%)</title><rect x="15.5311%" y="581" width="3.1062%" height="15" fill="rgb(250,213,24)" fg:x="155466395" fg:w="31093279"/><text x="15.7811%" y="591.50">cor..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (25,075,225 samples, 2.51%)</title><rect x="16.1323%" y="565" width="2.5050%" height="15" fill="rgb(247,123,22)" fg:x="161484449" fg:w="25075225"/><text x="16.3823%" y="575.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr (19,057,171 samples, 1.90%)</title><rect x="16.7335%" y="549" width="1.9038%" height="15" fill="rgb(231,138,38)" fg:x="167502503" fg:w="19057171"/><text x="16.9835%" y="559.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (18,054,162 samples, 1.80%)</title><rect x="16.8337%" y="533" width="1.8036%" height="15" fill="rgb(231,145,46)" fg:x="168505512" fg:w="18054162"/><text x="17.0837%" y="543.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (13,039,117 samples, 1.30%)</title><rect x="17.3347%" y="517" width="1.3026%" height="15" fill="rgb(251,118,11)" fg:x="173520557" fg:w="13039117"/><text x="17.5847%" y="527.50"></text></g><g><title>core::slice::memchr::memchr_naive (7,021,063 samples, 0.70%)</title><rect x="17.9359%" y="501" width="0.7014%" height="15" fill="rgb(217,147,25)" fg:x="179538611" fg:w="7021063"/><text x="18.1859%" y="511.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (34,102,306 samples, 3.41%)</title><rect x="15.5311%" y="629" width="3.4068%" height="15" fill="rgb(247,81,37)" fg:x="155466395" fg:w="34102306"/><text x="15.7811%" y="639.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,102,306 samples, 3.41%)</title><rect x="15.5311%" y="613" width="3.4068%" height="15" fill="rgb(209,12,38)" fg:x="155466395" fg:w="34102306"/><text x="15.7811%" y="623.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="597" width="0.3006%" height="15" fill="rgb(227,1,9)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="581" width="0.3006%" height="15" fill="rgb(248,47,43)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="591.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="565" width="0.3006%" height="15" fill="rgb(221,10,30)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="575.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="549" width="0.3006%" height="15" fill="rgb(210,229,1)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="533" width="0.3006%" height="15" fill="rgb(222,148,37)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="543.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="517" width="0.3006%" height="15" fill="rgb(234,67,33)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="527.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="501" width="0.3006%" height="15" fill="rgb(247,98,35)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="511.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="485" width="0.3006%" height="15" fill="rgb(247,138,52)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (3,009,027 samples, 0.30%)</title><rect x="18.6373%" y="469" width="0.3006%" height="15" fill="rgb(213,79,30)" fg:x="186559674" fg:w="3009027"/><text x="18.8873%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,003,009 samples, 0.10%)</title><rect x="18.9379%" y="629" width="0.1002%" height="15" fill="rgb(246,177,23)" fg:x="189568701" fg:w="1003009"/><text x="19.1879%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="629" width="0.1002%" height="15" fill="rgb(230,62,27)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="613" width="0.1002%" height="15" fill="rgb(216,154,8)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="597" width="0.1002%" height="15" fill="rgb(244,35,45)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="581" width="0.1002%" height="15" fill="rgb(251,115,12)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="565" width="0.1002%" height="15" fill="rgb(240,54,50)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="549" width="0.1002%" height="15" fill="rgb(233,84,52)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="533" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="517" width="0.1002%" height="15" fill="rgb(249,43,39)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="527.50"></text></g><g><title>__rustc::__rust_alloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="501" width="0.1002%" height="15" fill="rgb(209,38,44)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="511.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="485" width="0.1002%" height="15" fill="rgb(236,212,23)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="495.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="469" width="0.1002%" height="15" fill="rgb(242,79,21)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="479.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="19.0381%" y="453" width="0.1002%" height="15" fill="rgb(211,96,35)" fg:x="190571710" fg:w="1003009"/><text x="19.2881%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="21.0421%" y="613" width="0.3006%" height="15" fill="rgb(253,215,40)" fg:x="210631890" fg:w="3009027"/><text x="21.2921%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="21.1423%" y="597" width="0.2004%" height="15" fill="rgb(211,81,21)" fg:x="211634899" fg:w="2006018"/><text x="21.3923%" y="607.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.10%)</title><rect x="21.2425%" y="581" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="212637908" fg:w="1003009"/><text x="21.4925%" y="591.50"></text></g><g><title>ahash::operations::folded_multiply (9,027,081 samples, 0.90%)</title><rect x="23.0461%" y="453" width="0.9018%" height="15" fill="rgb(235,213,38)" fg:x="230692070" fg:w="9027081"/><text x="23.2961%" y="463.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (12,036,108 samples, 1.20%)</title><rect x="23.0461%" y="469" width="1.2024%" height="15" fill="rgb(237,122,38)" fg:x="230692070" fg:w="12036108"/><text x="23.2961%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.30%)</title><rect x="23.9479%" y="453" width="0.3006%" height="15" fill="rgb(244,218,35)" fg:x="239719151" fg:w="3009027"/><text x="24.1979%" y="463.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (13,039,117 samples, 1.30%)</title><rect x="24.2485%" y="469" width="1.3026%" height="15" fill="rgb(240,68,47)" fg:x="242728178" fg:w="13039117"/><text x="24.4985%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (13,039,117 samples, 1.30%)</title><rect x="24.2485%" y="453" width="1.3026%" height="15" fill="rgb(210,16,53)" fg:x="242728178" fg:w="13039117"/><text x="24.4985%" y="463.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2,006,018 samples, 0.20%)</title><rect x="25.5511%" y="421" width="0.2004%" height="15" fill="rgb(235,124,12)" fg:x="255767295" fg:w="2006018"/><text x="25.8011%" y="431.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2,006,018 samples, 0.20%)</title><rect x="25.5511%" y="405" width="0.2004%" height="15" fill="rgb(224,169,11)" fg:x="255767295" fg:w="2006018"/><text x="25.8011%" y="415.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2,006,018 samples, 0.20%)</title><rect x="25.5511%" y="389" width="0.2004%" height="15" fill="rgb(250,166,2)" fg:x="255767295" fg:w="2006018"/><text x="25.8011%" y="399.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2,006,018 samples, 0.20%)</title><rect x="25.5511%" y="373" width="0.2004%" height="15" fill="rgb(242,216,29)" fg:x="255767295" fg:w="2006018"/><text x="25.8011%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (9,027,081 samples, 0.90%)</title><rect x="25.7515%" y="389" width="0.9018%" height="15" fill="rgb(230,116,27)" fg:x="257773313" fg:w="9027081"/><text x="26.0015%" y="399.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="26.1523%" y="373" width="0.5010%" height="15" fill="rgb(228,99,48)" fg:x="261785349" fg:w="5015045"/><text x="26.4023%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (52,156,468 samples, 5.21%)</title><rect x="23.0461%" y="501" width="5.2104%" height="15" fill="rgb(253,11,6)" fg:x="230692070" fg:w="52156468"/><text x="23.2961%" y="511.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (52,156,468 samples, 5.21%)</title><rect x="23.0461%" y="485" width="5.2104%" height="15" fill="rgb(247,143,39)" fg:x="230692070" fg:w="52156468"/><text x="23.2961%" y="495.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27,081,243 samples, 2.71%)</title><rect x="25.5511%" y="469" width="2.7054%" height="15" fill="rgb(236,97,10)" fg:x="255767295" fg:w="27081243"/><text x="25.8011%" y="479.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (27,081,243 samples, 2.71%)</title><rect x="25.5511%" y="453" width="2.7054%" height="15" fill="rgb(233,208,19)" fg:x="255767295" fg:w="27081243"/><text x="25.8011%" y="463.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (27,081,243 samples, 2.71%)</title><rect x="25.5511%" y="437" width="2.7054%" height="15" fill="rgb(216,164,2)" fg:x="255767295" fg:w="27081243"/><text x="25.8011%" y="447.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (25,075,225 samples, 2.51%)</title><rect x="25.7515%" y="421" width="2.5050%" height="15" fill="rgb(220,129,5)" fg:x="257773313" fg:w="25075225"/><text x="26.0015%" y="431.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (25,075,225 samples, 2.51%)</title><rect x="25.7515%" y="405" width="2.5050%" height="15" fill="rgb(242,17,10)" fg:x="257773313" fg:w="25075225"/><text x="26.0015%" y="415.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (16,048,144 samples, 1.60%)</title><rect x="26.6533%" y="389" width="1.6032%" height="15" fill="rgb(242,107,0)" fg:x="266800394" fg:w="16048144"/><text x="26.9033%" y="399.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 1.40%)</title><rect x="29.1583%" y="453" width="1.4028%" height="15" fill="rgb(251,28,31)" fg:x="291875619" fg:w="14042126"/><text x="29.4083%" y="463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (14,042,126 samples, 1.40%)</title><rect x="29.1583%" y="437" width="1.4028%" height="15" fill="rgb(233,223,10)" fg:x="291875619" fg:w="14042126"/><text x="29.4083%" y="447.50"></text></g><g><title>core::intrinsics::likely (14,042,126 samples, 1.40%)</title><rect x="30.5611%" y="453" width="1.4028%" height="15" fill="rgb(215,21,27)" fg:x="305917745" fg:w="14042126"/><text x="30.8111%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (6,018,054 samples, 0.60%)</title><rect x="31.9639%" y="453" width="0.6012%" height="15" fill="rgb(232,23,21)" fg:x="319959871" fg:w="6018054"/><text x="32.2139%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6,018,054 samples, 0.60%)</title><rect x="31.9639%" y="437" width="0.6012%" height="15" fill="rgb(244,5,23)" fg:x="319959871" fg:w="6018054"/><text x="32.2139%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,018,054 samples, 0.60%)</title><rect x="31.9639%" y="421" width="0.6012%" height="15" fill="rgb(226,81,46)" fg:x="319959871" fg:w="6018054"/><text x="32.2139%" y="431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,012,036 samples, 0.40%)</title><rect x="32.5651%" y="453" width="0.4008%" height="15" fill="rgb(247,70,30)" fg:x="325977925" fg:w="4012036"/><text x="32.8151%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.40%)</title><rect x="32.5651%" y="437" width="0.4008%" height="15" fill="rgb(212,68,19)" fg:x="325977925" fg:w="4012036"/><text x="32.8151%" y="447.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,012,036 samples, 0.40%)</title><rect x="32.9659%" y="453" width="0.4008%" height="15" fill="rgb(240,187,13)" fg:x="329989961" fg:w="4012036"/><text x="33.2159%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (80,240,720 samples, 8.02%)</title><rect x="33.3667%" y="437" width="8.0160%" height="15" fill="rgb(223,113,26)" fg:x="334001997" fg:w="80240720"/><text x="33.6167%" y="447.50">hashbrown::..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (80,240,720 samples, 8.02%)</title><rect x="33.3667%" y="421" width="8.0160%" height="15" fill="rgb(206,192,2)" fg:x="334001997" fg:w="80240720"/><text x="33.6167%" y="431.50">&lt;Q as hashb..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80,240,720 samples, 8.02%)</title><rect x="33.3667%" y="405" width="8.0160%" height="15" fill="rgb(241,108,4)" fg:x="334001997" fg:w="80240720"/><text x="33.6167%" y="415.50">core::cmp::..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (80,240,720 samples, 8.02%)</title><rect x="33.3667%" y="389" width="8.0160%" height="15" fill="rgb(247,173,49)" fg:x="334001997" fg:w="80240720"/><text x="33.6167%" y="399.50">core::array..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (80,240,720 samples, 8.02%)</title><rect x="33.3667%" y="373" width="8.0160%" height="15" fill="rgb(224,114,35)" fg:x="334001997" fg:w="80240720"/><text x="33.6167%" y="383.50">&lt;T as core:..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (15,045,135 samples, 1.50%)</title><rect x="41.3828%" y="437" width="1.5030%" height="15" fill="rgb(245,159,27)" fg:x="414242717" fg:w="15045135"/><text x="41.6328%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (15,045,135 samples, 1.50%)</title><rect x="41.3828%" y="421" width="1.5030%" height="15" fill="rgb(245,172,44)" fg:x="414242717" fg:w="15045135"/><text x="41.6328%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15,045,135 samples, 1.50%)</title><rect x="41.3828%" y="405" width="1.5030%" height="15" fill="rgb(236,23,11)" fg:x="414242717" fg:w="15045135"/><text x="41.6328%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (100,300,900 samples, 10.02%)</title><rect x="33.3667%" y="453" width="10.0200%" height="15" fill="rgb(205,117,38)" fg:x="334001997" fg:w="100300900"/><text x="33.6167%" y="463.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5,015,045 samples, 0.50%)</title><rect x="42.8858%" y="437" width="0.5010%" height="15" fill="rgb(237,72,25)" fg:x="429287852" fg:w="5015045"/><text x="43.1358%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5,015,045 samples, 0.50%)</title><rect x="42.8858%" y="421" width="0.5010%" height="15" fill="rgb(244,70,9)" fg:x="429287852" fg:w="5015045"/><text x="43.1358%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5,015,045 samples, 0.50%)</title><rect x="42.8858%" y="405" width="0.5010%" height="15" fill="rgb(217,125,39)" fg:x="429287852" fg:w="5015045"/><text x="43.1358%" y="415.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (239,719,151 samples, 23.95%)</title><rect x="21.5431%" y="581" width="23.9479%" height="15" fill="rgb(235,36,10)" fg:x="215646935" fg:w="239719151"/><text x="21.7931%" y="591.50">&lt;aoc_2024_megaproject::problems::day5:..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (234,704,106 samples, 23.45%)</title><rect x="22.0441%" y="565" width="23.4469%" height="15" fill="rgb(251,123,47)" fg:x="220661980" fg:w="234704106"/><text x="22.2941%" y="575.50">aoc_2024_megaproject::problems::day5:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (233,701,097 samples, 23.35%)</title><rect x="22.1443%" y="549" width="23.3467%" height="15" fill="rgb(221,13,13)" fg:x="221664989" fg:w="233701097"/><text x="22.3943%" y="559.50">std::collections::hash::map::HashMap&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (233,701,097 samples, 23.35%)</title><rect x="22.1443%" y="533" width="23.3467%" height="15" fill="rgb(238,131,9)" fg:x="221664989" fg:w="233701097"/><text x="22.3943%" y="543.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (233,701,097 samples, 23.35%)</title><rect x="22.1443%" y="517" width="23.3467%" height="15" fill="rgb(211,50,8)" fg:x="221664989" fg:w="233701097"/><text x="22.3943%" y="527.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (172,517,548 samples, 17.23%)</title><rect x="28.2565%" y="501" width="17.2345%" height="15" fill="rgb(245,182,24)" fg:x="282848538" fg:w="172517548"/><text x="28.5065%" y="511.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (172,517,548 samples, 17.23%)</title><rect x="28.2565%" y="485" width="17.2345%" height="15" fill="rgb(242,14,37)" fg:x="282848538" fg:w="172517548"/><text x="28.5065%" y="495.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (172,517,548 samples, 17.23%)</title><rect x="28.2565%" y="469" width="17.2345%" height="15" fill="rgb(246,228,12)" fg:x="282848538" fg:w="172517548"/><text x="28.5065%" y="479.50">hashbrown::raw::RawTableInn..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (21,063,189 samples, 2.10%)</title><rect x="43.3868%" y="453" width="2.1042%" height="15" fill="rgb(213,55,15)" fg:x="434302897" fg:w="21063189"/><text x="43.6368%" y="463.50">h..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (242,728,178 samples, 24.25%)</title><rect x="21.3427%" y="613" width="24.2485%" height="15" fill="rgb(209,9,3)" fg:x="213640917" fg:w="242728178"/><text x="21.5927%" y="623.50">core::cmp::impls::&lt;impl core::cmp::Part..</text></g><g><title>core::cmp::PartialOrd::gt (242,728,178 samples, 24.25%)</title><rect x="21.3427%" y="597" width="24.2485%" height="15" fill="rgb(230,59,30)" fg:x="213640917" fg:w="242728178"/><text x="21.5927%" y="607.50">core::cmp::PartialOrd::gt</text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (1,003,009 samples, 0.10%)</title><rect x="45.4910%" y="581" width="0.1002%" height="15" fill="rgb(209,121,21)" fg:x="455366086" fg:w="1003009"/><text x="45.7410%" y="591.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="47.0942%" y="453" width="0.5010%" height="15" fill="rgb(220,109,13)" fg:x="471414230" fg:w="5015045"/><text x="47.3442%" y="463.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="47.4950%" y="437" width="0.1002%" height="15" fill="rgb(232,18,1)" fg:x="475426266" fg:w="1003009"/><text x="47.7450%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (6,018,054 samples, 0.60%)</title><rect x="47.0942%" y="469" width="0.6012%" height="15" fill="rgb(215,41,42)" fg:x="471414230" fg:w="6018054"/><text x="47.3442%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="47.5952%" y="453" width="0.1002%" height="15" fill="rgb(224,123,36)" fg:x="476429275" fg:w="1003009"/><text x="47.8452%" y="463.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (11,033,099 samples, 1.10%)</title><rect x="47.6954%" y="469" width="1.1022%" height="15" fill="rgb(240,125,3)" fg:x="477432284" fg:w="11033099"/><text x="47.9454%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (11,033,099 samples, 1.10%)</title><rect x="47.6954%" y="453" width="1.1022%" height="15" fill="rgb(205,98,50)" fg:x="477432284" fg:w="11033099"/><text x="47.9454%" y="463.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (11,033,099 samples, 1.10%)</title><rect x="48.7976%" y="389" width="1.1022%" height="15" fill="rgb(205,185,37)" fg:x="488465383" fg:w="11033099"/><text x="49.0476%" y="399.50"></text></g><g><title>ahash::operations::folded_multiply (11,033,099 samples, 1.10%)</title><rect x="48.7976%" y="373" width="1.1022%" height="15" fill="rgb(238,207,15)" fg:x="488465383" fg:w="11033099"/><text x="49.0476%" y="383.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="49.7996%" y="357" width="0.1002%" height="15" fill="rgb(213,199,42)" fg:x="498495473" fg:w="1003009"/><text x="50.0496%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (37,111,333 samples, 3.71%)</title><rect x="47.0942%" y="501" width="3.7074%" height="15" fill="rgb(235,201,11)" fg:x="471414230" fg:w="37111333"/><text x="47.3442%" y="511.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (37,111,333 samples, 3.71%)</title><rect x="47.0942%" y="485" width="3.7074%" height="15" fill="rgb(207,46,11)" fg:x="471414230" fg:w="37111333"/><text x="47.3442%" y="495.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20,060,180 samples, 2.00%)</title><rect x="48.7976%" y="469" width="2.0040%" height="15" fill="rgb(241,35,35)" fg:x="488465383" fg:w="20060180"/><text x="49.0476%" y="479.50">c..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (20,060,180 samples, 2.00%)</title><rect x="48.7976%" y="453" width="2.0040%" height="15" fill="rgb(243,32,47)" fg:x="488465383" fg:w="20060180"/><text x="49.0476%" y="463.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (20,060,180 samples, 2.00%)</title><rect x="48.7976%" y="437" width="2.0040%" height="15" fill="rgb(247,202,23)" fg:x="488465383" fg:w="20060180"/><text x="49.0476%" y="447.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (20,060,180 samples, 2.00%)</title><rect x="48.7976%" y="421" width="2.0040%" height="15" fill="rgb(219,102,11)" fg:x="488465383" fg:w="20060180"/><text x="49.0476%" y="431.50">c..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (20,060,180 samples, 2.00%)</title><rect x="48.7976%" y="405" width="2.0040%" height="15" fill="rgb(243,110,44)" fg:x="488465383" fg:w="20060180"/><text x="49.0476%" y="415.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9,027,081 samples, 0.90%)</title><rect x="49.8998%" y="389" width="0.9018%" height="15" fill="rgb(222,74,54)" fg:x="499498482" fg:w="9027081"/><text x="50.1498%" y="399.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7,021,063 samples, 0.70%)</title><rect x="51.9038%" y="453" width="0.7014%" height="15" fill="rgb(216,99,12)" fg:x="519558662" fg:w="7021063"/><text x="52.1538%" y="463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (7,021,063 samples, 0.70%)</title><rect x="51.9038%" y="437" width="0.7014%" height="15" fill="rgb(226,22,26)" fg:x="519558662" fg:w="7021063"/><text x="52.1538%" y="447.50"></text></g><g><title>core::intrinsics::likely (11,033,099 samples, 1.10%)</title><rect x="52.6052%" y="453" width="1.1022%" height="15" fill="rgb(217,163,10)" fg:x="526579725" fg:w="11033099"/><text x="52.8552%" y="463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (17,051,153 samples, 1.70%)</title><rect x="53.7074%" y="453" width="1.7034%" height="15" fill="rgb(213,25,53)" fg:x="537612824" fg:w="17051153"/><text x="53.9574%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17,051,153 samples, 1.70%)</title><rect x="53.7074%" y="437" width="1.7034%" height="15" fill="rgb(252,105,26)" fg:x="537612824" fg:w="17051153"/><text x="53.9574%" y="447.50"></text></g><g><title>hashbrown::control::tag::Tag::full (3,009,027 samples, 0.30%)</title><rect x="55.4108%" y="453" width="0.3006%" height="15" fill="rgb(220,39,43)" fg:x="554663977" fg:w="3009027"/><text x="55.6608%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (47,141,423 samples, 4.71%)</title><rect x="55.7114%" y="437" width="4.7094%" height="15" fill="rgb(229,68,48)" fg:x="557673004" fg:w="47141423"/><text x="55.9614%" y="447.50">hashb..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (47,141,423 samples, 4.71%)</title><rect x="55.7114%" y="421" width="4.7094%" height="15" fill="rgb(252,8,32)" fg:x="557673004" fg:w="47141423"/><text x="55.9614%" y="431.50">&lt;Q as..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (47,141,423 samples, 4.71%)</title><rect x="55.7114%" y="405" width="4.7094%" height="15" fill="rgb(223,20,43)" fg:x="557673004" fg:w="47141423"/><text x="55.9614%" y="415.50">core:..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (47,141,423 samples, 4.71%)</title><rect x="55.7114%" y="389" width="4.7094%" height="15" fill="rgb(229,81,49)" fg:x="557673004" fg:w="47141423"/><text x="55.9614%" y="399.50">core:..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (47,141,423 samples, 4.71%)</title><rect x="55.7114%" y="373" width="4.7094%" height="15" fill="rgb(236,28,36)" fg:x="557673004" fg:w="47141423"/><text x="55.9614%" y="383.50">&lt;T as..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (14,042,126 samples, 1.40%)</title><rect x="60.4208%" y="437" width="1.4028%" height="15" fill="rgb(249,185,26)" fg:x="604814427" fg:w="14042126"/><text x="60.6708%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (14,042,126 samples, 1.40%)</title><rect x="60.4208%" y="421" width="1.4028%" height="15" fill="rgb(249,174,33)" fg:x="604814427" fg:w="14042126"/><text x="60.6708%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14,042,126 samples, 1.40%)</title><rect x="60.4208%" y="405" width="1.4028%" height="15" fill="rgb(233,201,37)" fg:x="604814427" fg:w="14042126"/><text x="60.6708%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (73,219,657 samples, 7.31%)</title><rect x="55.7114%" y="453" width="7.3146%" height="15" fill="rgb(221,78,26)" fg:x="557673004" fg:w="73219657"/><text x="55.9614%" y="463.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12,036,108 samples, 1.20%)</title><rect x="61.8236%" y="437" width="1.2024%" height="15" fill="rgb(250,127,30)" fg:x="618856553" fg:w="12036108"/><text x="62.0736%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (12,036,108 samples, 1.20%)</title><rect x="61.8236%" y="421" width="1.2024%" height="15" fill="rgb(230,49,44)" fg:x="618856553" fg:w="12036108"/><text x="62.0736%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,036,108 samples, 1.20%)</title><rect x="61.8236%" y="405" width="1.2024%" height="15" fill="rgb(229,67,23)" fg:x="618856553" fg:w="12036108"/><text x="62.0736%" y="415.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::check_valid (453,360,068 samples, 45.29%)</title><rect x="19.1383%" y="629" width="45.2906%" height="15" fill="rgb(249,83,47)" fg:x="191574719" fg:w="453360068"/><text x="19.3883%" y="639.50">aoc_2024_megaproject::problems::day5::check_valid</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (188,565,692 samples, 18.84%)</title><rect x="45.5912%" y="613" width="18.8377%" height="15" fill="rgb(215,43,3)" fg:x="456369095" fg:w="188565692"/><text x="45.8412%" y="623.50">core::cmp::impls::&lt;impl core:..</text></g><g><title>core::cmp::PartialOrd::lt (188,565,692 samples, 18.84%)</title><rect x="45.5912%" y="597" width="18.8377%" height="15" fill="rgb(238,154,13)" fg:x="456369095" fg:w="188565692"/><text x="45.8412%" y="607.50">core::cmp::PartialOrd::lt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (186,559,674 samples, 18.64%)</title><rect x="45.7916%" y="581" width="18.6373%" height="15" fill="rgb(219,56,2)" fg:x="458375113" fg:w="186559674"/><text x="46.0416%" y="591.50">&lt;aoc_2024_megaproject::proble..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (185,556,665 samples, 18.54%)</title><rect x="45.8918%" y="565" width="18.5371%" height="15" fill="rgb(233,0,4)" fg:x="459378122" fg:w="185556665"/><text x="46.1418%" y="575.50">aoc_2024_megaproject::problem..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (184,553,656 samples, 18.44%)</title><rect x="45.9920%" y="549" width="18.4369%" height="15" fill="rgb(235,30,7)" fg:x="460381131" fg:w="184553656"/><text x="46.2420%" y="559.50">std::collections::hash::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (184,553,656 samples, 18.44%)</title><rect x="45.9920%" y="533" width="18.4369%" height="15" fill="rgb(250,79,13)" fg:x="460381131" fg:w="184553656"/><text x="46.2420%" y="543.50">hashbrown::map::HashMap&lt;K,V,S..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (184,553,656 samples, 18.44%)</title><rect x="45.9920%" y="517" width="18.4369%" height="15" fill="rgb(211,146,34)" fg:x="460381131" fg:w="184553656"/><text x="46.2420%" y="527.50">hashbrown::map::HashMap&lt;K,V,S..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (136,409,224 samples, 13.63%)</title><rect x="50.8016%" y="501" width="13.6273%" height="15" fill="rgb(228,22,38)" fg:x="508525563" fg:w="136409224"/><text x="51.0516%" y="511.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (136,409,224 samples, 13.63%)</title><rect x="50.8016%" y="485" width="13.6273%" height="15" fill="rgb(235,168,5)" fg:x="508525563" fg:w="136409224"/><text x="51.0516%" y="495.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (136,409,224 samples, 13.63%)</title><rect x="50.8016%" y="469" width="13.6273%" height="15" fill="rgb(221,155,16)" fg:x="508525563" fg:w="136409224"/><text x="51.0516%" y="479.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (14,042,126 samples, 1.40%)</title><rect x="63.0261%" y="453" width="1.4028%" height="15" fill="rgb(215,215,53)" fg:x="630892661" fg:w="14042126"/><text x="63.2761%" y="463.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="66.8337%" y="469" width="0.5010%" height="15" fill="rgb(223,4,10)" fg:x="669007003" fg:w="5015045"/><text x="67.0837%" y="479.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4,012,036 samples, 0.40%)</title><rect x="66.9339%" y="453" width="0.4008%" height="15" fill="rgb(234,103,6)" fg:x="670010012" fg:w="4012036"/><text x="67.1839%" y="463.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (20,060,180 samples, 2.00%)</title><rect x="66.8337%" y="485" width="2.0040%" height="15" fill="rgb(227,97,0)" fg:x="669007003" fg:w="20060180"/><text x="67.0837%" y="495.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15,045,135 samples, 1.50%)</title><rect x="67.3347%" y="469" width="1.5030%" height="15" fill="rgb(234,150,53)" fg:x="674022048" fg:w="15045135"/><text x="67.5847%" y="479.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,003,009 samples, 0.10%)</title><rect x="68.8377%" y="485" width="0.1002%" height="15" fill="rgb(228,201,54)" fg:x="689067183" fg:w="1003009"/><text x="69.0877%" y="495.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1,003,009 samples, 0.10%)</title><rect x="68.8377%" y="469" width="0.1002%" height="15" fill="rgb(222,22,37)" fg:x="689067183" fg:w="1003009"/><text x="69.0877%" y="479.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (8,024,072 samples, 0.80%)</title><rect x="68.9379%" y="437" width="0.8016%" height="15" fill="rgb(237,53,32)" fg:x="690070192" fg:w="8024072"/><text x="69.1879%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (8,024,072 samples, 0.80%)</title><rect x="68.9379%" y="421" width="0.8016%" height="15" fill="rgb(233,25,53)" fg:x="690070192" fg:w="8024072"/><text x="69.1879%" y="431.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (8,024,072 samples, 0.80%)</title><rect x="68.9379%" y="405" width="0.8016%" height="15" fill="rgb(210,40,34)" fg:x="690070192" fg:w="8024072"/><text x="69.1879%" y="415.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (8,024,072 samples, 0.80%)</title><rect x="68.9379%" y="389" width="0.8016%" height="15" fill="rgb(241,220,44)" fg:x="690070192" fg:w="8024072"/><text x="69.1879%" y="399.50"></text></g><g><title>ahash::operations::folded_multiply (6,018,054 samples, 0.60%)</title><rect x="69.1383%" y="373" width="0.6012%" height="15" fill="rgb(235,28,35)" fg:x="692076210" fg:w="6018054"/><text x="69.3883%" y="383.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (6,018,054 samples, 0.60%)</title><rect x="69.1383%" y="357" width="0.6012%" height="15" fill="rgb(210,56,17)" fg:x="692076210" fg:w="6018054"/><text x="69.3883%" y="367.50"></text></g><g><title>ahash::operations::folded_multiply (2,006,018 samples, 0.20%)</title><rect x="70.3407%" y="389" width="0.2004%" height="15" fill="rgb(224,130,29)" fg:x="704112318" fg:w="2006018"/><text x="70.5907%" y="399.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="70.3407%" y="373" width="0.2004%" height="15" fill="rgb(235,212,8)" fg:x="704112318" fg:w="2006018"/><text x="70.5907%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (12,036,108 samples, 1.20%)</title><rect x="69.7395%" y="405" width="1.2024%" height="15" fill="rgb(223,33,50)" fg:x="698094264" fg:w="12036108"/><text x="69.9895%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,012,036 samples, 0.40%)</title><rect x="70.5411%" y="389" width="0.4008%" height="15" fill="rgb(219,149,13)" fg:x="706118336" fg:w="4012036"/><text x="70.7911%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (45,135,405 samples, 4.51%)</title><rect x="66.8337%" y="517" width="4.5090%" height="15" fill="rgb(250,156,29)" fg:x="669007003" fg:w="45135405"/><text x="67.0837%" y="527.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (45,135,405 samples, 4.51%)</title><rect x="66.8337%" y="501" width="4.5090%" height="15" fill="rgb(216,193,19)" fg:x="669007003" fg:w="45135405"/><text x="67.0837%" y="511.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (24,072,216 samples, 2.40%)</title><rect x="68.9379%" y="485" width="2.4048%" height="15" fill="rgb(216,135,14)" fg:x="690070192" fg:w="24072216"/><text x="69.1879%" y="495.50">co..</text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (24,072,216 samples, 2.40%)</title><rect x="68.9379%" y="469" width="2.4048%" height="15" fill="rgb(241,47,5)" fg:x="690070192" fg:w="24072216"/><text x="69.1879%" y="479.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (24,072,216 samples, 2.40%)</title><rect x="68.9379%" y="453" width="2.4048%" height="15" fill="rgb(233,42,35)" fg:x="690070192" fg:w="24072216"/><text x="69.1879%" y="463.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (16,048,144 samples, 1.60%)</title><rect x="69.7395%" y="437" width="1.6032%" height="15" fill="rgb(231,13,6)" fg:x="698094264" fg:w="16048144"/><text x="69.9895%" y="447.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (16,048,144 samples, 1.60%)</title><rect x="69.7395%" y="421" width="1.6032%" height="15" fill="rgb(207,181,40)" fg:x="698094264" fg:w="16048144"/><text x="69.9895%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4,012,036 samples, 0.40%)</title><rect x="70.9419%" y="405" width="0.4008%" height="15" fill="rgb(254,173,49)" fg:x="710130372" fg:w="4012036"/><text x="71.1919%" y="415.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 1.00%)</title><rect x="72.5451%" y="469" width="1.0020%" height="15" fill="rgb(221,1,38)" fg:x="726178516" fg:w="10030090"/><text x="72.7951%" y="479.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (10,030,090 samples, 1.00%)</title><rect x="72.5451%" y="453" width="1.0020%" height="15" fill="rgb(206,124,46)" fg:x="726178516" fg:w="10030090"/><text x="72.7951%" y="463.50"></text></g><g><title>core::intrinsics::likely (1,003,009 samples, 0.10%)</title><rect x="73.5471%" y="469" width="0.1002%" height="15" fill="rgb(249,21,11)" fg:x="736208606" fg:w="1003009"/><text x="73.7971%" y="479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (3,009,027 samples, 0.30%)</title><rect x="73.6473%" y="469" width="0.3006%" height="15" fill="rgb(222,201,40)" fg:x="737211615" fg:w="3009027"/><text x="73.8973%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,009,027 samples, 0.30%)</title><rect x="73.6473%" y="453" width="0.3006%" height="15" fill="rgb(235,61,29)" fg:x="737211615" fg:w="3009027"/><text x="73.8973%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="73.6473%" y="437" width="0.3006%" height="15" fill="rgb(219,207,3)" fg:x="737211615" fg:w="3009027"/><text x="73.8973%" y="447.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (2,006,018 samples, 0.20%)</title><rect x="73.9479%" y="469" width="0.2004%" height="15" fill="rgb(222,56,46)" fg:x="740220642" fg:w="2006018"/><text x="74.1979%" y="479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.20%)</title><rect x="73.9479%" y="453" width="0.2004%" height="15" fill="rgb(239,76,54)" fg:x="740220642" fg:w="2006018"/><text x="74.1979%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.20%)</title><rect x="73.9479%" y="437" width="0.2004%" height="15" fill="rgb(231,124,27)" fg:x="740220642" fg:w="2006018"/><text x="74.1979%" y="447.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (3,009,027 samples, 0.30%)</title><rect x="74.1483%" y="469" width="0.3006%" height="15" fill="rgb(249,195,6)" fg:x="742226660" fg:w="3009027"/><text x="74.3983%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,009,027 samples, 0.30%)</title><rect x="74.1483%" y="453" width="0.3006%" height="15" fill="rgb(237,174,47)" fg:x="742226660" fg:w="3009027"/><text x="74.3983%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (46,138,414 samples, 4.61%)</title><rect x="74.4489%" y="453" width="4.6092%" height="15" fill="rgb(206,201,31)" fg:x="745235687" fg:w="46138414"/><text x="74.6989%" y="463.50">hashb..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (46,138,414 samples, 4.61%)</title><rect x="74.4489%" y="437" width="4.6092%" height="15" fill="rgb(231,57,52)" fg:x="745235687" fg:w="46138414"/><text x="74.6989%" y="447.50">&lt;Q as..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (46,138,414 samples, 4.61%)</title><rect x="74.4489%" y="421" width="4.6092%" height="15" fill="rgb(248,177,22)" fg:x="745235687" fg:w="46138414"/><text x="74.6989%" y="431.50">core:..</text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (46,138,414 samples, 4.61%)</title><rect x="74.4489%" y="405" width="4.6092%" height="15" fill="rgb(215,211,37)" fg:x="745235687" fg:w="46138414"/><text x="74.6989%" y="415.50">core:..</text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (46,138,414 samples, 4.61%)</title><rect x="74.4489%" y="389" width="4.6092%" height="15" fill="rgb(241,128,51)" fg:x="745235687" fg:w="46138414"/><text x="74.6989%" y="399.50">&lt;T as..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (8,024,072 samples, 0.80%)</title><rect x="79.0581%" y="453" width="0.8016%" height="15" fill="rgb(227,165,31)" fg:x="791374101" fg:w="8024072"/><text x="79.3081%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8,024,072 samples, 0.80%)</title><rect x="79.0581%" y="437" width="0.8016%" height="15" fill="rgb(228,167,24)" fg:x="791374101" fg:w="8024072"/><text x="79.3081%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8,024,072 samples, 0.80%)</title><rect x="79.0581%" y="421" width="0.8016%" height="15" fill="rgb(228,143,12)" fg:x="791374101" fg:w="8024072"/><text x="79.3081%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (57,171,513 samples, 5.71%)</title><rect x="74.4489%" y="469" width="5.7114%" height="15" fill="rgb(249,149,8)" fg:x="745235687" fg:w="57171513"/><text x="74.6989%" y="479.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3,009,027 samples, 0.30%)</title><rect x="79.8597%" y="453" width="0.3006%" height="15" fill="rgb(243,35,44)" fg:x="799398173" fg:w="3009027"/><text x="80.1097%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,009,027 samples, 0.30%)</title><rect x="79.8597%" y="437" width="0.3006%" height="15" fill="rgb(246,89,9)" fg:x="799398173" fg:w="3009027"/><text x="80.1097%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,009,027 samples, 0.30%)</title><rect x="79.8597%" y="421" width="0.3006%" height="15" fill="rgb(233,213,13)" fg:x="799398173" fg:w="3009027"/><text x="80.1097%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::gt (156,469,404 samples, 15.63%)</title><rect x="65.6313%" y="613" width="15.6313%" height="15" fill="rgb(233,141,41)" fg:x="656970895" fg:w="156469404"/><text x="65.8813%" y="623.50">core::cmp::PartialOrd::gt</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::PageNum as core::cmp::PartialOrd&gt;::partial_cmp (156,469,404 samples, 15.63%)</title><rect x="65.6313%" y="597" width="15.6313%" height="15" fill="rgb(239,167,4)" fg:x="656970895" fg:w="156469404"/><text x="65.8813%" y="607.50">&lt;aoc_2024_megaproject::p..</text></g><g><title>aoc_2024_megaproject::problems::day5::PageNum::compare_bool (155,466,395 samples, 15.53%)</title><rect x="65.7315%" y="581" width="15.5311%" height="15" fill="rgb(209,217,16)" fg:x="657973904" fg:w="155466395"/><text x="65.9815%" y="591.50">aoc_2024_megaproject::pr..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (148,445,332 samples, 14.83%)</title><rect x="66.4329%" y="565" width="14.8297%" height="15" fill="rgb(219,88,35)" fg:x="664994967" fg:w="148445332"/><text x="66.6829%" y="575.50">std::collections::hash:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (148,445,332 samples, 14.83%)</title><rect x="66.4329%" y="549" width="14.8297%" height="15" fill="rgb(220,193,23)" fg:x="664994967" fg:w="148445332"/><text x="66.6829%" y="559.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (148,445,332 samples, 14.83%)</title><rect x="66.4329%" y="533" width="14.8297%" height="15" fill="rgb(230,90,52)" fg:x="664994967" fg:w="148445332"/><text x="66.6829%" y="543.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (99,297,891 samples, 9.92%)</title><rect x="71.3427%" y="517" width="9.9198%" height="15" fill="rgb(252,106,19)" fg:x="714142408" fg:w="99297891"/><text x="71.5927%" y="527.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (99,297,891 samples, 9.92%)</title><rect x="71.3427%" y="501" width="9.9198%" height="15" fill="rgb(206,74,20)" fg:x="714142408" fg:w="99297891"/><text x="71.5927%" y="511.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (99,297,891 samples, 9.92%)</title><rect x="71.3427%" y="485" width="9.9198%" height="15" fill="rgb(230,138,44)" fg:x="714142408" fg:w="99297891"/><text x="71.5927%" y="495.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (11,033,099 samples, 1.10%)</title><rect x="80.1603%" y="469" width="1.1022%" height="15" fill="rgb(235,182,43)" fg:x="802407200" fg:w="11033099"/><text x="80.4103%" y="479.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="81.4629%" y="581" width="0.1002%" height="15" fill="rgb(242,16,51)" fg:x="815446317" fg:w="1003009"/><text x="81.7129%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="81.4629%" y="565" width="0.1002%" height="15" fill="rgb(248,9,4)" fg:x="815446317" fg:w="1003009"/><text x="81.7129%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,012,036 samples, 0.40%)</title><rect x="81.2625%" y="613" width="0.4008%" height="15" fill="rgb(210,31,22)" fg:x="813440299" fg:w="4012036"/><text x="81.5125%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,012,036 samples, 0.40%)</title><rect x="81.2625%" y="597" width="0.4008%" height="15" fill="rgb(239,54,39)" fg:x="813440299" fg:w="4012036"/><text x="81.5125%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="81.5631%" y="581" width="0.1002%" height="15" fill="rgb(230,99,41)" fg:x="816449326" fg:w="1003009"/><text x="81.8131%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,009,027 samples, 0.30%)</title><rect x="82.6653%" y="597" width="0.3006%" height="15" fill="rgb(253,106,12)" fg:x="827482425" fg:w="3009027"/><text x="82.9153%" y="607.50"></text></g><g><title>core::intrinsics::copy (11,033,099 samples, 1.10%)</title><rect x="83.0661%" y="565" width="1.1022%" height="15" fill="rgb(213,46,41)" fg:x="831494461" fg:w="11033099"/><text x="83.3161%" y="575.50"></text></g><g><title>[libc.so.6] (10,030,090 samples, 1.00%)</title><rect x="83.1663%" y="549" width="1.0020%" height="15" fill="rgb(215,133,35)" fg:x="832497470" fg:w="10030090"/><text x="83.4163%" y="559.50"></text></g><g><title>aoc_2024_megaproject::problems::day5::sort_with_partialord (198,595,782 samples, 19.84%)</title><rect x="64.4289%" y="629" width="19.8397%" height="15" fill="rgb(213,28,5)" fg:x="644934787" fg:w="198595782"/><text x="64.6789%" y="639.50">aoc_2024_megaproject::problems:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::rotate_right (26,078,234 samples, 2.61%)</title><rect x="81.6633%" y="613" width="2.6052%" height="15" fill="rgb(215,77,49)" fg:x="817452335" fg:w="26078234"/><text x="81.9133%" y="623.50">co..</text></g><g><title>core::slice::rotate::ptr_rotate (13,039,117 samples, 1.30%)</title><rect x="82.9659%" y="597" width="1.3026%" height="15" fill="rgb(248,100,22)" fg:x="830491452" fg:w="13039117"/><text x="83.2159%" y="607.50"></text></g><g><title>core::slice::rotate::ptr_rotate_memmove (13,039,117 samples, 1.30%)</title><rect x="82.9659%" y="581" width="1.3026%" height="15" fill="rgb(208,67,9)" fg:x="830491452" fg:w="13039117"/><text x="83.2159%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="84.1683%" y="565" width="0.1002%" height="15" fill="rgb(219,133,21)" fg:x="842527560" fg:w="1003009"/><text x="84.4183%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="85.9719%" y="517" width="0.8016%" height="15" fill="rgb(246,46,29)" fg:x="860581722" fg:w="8024072"/><text x="86.2219%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,024,072 samples, 0.80%)</title><rect x="85.9719%" y="501" width="0.8016%" height="15" fill="rgb(246,185,52)" fg:x="860581722" fg:w="8024072"/><text x="86.2219%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,024,072 samples, 0.80%)</title><rect x="85.9719%" y="485" width="0.8016%" height="15" fill="rgb(252,136,11)" fg:x="860581722" fg:w="8024072"/><text x="86.2219%" y="495.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="86.3727%" y="469" width="0.4008%" height="15" fill="rgb(219,138,53)" fg:x="864593758" fg:w="4012036"/><text x="86.6227%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3,009,027 samples, 0.30%)</title><rect x="86.7735%" y="517" width="0.3006%" height="15" fill="rgb(211,51,23)" fg:x="868605794" fg:w="3009027"/><text x="87.0235%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3,009,027 samples, 0.30%)</title><rect x="86.7735%" y="501" width="0.3006%" height="15" fill="rgb(247,221,28)" fg:x="868605794" fg:w="3009027"/><text x="87.0235%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (3,009,027 samples, 0.30%)</title><rect x="86.7735%" y="485" width="0.3006%" height="15" fill="rgb(251,222,45)" fg:x="868605794" fg:w="3009027"/><text x="87.0235%" y="495.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 0.10%)</title><rect x="87.9760%" y="469" width="0.1002%" height="15" fill="rgb(217,162,53)" fg:x="880641902" fg:w="1003009"/><text x="88.2260%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (46,138,414 samples, 4.61%)</title><rect x="84.2685%" y="629" width="4.6092%" height="15" fill="rgb(229,93,14)" fg:x="843530569" fg:w="46138414"/><text x="84.5185%" y="639.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (46,138,414 samples, 4.61%)</title><rect x="84.2685%" y="613" width="4.6092%" height="15" fill="rgb(209,67,49)" fg:x="843530569" fg:w="46138414"/><text x="84.5185%" y="623.50">core:..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (46,138,414 samples, 4.61%)</title><rect x="84.2685%" y="597" width="4.6092%" height="15" fill="rgb(213,87,29)" fg:x="843530569" fg:w="46138414"/><text x="84.5185%" y="607.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46,138,414 samples, 4.61%)</title><rect x="84.2685%" y="581" width="4.6092%" height="15" fill="rgb(205,151,52)" fg:x="843530569" fg:w="46138414"/><text x="84.5185%" y="591.50">&lt;core..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (46,138,414 samples, 4.61%)</title><rect x="84.2685%" y="565" width="4.6092%" height="15" fill="rgb(253,215,39)" fg:x="843530569" fg:w="46138414"/><text x="84.5185%" y="575.50">&lt;core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (46,138,414 samples, 4.61%)</title><rect x="84.2685%" y="549" width="4.6092%" height="15" fill="rgb(221,220,41)" fg:x="843530569" fg:w="46138414"/><text x="84.5185%" y="559.50">core:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (32,096,288 samples, 3.21%)</title><rect x="85.6713%" y="533" width="3.2064%" height="15" fill="rgb(218,133,21)" fg:x="857572695" fg:w="32096288"/><text x="85.9213%" y="543.50">&lt;co..</text></g><g><title>core::slice::memchr::memchr (18,054,162 samples, 1.80%)</title><rect x="87.0741%" y="517" width="1.8036%" height="15" fill="rgb(221,193,43)" fg:x="871614821" fg:w="18054162"/><text x="87.3241%" y="527.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (18,054,162 samples, 1.80%)</title><rect x="87.0741%" y="501" width="1.8036%" height="15" fill="rgb(240,128,52)" fg:x="871614821" fg:w="18054162"/><text x="87.3241%" y="511.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (14,042,126 samples, 1.40%)</title><rect x="87.4749%" y="485" width="1.4028%" height="15" fill="rgb(253,114,12)" fg:x="875626857" fg:w="14042126"/><text x="87.7249%" y="495.50"></text></g><g><title>core::slice::memchr::memchr_naive (8,024,072 samples, 0.80%)</title><rect x="88.0762%" y="469" width="0.8016%" height="15" fill="rgb(215,223,47)" fg:x="881644911" fg:w="8024072"/><text x="88.3262%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1,003,009 samples, 0.10%)</title><rect x="88.8778%" y="629" width="0.1002%" height="15" fill="rgb(248,225,23)" fg:x="889668983" fg:w="1003009"/><text x="89.1278%" y="639.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (1,003,009 samples, 0.10%)</title><rect x="88.8778%" y="613" width="0.1002%" height="15" fill="rgb(250,108,0)" fg:x="889668983" fg:w="1003009"/><text x="89.1278%" y="623.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,012,036 samples, 0.40%)</title><rect x="93.1864%" y="565" width="0.4008%" height="15" fill="rgb(228,208,7)" fg:x="932798370" fg:w="4012036"/><text x="93.4364%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,012,036 samples, 0.40%)</title><rect x="93.1864%" y="549" width="0.4008%" height="15" fill="rgb(244,45,10)" fg:x="932798370" fg:w="4012036"/><text x="93.4364%" y="559.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="93.3868%" y="533" width="0.2004%" height="15" fill="rgb(207,125,25)" fg:x="934804388" fg:w="2006018"/><text x="93.6368%" y="543.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (2,006,018 samples, 0.20%)</title><rect x="93.5872%" y="565" width="0.2004%" height="15" fill="rgb(210,195,18)" fg:x="936810406" fg:w="2006018"/><text x="93.8372%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,006,018 samples, 0.20%)</title><rect x="93.5872%" y="549" width="0.2004%" height="15" fill="rgb(249,80,12)" fg:x="936810406" fg:w="2006018"/><text x="93.8372%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (49,147,441 samples, 4.91%)</title><rect x="88.9780%" y="629" width="4.9098%" height="15" fill="rgb(221,65,9)" fg:x="890671992" fg:w="49147441"/><text x="89.2280%" y="639.50">core::..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (16,048,144 samples, 1.60%)</title><rect x="92.2846%" y="613" width="1.6032%" height="15" fill="rgb(235,49,36)" fg:x="923771289" fg:w="16048144"/><text x="92.5346%" y="623.50"></text></g><g><title>core::str::pattern::StrSearcher::new (16,048,144 samples, 1.60%)</title><rect x="92.2846%" y="597" width="1.6032%" height="15" fill="rgb(225,32,20)" fg:x="923771289" fg:w="16048144"/><text x="92.5346%" y="607.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (10,030,090 samples, 1.00%)</title><rect x="92.8858%" y="581" width="1.0020%" height="15" fill="rgb(215,141,46)" fg:x="929789343" fg:w="10030090"/><text x="93.1358%" y="591.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1,003,009 samples, 0.10%)</title><rect x="93.7876%" y="565" width="0.1002%" height="15" fill="rgb(250,160,47)" fg:x="938816424" fg:w="1003009"/><text x="94.0376%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,003,009 samples, 0.10%)</title><rect x="93.7876%" y="549" width="0.1002%" height="15" fill="rgb(216,222,40)" fg:x="938816424" fg:w="1003009"/><text x="94.0376%" y="559.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,003,009 samples, 0.10%)</title><rect x="93.7876%" y="533" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="938816424" fg:w="1003009"/><text x="94.0376%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,003,009 samples, 0.10%)</title><rect x="94.2886%" y="565" width="0.1002%" height="15" fill="rgb(207,178,40)" fg:x="943831469" fg:w="1003009"/><text x="94.5386%" y="575.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 0.50%)</title><rect x="94.3888%" y="549" width="0.5010%" height="15" fill="rgb(221,136,13)" fg:x="944834478" fg:w="5015045"/><text x="94.6388%" y="559.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (5,015,045 samples, 0.50%)</title><rect x="94.3888%" y="533" width="0.5010%" height="15" fill="rgb(249,199,10)" fg:x="944834478" fg:w="5015045"/><text x="94.6388%" y="543.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2,006,018 samples, 0.20%)</title><rect x="94.8898%" y="549" width="0.2004%" height="15" fill="rgb(249,222,13)" fg:x="949849523" fg:w="2006018"/><text x="95.1398%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.20%)</title><rect x="94.8898%" y="533" width="0.2004%" height="15" fill="rgb(244,185,38)" fg:x="949849523" fg:w="2006018"/><text x="95.1398%" y="543.50"></text></g><g><title>hashbrown::control::tag::Tag::full (8,024,072 samples, 0.80%)</title><rect x="95.0902%" y="549" width="0.8016%" height="15" fill="rgb(236,202,9)" fg:x="951855541" fg:w="8024072"/><text x="95.3402%" y="559.50"></text></g><g><title>core::intrinsics::unlikely (1,003,009 samples, 0.10%)</title><rect x="95.8918%" y="533" width="0.1002%" height="15" fill="rgb(250,229,37)" fg:x="959879613" fg:w="1003009"/><text x="96.1418%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (23,069,207 samples, 2.30%)</title><rect x="94.2886%" y="597" width="2.3046%" height="15" fill="rgb(206,174,23)" fg:x="943831469" fg:w="23069207"/><text x="94.5386%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (23,069,207 samples, 2.30%)</title><rect x="94.2886%" y="581" width="2.3046%" height="15" fill="rgb(211,33,43)" fg:x="943831469" fg:w="23069207"/><text x="94.5386%" y="591.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (22,066,198 samples, 2.20%)</title><rect x="94.3888%" y="565" width="2.2044%" height="15" fill="rgb(245,58,50)" fg:x="944834478" fg:w="22066198"/><text x="94.6388%" y="575.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (7,021,063 samples, 0.70%)</title><rect x="95.8918%" y="549" width="0.7014%" height="15" fill="rgb(244,68,36)" fg:x="959879613" fg:w="7021063"/><text x="96.1418%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (6,018,054 samples, 0.60%)</title><rect x="95.9920%" y="533" width="0.6012%" height="15" fill="rgb(232,229,15)" fg:x="960882622" fg:w="6018054"/><text x="96.2420%" y="543.50"></text></g><g><title>hashbrown::control::tag::Tag::is_full (6,018,054 samples, 0.60%)</title><rect x="95.9920%" y="517" width="0.6012%" height="15" fill="rgb(254,30,23)" fg:x="960882622" fg:w="6018054"/><text x="96.2420%" y="527.50"></text></g><g><title>ahash::operations::folded_multiply (4,012,036 samples, 0.40%)</title><rect x="96.5932%" y="549" width="0.4008%" height="15" fill="rgb(235,160,14)" fg:x="966900676" fg:w="4012036"/><text x="96.8432%" y="559.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2,006,018 samples, 0.20%)</title><rect x="96.7936%" y="533" width="0.2004%" height="15" fill="rgb(212,155,44)" fg:x="968906694" fg:w="2006018"/><text x="97.0436%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (9,027,081 samples, 0.90%)</title><rect x="96.5932%" y="565" width="0.9018%" height="15" fill="rgb(226,2,50)" fg:x="966900676" fg:w="9027081"/><text x="96.8432%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.50%)</title><rect x="96.9940%" y="549" width="0.5010%" height="15" fill="rgb(234,177,6)" fg:x="970912712" fg:w="5015045"/><text x="97.2440%" y="559.50"></text></g><g><title>ahash::operations::folded_multiply (5,015,045 samples, 0.50%)</title><rect x="97.8958%" y="469" width="0.5010%" height="15" fill="rgb(217,24,9)" fg:x="979939793" fg:w="5015045"/><text x="98.1458%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (6,018,054 samples, 0.60%)</title><rect x="97.8958%" y="485" width="0.6012%" height="15" fill="rgb(220,13,46)" fg:x="979939793" fg:w="6018054"/><text x="98.1458%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="469" width="0.1002%" height="15" fill="rgb(239,221,27)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (20,060,180 samples, 2.00%)</title><rect x="96.5932%" y="597" width="2.0040%" height="15" fill="rgb(222,198,25)" fg:x="966900676" fg:w="20060180"/><text x="96.8432%" y="607.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (20,060,180 samples, 2.00%)</title><rect x="96.5932%" y="581" width="2.0040%" height="15" fill="rgb(211,99,13)" fg:x="966900676" fg:w="20060180"/><text x="96.8432%" y="591.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11,033,099 samples, 1.10%)</title><rect x="97.4950%" y="565" width="1.1022%" height="15" fill="rgb(232,111,31)" fg:x="975927757" fg:w="11033099"/><text x="97.7450%" y="575.50"></text></g><g><title>core::array::_&lt;impl core::hash::Hash for [T: N]&gt;::hash (11,033,099 samples, 1.10%)</title><rect x="97.4950%" y="549" width="1.1022%" height="15" fill="rgb(245,82,37)" fg:x="975927757" fg:w="11033099"/><text x="97.7450%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11,033,099 samples, 1.10%)</title><rect x="97.4950%" y="533" width="1.1022%" height="15" fill="rgb(227,149,46)" fg:x="975927757" fg:w="11033099"/><text x="97.7450%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash_slice (7,021,063 samples, 0.70%)</title><rect x="97.8958%" y="517" width="0.7014%" height="15" fill="rgb(218,36,50)" fg:x="979939793" fg:w="7021063"/><text x="98.1458%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (7,021,063 samples, 0.70%)</title><rect x="97.8958%" y="501" width="0.7014%" height="15" fill="rgb(226,80,48)" fg:x="979939793" fg:w="7021063"/><text x="98.1458%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="485" width="0.1002%" height="15" fill="rgb(238,224,15)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (10,030,090 samples, 1.00%)</title><rect x="98.5972%" y="581" width="1.0020%" height="15" fill="rgb(241,136,10)" fg:x="986960856" fg:w="10030090"/><text x="98.8472%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (10,030,090 samples, 1.00%)</title><rect x="98.5972%" y="565" width="1.0020%" height="15" fill="rgb(208,32,45)" fg:x="986960856" fg:w="10030090"/><text x="98.8472%" y="575.50"></text></g><g><title>core::ptr::write (10,030,090 samples, 1.00%)</title><rect x="98.5972%" y="549" width="1.0020%" height="15" fill="rgb(207,135,9)" fg:x="986960856" fg:w="10030090"/><text x="98.8472%" y="559.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (998,996,964 samples, 99.80%)</title><rect x="0.0000%" y="677" width="99.7996%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="998996964"/><text x="0.2500%" y="687.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2 (998,996,964 samples, 99.80%)</title><rect x="0.0000%" y="661" width="99.7996%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="998996964"/><text x="0.2500%" y="671.50">&lt;aoc_2024_megaproject::problems::day5::Day5 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day5::part2 (998,996,964 samples, 99.80%)</title><rect x="0.0000%" y="645" width="99.7996%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="998996964"/><text x="0.2500%" y="655.50">aoc_2024_megaproject::problems::day5::part2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (59,177,531 samples, 5.91%)</title><rect x="93.8878%" y="629" width="5.9118%" height="15" fill="rgb(234,36,40)" fg:x="939819433" fg:w="59177531"/><text x="94.1378%" y="639.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59,177,531 samples, 5.91%)</title><rect x="93.8878%" y="613" width="5.9118%" height="15" fill="rgb(213,64,8)" fg:x="939819433" fg:w="59177531"/><text x="94.1378%" y="623.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (12,036,108 samples, 1.20%)</title><rect x="98.5972%" y="597" width="1.2024%" height="15" fill="rgb(210,75,36)" fg:x="986960856" fg:w="12036108"/><text x="98.8472%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2,006,018 samples, 0.20%)</title><rect x="99.5992%" y="581" width="0.2004%" height="15" fill="rgb(229,88,21)" fg:x="996990946" fg:w="2006018"/><text x="99.8492%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (2,006,018 samples, 0.20%)</title><rect x="99.5992%" y="565" width="0.2004%" height="15" fill="rgb(252,204,47)" fg:x="996990946" fg:w="2006018"/><text x="99.8492%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2,006,018 samples, 0.20%)</title><rect x="99.5992%" y="549" width="0.2004%" height="15" fill="rgb(208,77,27)" fg:x="996990946" fg:w="2006018"/><text x="99.8492%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="99.5992%" y="533" width="0.2004%" height="15" fill="rgb(221,76,26)" fg:x="996990946" fg:w="2006018"/><text x="99.8492%" y="543.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="677" width="0.1002%" height="15" fill="rgb(225,139,18)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="687.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="661" width="0.1002%" height="15" fill="rgb(230,137,11)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="671.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="645" width="0.1002%" height="15" fill="rgb(212,28,1)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="655.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="629" width="0.1002%" height="15" fill="rgb(248,164,17)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="639.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="613" width="0.1002%" height="15" fill="rgb(222,171,42)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="623.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="597" width="0.1002%" height="15" fill="rgb(243,84,45)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="607.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="581" width="0.1002%" height="15" fill="rgb(252,49,23)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="591.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="565" width="0.1002%" height="15" fill="rgb(215,19,7)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="549" width="0.1002%" height="15" fill="rgb(238,81,41)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="533" width="0.1002%" height="15" fill="rgb(210,199,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="517" width="0.1002%" height="15" fill="rgb(244,192,49)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="501" width="0.1002%" height="15" fill="rgb(226,211,11)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="485" width="0.1002%" height="15" fill="rgb(236,162,54)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="469" width="0.1002%" height="15" fill="rgb(220,229,9)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="453" width="0.1002%" height="15" fill="rgb(250,87,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="437" width="0.1002%" height="15" fill="rgb(239,43,17)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="421" width="0.1002%" height="15" fill="rgb(231,177,25)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="405" width="0.1002%" height="15" fill="rgb(219,179,1)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="389" width="0.1002%" height="15" fill="rgb(238,219,53)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="373" width="0.1002%" height="15" fill="rgb(232,167,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="357" width="0.1002%" height="15" fill="rgb(244,19,51)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(224,6,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="325" width="0.1002%" height="15" fill="rgb(224,145,5)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="309" width="0.1002%" height="15" fill="rgb(234,130,49)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="293" width="0.1002%" height="15" fill="rgb(254,6,2)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="277" width="0.1002%" height="15" fill="rgb(208,96,46)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(239,3,39)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(233,210,1)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="229" width="0.1002%" height="15" fill="rgb(244,137,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="239.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="213" width="0.1002%" height="15" fill="rgb(240,136,2)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="223.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="197" width="0.1002%" height="15" fill="rgb(239,18,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="181" width="0.1002%" height="15" fill="rgb(218,185,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="191.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="165" width="0.1002%" height="15" fill="rgb(225,218,4)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="149" width="0.1002%" height="15" fill="rgb(230,182,32)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="133" width="0.1002%" height="15" fill="rgb(242,56,43)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="117" width="0.1002%" height="15" fill="rgb(233,99,24)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="101" width="0.1002%" height="15" fill="rgb(234,209,42)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="85" width="0.1002%" height="15" fill="rgb(227,7,12)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="69" width="0.1002%" height="15" fill="rgb(245,203,43)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="53" width="0.1002%" height="15" fill="rgb(238,205,33)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="37" width="0.1002%" height="15" fill="rgb(231,56,7)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="47.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1007.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="991.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="943.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="751.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="677" width="0.1002%" height="15" fill="rgb(254,28,30)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="687.50"></text></g><g><title>std::env::args_os (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="661" width="0.1002%" height="15" fill="rgb(241,142,54)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="671.50"></text></g><g><title>std::sys::args::unix::args (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="645" width="0.1002%" height="15" fill="rgb(222,85,15)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="629" width="0.1002%" height="15" fill="rgb(210,85,47)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="613" width="0.1002%" height="15" fill="rgb(224,206,25)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="597" width="0.1002%" height="15" fill="rgb(243,201,19)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="581" width="0.1002%" height="15" fill="rgb(236,59,4)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="565" width="0.1002%" height="15" fill="rgb(254,179,45)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="549" width="0.1002%" height="15" fill="rgb(226,14,10)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="533" width="0.1002%" height="15" fill="rgb(244,27,41)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="517" width="0.1002%" height="15" fill="rgb(235,35,32)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="501" width="0.1002%" height="15" fill="rgb(218,68,31)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="485" width="0.1002%" height="15" fill="rgb(207,120,37)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="495.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="469" width="0.1002%" height="15" fill="rgb(227,98,0)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="479.50"></text></g></svg></svg>