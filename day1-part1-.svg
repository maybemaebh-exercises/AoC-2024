<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="999999973"><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (117,352,053 samples, 11.74%)</title><rect x="0.5015%" y="469" width="11.7352%" height="15" fill="rgb(227,0,7)" fg:x="5015045" fg:w="117352053"/><text x="0.7515%" y="479.50">&lt;core::str::iter:..</text></g><g><title>core::str::validations::next_code_point (117,352,053 samples, 11.74%)</title><rect x="0.5015%" y="453" width="11.7352%" height="15" fill="rgb(217,0,24)" fg:x="5015045" fg:w="117352053"/><text x="0.7515%" y="463.50">core::str::valida..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (75,225,675 samples, 7.52%)</title><rect x="4.7141%" y="437" width="7.5226%" height="15" fill="rgb(221,193,54)" fg:x="47141423" fg:w="75225675"/><text x="4.9641%" y="447.50">&lt;core::sli..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (75,225,675 samples, 7.52%)</title><rect x="4.7141%" y="421" width="7.5226%" height="15" fill="rgb(248,212,6)" fg:x="47141423" fg:w="75225675"/><text x="4.9641%" y="431.50">&lt;core::ptr..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (9,027,081 samples, 0.90%)</title><rect x="12.2367%" y="453" width="0.9027%" height="15" fill="rgb(208,68,35)" fg:x="122367098" fg:w="9027081"/><text x="12.4867%" y="463.50"></text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (9,027,081 samples, 0.90%)</title><rect x="12.2367%" y="437" width="0.9027%" height="15" fill="rgb(232,128,0)" fg:x="122367098" fg:w="9027081"/><text x="12.4867%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (151,454,359 samples, 15.15%)</title><rect x="0.5015%" y="549" width="15.1454%" height="15" fill="rgb(207,160,47)" fg:x="5015045" fg:w="151454359"/><text x="0.7515%" y="559.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (151,454,359 samples, 15.15%)</title><rect x="0.5015%" y="533" width="15.1454%" height="15" fill="rgb(228,23,34)" fg:x="5015045" fg:w="151454359"/><text x="0.7515%" y="543.50">core::iter::traits::ite..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (151,454,359 samples, 15.15%)</title><rect x="0.5015%" y="517" width="15.1454%" height="15" fill="rgb(218,30,26)" fg:x="5015045" fg:w="151454359"/><text x="0.7515%" y="527.50">&lt;usize as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (151,454,359 samples, 15.15%)</title><rect x="0.5015%" y="501" width="15.1454%" height="15" fill="rgb(220,122,19)" fg:x="5015045" fg:w="151454359"/><text x="0.7515%" y="511.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (151,454,359 samples, 15.15%)</title><rect x="0.5015%" y="485" width="15.1454%" height="15" fill="rgb(250,228,42)" fg:x="5015045" fg:w="151454359"/><text x="0.7515%" y="495.50">core::iter::traits::ite..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (34,102,306 samples, 3.41%)</title><rect x="12.2367%" y="469" width="3.4102%" height="15" fill="rgb(240,193,28)" fg:x="122367098" fg:w="34102306"/><text x="12.4867%" y="479.50">cor..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (25,075,225 samples, 2.51%)</title><rect x="13.1394%" y="453" width="2.5075%" height="15" fill="rgb(216,20,37)" fg:x="131394179" fg:w="25075225"/><text x="13.3894%" y="463.50">&lt;u..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (56,168,504 samples, 5.62%)</title><rect x="32.9990%" y="389" width="5.6169%" height="15" fill="rgb(206,188,39)" fg:x="329989961" fg:w="56168504"/><text x="33.2490%" y="399.50">&lt;F as c..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (56,168,504 samples, 5.62%)</title><rect x="32.9990%" y="373" width="5.6169%" height="15" fill="rgb(217,207,13)" fg:x="329989961" fg:w="56168504"/><text x="33.2490%" y="383.50">&lt;core::..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (56,168,504 samples, 5.62%)</title><rect x="32.9990%" y="357" width="5.6169%" height="15" fill="rgb(231,73,38)" fg:x="329989961" fg:w="56168504"/><text x="33.2490%" y="367.50">&lt;core::..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (56,168,504 samples, 5.62%)</title><rect x="32.9990%" y="341" width="5.6169%" height="15" fill="rgb(225,20,46)" fg:x="329989961" fg:w="56168504"/><text x="33.2490%" y="351.50">core::c..</text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (385,155,456 samples, 38.52%)</title><rect x="15.6469%" y="533" width="38.5155%" height="15" fill="rgb(210,31,41)" fg:x="156469404" fg:w="385155456"/><text x="15.8969%" y="543.50">&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterat..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (385,155,456 samples, 38.52%)</title><rect x="15.6469%" y="517" width="38.5155%" height="15" fill="rgb(221,200,47)" fg:x="156469404" fg:w="385155456"/><text x="15.8969%" y="527.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::find (385,155,456 samples, 38.52%)</title><rect x="15.6469%" y="501" width="38.5155%" height="15" fill="rgb(226,26,5)" fg:x="156469404" fg:w="385155456"/><text x="15.8969%" y="511.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (381,143,420 samples, 38.11%)</title><rect x="16.0481%" y="485" width="38.1143%" height="15" fill="rgb(249,33,26)" fg:x="160481440" fg:w="381143420"/><text x="16.2981%" y="495.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (296,890,664 samples, 29.69%)</title><rect x="24.4734%" y="469" width="29.6891%" height="15" fill="rgb(235,183,28)" fg:x="244734196" fg:w="296890664"/><text x="24.7234%" y="479.50">&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (296,890,664 samples, 29.69%)</title><rect x="24.4734%" y="453" width="29.6891%" height="15" fill="rgb(221,5,38)" fg:x="244734196" fg:w="296890664"/><text x="24.7234%" y="463.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (211,634,899 samples, 21.16%)</title><rect x="32.9990%" y="437" width="21.1635%" height="15" fill="rgb(247,18,42)" fg:x="329989961" fg:w="211634899"/><text x="33.2490%" y="447.50">&lt;core::str::pattern::CharPredicat..</text></g><g><title>core::str::pattern::Searcher::next_match (211,634,899 samples, 21.16%)</title><rect x="32.9990%" y="421" width="21.1635%" height="15" fill="rgb(241,131,45)" fg:x="329989961" fg:w="211634899"/><text x="33.2490%" y="431.50">core::str::pattern::Searcher::nex..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (211,634,899 samples, 21.16%)</title><rect x="32.9990%" y="405" width="21.1635%" height="15" fill="rgb(249,31,29)" fg:x="329989961" fg:w="211634899"/><text x="33.2490%" y="415.50">&lt;core::str::pattern::MultiCharEqS..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (155,466,395 samples, 15.55%)</title><rect x="38.6158%" y="389" width="15.5466%" height="15" fill="rgb(225,111,53)" fg:x="386158465" fg:w="155466395"/><text x="38.8658%" y="399.50">&lt;core::str::iter::CharIn..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (123,370,107 samples, 12.34%)</title><rect x="41.8255%" y="373" width="12.3370%" height="15" fill="rgb(238,160,17)" fg:x="418254753" fg:w="123370107"/><text x="42.0755%" y="383.50">&lt;core::str::iter::..</text></g><g><title>core::str::validations::next_code_point (123,370,107 samples, 12.34%)</title><rect x="41.8255%" y="357" width="12.3370%" height="15" fill="rgb(214,148,48)" fg:x="418254753" fg:w="123370107"/><text x="42.0755%" y="367.50">core::str::validat..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23,069,207 samples, 2.31%)</title><rect x="51.8556%" y="341" width="2.3069%" height="15" fill="rgb(232,36,49)" fg:x="518555653" fg:w="23069207"/><text x="52.1056%" y="351.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="53.9619%" y="325" width="0.2006%" height="15" fill="rgb(209,103,24)" fg:x="539618842" fg:w="2006018"/><text x="54.2119%" y="335.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (36,108,324 samples, 3.61%)</title><rect x="60.1805%" y="421" width="3.6108%" height="15" fill="rgb(229,88,8)" fg:x="601805400" fg:w="36108324"/><text x="60.4305%" y="431.50">core..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (28,084,252 samples, 2.81%)</title><rect x="60.9829%" y="405" width="2.8084%" height="15" fill="rgb(213,181,19)" fg:x="609829472" fg:w="28084252"/><text x="61.2329%" y="415.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (485,456,356 samples, 48.55%)</title><rect x="15.6469%" y="549" width="48.5456%" height="15" fill="rgb(254,191,54)" fg:x="156469404" fg:w="485456356"/><text x="15.8969%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>core::option::Option&lt;T&gt;::map (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="533" width="10.0301%" height="15" fill="rgb(241,83,37)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="543.50">core::option::O..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="517" width="10.0301%" height="15" fill="rgb(233,36,39)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="527.50">core::ops::func..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="501" width="10.0301%" height="15" fill="rgb(226,3,54)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="511.50">aoc_2024_megapr..</text></g><g><title>core::str::&lt;impl str&gt;::parse (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="485" width="10.0301%" height="15" fill="rgb(245,192,40)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="495.50">core::str::&lt;imp..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="469" width="10.0301%" height="15" fill="rgb(238,167,29)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="479.50">core::num::&lt;imp..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="453" width="10.0301%" height="15" fill="rgb(232,182,51)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="463.50">core::num::&lt;imp..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (100,300,900 samples, 10.03%)</title><rect x="54.1625%" y="437" width="10.0301%" height="15" fill="rgb(231,60,39)" fg:x="541624860" fg:w="100300900"/><text x="54.4125%" y="447.50">core::num::&lt;imp..</text></g><g><title>core::num::can_not_overflow (4,012,036 samples, 0.40%)</title><rect x="63.7914%" y="421" width="0.4012%" height="15" fill="rgb(208,69,12)" fg:x="637913724" fg:w="4012036"/><text x="64.0414%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="533" width="0.1003%" height="15" fill="rgb(235,93,37)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="517" width="0.1003%" height="15" fill="rgb(213,116,39)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="501" width="0.1003%" height="15" fill="rgb(222,207,29)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="485" width="0.1003%" height="15" fill="rgb(206,96,30)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="469" width="0.1003%" height="15" fill="rgb(218,138,4)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="453" width="0.1003%" height="15" fill="rgb(250,191,14)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="437" width="0.1003%" height="15" fill="rgb(239,60,40)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="447.50"></text></g><g><title>realloc (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="421" width="0.1003%" height="15" fill="rgb(206,27,48)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="431.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="405" width="0.1003%" height="15" fill="rgb(225,35,8)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="415.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="389" width="0.1003%" height="15" fill="rgb(250,213,24)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (91,273,819 samples, 9.13%)</title><rect x="64.1926%" y="549" width="9.1274%" height="15" fill="rgb(247,123,22)" fg:x="641925760" fg:w="91273819"/><text x="64.4426%" y="559.50">alloc::vec::V..</text></g><g><title>core::ptr::write (15,045,135 samples, 1.50%)</title><rect x="71.8154%" y="533" width="1.5045%" height="15" fill="rgb(231,138,38)" fg:x="718154444" fg:w="15045135"/><text x="72.0654%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="73.3200%" y="309" width="0.1003%" height="15" fill="rgb(231,145,46)" fg:x="733199579" fg:w="1003009"/><text x="73.5700%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="73.3200%" y="293" width="0.1003%" height="15" fill="rgb(251,118,11)" fg:x="733199579" fg:w="1003009"/><text x="73.5700%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="73.3200%" y="277" width="0.1003%" height="15" fill="rgb(217,147,25)" fg:x="733199579" fg:w="1003009"/><text x="73.5700%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="73.3200%" y="261" width="0.1003%" height="15" fill="rgb(247,81,37)" fg:x="733199579" fg:w="1003009"/><text x="73.5700%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (2,006,018 samples, 0.20%)</title><rect x="73.3200%" y="325" width="0.2006%" height="15" fill="rgb(209,12,38)" fg:x="733199579" fg:w="2006018"/><text x="73.5700%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="73.4203%" y="309" width="0.1003%" height="15" fill="rgb(227,1,9)" fg:x="734202588" fg:w="1003009"/><text x="73.6703%" y="319.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="73.4203%" y="293" width="0.1003%" height="15" fill="rgb(248,47,43)" fg:x="734202588" fg:w="1003009"/><text x="73.6703%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="73.4203%" y="277" width="0.1003%" height="15" fill="rgb(221,10,30)" fg:x="734202588" fg:w="1003009"/><text x="73.6703%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (3,009,027 samples, 0.30%)</title><rect x="73.3200%" y="341" width="0.3009%" height="15" fill="rgb(210,229,1)" fg:x="733199579" fg:w="3009027"/><text x="73.5700%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="73.5206%" y="325" width="0.1003%" height="15" fill="rgb(222,148,37)" fg:x="735205597" fg:w="1003009"/><text x="73.7706%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="73.5206%" y="309" width="0.1003%" height="15" fill="rgb(234,67,33)" fg:x="735205597" fg:w="1003009"/><text x="73.7706%" y="319.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="73.5206%" y="293" width="0.1003%" height="15" fill="rgb(247,98,35)" fg:x="735205597" fg:w="1003009"/><text x="73.7706%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="73.6209%" y="309" width="0.1003%" height="15" fill="rgb(247,138,52)" fg:x="736208606" fg:w="1003009"/><text x="73.8709%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (5,015,045 samples, 0.50%)</title><rect x="73.7212%" y="309" width="0.5015%" height="15" fill="rgb(213,79,30)" fg:x="737211615" fg:w="5015045"/><text x="73.9712%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (5,015,045 samples, 0.50%)</title><rect x="73.7212%" y="293" width="0.5015%" height="15" fill="rgb(246,177,23)" fg:x="737211615" fg:w="5015045"/><text x="73.9712%" y="303.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="73.9218%" y="277" width="0.3009%" height="15" fill="rgb(230,62,27)" fg:x="739217633" fg:w="3009027"/><text x="74.1718%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="73.9218%" y="261" width="0.3009%" height="15" fill="rgb(216,154,8)" fg:x="739217633" fg:w="3009027"/><text x="74.1718%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="74.2227%" y="309" width="0.1003%" height="15" fill="rgb(244,35,45)" fg:x="742226660" fg:w="1003009"/><text x="74.4727%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="74.2227%" y="293" width="0.1003%" height="15" fill="rgb(251,115,12)" fg:x="742226660" fg:w="1003009"/><text x="74.4727%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="74.3230%" y="309" width="0.1003%" height="15" fill="rgb(240,54,50)" fg:x="743229669" fg:w="1003009"/><text x="74.5730%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="74.3230%" y="293" width="0.1003%" height="15" fill="rgb(233,84,52)" fg:x="743229669" fg:w="1003009"/><text x="74.5730%" y="303.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="74.3230%" y="277" width="0.1003%" height="15" fill="rgb(207,117,47)" fg:x="743229669" fg:w="1003009"/><text x="74.5730%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (9,027,081 samples, 0.90%)</title><rect x="73.6209%" y="325" width="0.9027%" height="15" fill="rgb(249,43,39)" fg:x="736208606" fg:w="9027081"/><text x="73.8709%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="74.4233%" y="309" width="0.1003%" height="15" fill="rgb(209,38,44)" fg:x="744232678" fg:w="1003009"/><text x="74.6733%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="74.4233%" y="293" width="0.1003%" height="15" fill="rgb(236,212,23)" fg:x="744232678" fg:w="1003009"/><text x="74.6733%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="74.4233%" y="277" width="0.1003%" height="15" fill="rgb(242,79,21)" fg:x="744232678" fg:w="1003009"/><text x="74.6733%" y="287.50"></text></g><g><title>core::intrinsics::copy (33,099,297 samples, 3.31%)</title><rect x="74.6239%" y="277" width="3.3099%" height="15" fill="rgb(211,96,35)" fg:x="746238696" fg:w="33099297"/><text x="74.8739%" y="287.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (47,141,423 samples, 4.71%)</title><rect x="74.5236%" y="325" width="4.7141%" height="15" fill="rgb(253,215,40)" fg:x="745235687" fg:w="47141423"/><text x="74.7736%" y="335.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (47,141,423 samples, 4.71%)</title><rect x="74.5236%" y="309" width="4.7141%" height="15" fill="rgb(211,81,21)" fg:x="745235687" fg:w="47141423"/><text x="74.7736%" y="319.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (47,141,423 samples, 4.71%)</title><rect x="74.5236%" y="293" width="4.7141%" height="15" fill="rgb(208,190,38)" fg:x="745235687" fg:w="47141423"/><text x="74.7736%" y="303.50">core:..</text></g><g><title>core::ops::function::FnMut::call_mut (13,039,117 samples, 1.30%)</title><rect x="77.9338%" y="277" width="1.3039%" height="15" fill="rgb(235,213,38)" fg:x="779337993" fg:w="13039117"/><text x="78.1838%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (13,039,117 samples, 1.30%)</title><rect x="77.9338%" y="261" width="1.3039%" height="15" fill="rgb(237,122,38)" fg:x="779337993" fg:w="13039117"/><text x="78.1838%" y="271.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (3,009,027 samples, 0.30%)</title><rect x="79.4383%" y="277" width="0.3009%" height="15" fill="rgb(244,218,35)" fg:x="794383128" fg:w="3009027"/><text x="79.6883%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="79.5386%" y="261" width="0.2006%" height="15" fill="rgb(240,68,47)" fg:x="795386137" fg:w="2006018"/><text x="79.7886%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="79.5386%" y="245" width="0.2006%" height="15" fill="rgb(210,16,53)" fg:x="795386137" fg:w="2006018"/><text x="79.7886%" y="255.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (4,012,036 samples, 0.40%)</title><rect x="79.8395%" y="261" width="0.4012%" height="15" fill="rgb(235,124,12)" fg:x="798395164" fg:w="4012036"/><text x="80.0895%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="80.1404%" y="245" width="0.1003%" height="15" fill="rgb(224,169,11)" fg:x="801404191" fg:w="1003009"/><text x="80.3904%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="80.1404%" y="229" width="0.1003%" height="15" fill="rgb(250,166,2)" fg:x="801404191" fg:w="1003009"/><text x="80.3904%" y="239.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (10,030,090 samples, 1.00%)</title><rect x="79.3380%" y="309" width="1.0030%" height="15" fill="rgb(242,216,29)" fg:x="793380119" fg:w="10030090"/><text x="79.5880%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (10,030,090 samples, 1.00%)</title><rect x="79.3380%" y="293" width="1.0030%" height="15" fill="rgb(230,116,27)" fg:x="793380119" fg:w="10030090"/><text x="79.5880%" y="303.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (6,018,054 samples, 0.60%)</title><rect x="79.7392%" y="277" width="0.6018%" height="15" fill="rgb(228,99,48)" fg:x="797392155" fg:w="6018054"/><text x="79.9892%" y="287.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="80.2407%" y="261" width="0.1003%" height="15" fill="rgb(253,11,6)" fg:x="802407200" fg:w="1003009"/><text x="80.4907%" y="271.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="80.2407%" y="245" width="0.1003%" height="15" fill="rgb(247,143,39)" fg:x="802407200" fg:w="1003009"/><text x="80.4907%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="80.4413%" y="293" width="0.2006%" height="15" fill="rgb(236,97,10)" fg:x="804413218" fg:w="2006018"/><text x="80.6913%" y="303.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="80.5416%" y="277" width="0.1003%" height="15" fill="rgb(233,208,19)" fg:x="805416227" fg:w="1003009"/><text x="80.7916%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="80.6419%" y="277" width="0.1003%" height="15" fill="rgb(216,164,2)" fg:x="806419236" fg:w="1003009"/><text x="80.8919%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="80.7422%" y="277" width="0.1003%" height="15" fill="rgb(220,129,5)" fg:x="807422245" fg:w="1003009"/><text x="80.9922%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="80.7422%" y="261" width="0.1003%" height="15" fill="rgb(242,17,10)" fg:x="807422245" fg:w="1003009"/><text x="80.9922%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="80.7422%" y="245" width="0.1003%" height="15" fill="rgb(242,107,0)" fg:x="807422245" fg:w="1003009"/><text x="80.9922%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="80.7422%" y="229" width="0.1003%" height="15" fill="rgb(251,28,31)" fg:x="807422245" fg:w="1003009"/><text x="80.9922%" y="239.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="81.1434%" y="261" width="0.3009%" height="15" fill="rgb(233,223,10)" fg:x="811434281" fg:w="3009027"/><text x="81.3934%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="81.1434%" y="245" width="0.3009%" height="15" fill="rgb(215,21,27)" fg:x="811434281" fg:w="3009027"/><text x="81.3934%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7,021,063 samples, 0.70%)</title><rect x="80.8425%" y="277" width="0.7021%" height="15" fill="rgb(232,23,21)" fg:x="808425254" fg:w="7021063"/><text x="81.0925%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="81.4443%" y="261" width="0.1003%" height="15" fill="rgb(244,5,23)" fg:x="814443308" fg:w="1003009"/><text x="81.6943%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="81.4443%" y="245" width="0.1003%" height="15" fill="rgb(226,81,46)" fg:x="814443308" fg:w="1003009"/><text x="81.6943%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10,030,090 samples, 1.00%)</title><rect x="80.6419%" y="293" width="1.0030%" height="15" fill="rgb(247,70,30)" fg:x="806419236" fg:w="10030090"/><text x="80.8919%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="81.5446%" y="277" width="0.1003%" height="15" fill="rgb(212,68,19)" fg:x="815446317" fg:w="1003009"/><text x="81.7946%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="81.5446%" y="261" width="0.1003%" height="15" fill="rgb(240,187,13)" fg:x="815446317" fg:w="1003009"/><text x="81.7946%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (5,015,045 samples, 0.50%)</title><rect x="81.6449%" y="293" width="0.5015%" height="15" fill="rgb(223,113,26)" fg:x="816449326" fg:w="5015045"/><text x="81.8949%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (5,015,045 samples, 0.50%)</title><rect x="81.6449%" y="277" width="0.5015%" height="15" fill="rgb(206,192,2)" fg:x="816449326" fg:w="5015045"/><text x="81.8949%" y="287.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="82.1464%" y="261" width="0.1003%" height="15" fill="rgb(241,108,4)" fg:x="821464371" fg:w="1003009"/><text x="82.3964%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (5,015,045 samples, 0.50%)</title><rect x="82.1464%" y="293" width="0.5015%" height="15" fill="rgb(247,173,49)" fg:x="821464371" fg:w="5015045"/><text x="82.3964%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (5,015,045 samples, 0.50%)</title><rect x="82.1464%" y="277" width="0.5015%" height="15" fill="rgb(224,114,35)" fg:x="821464371" fg:w="5015045"/><text x="82.3964%" y="287.50"></text></g><g><title>core::ptr::read (4,012,036 samples, 0.40%)</title><rect x="82.2467%" y="261" width="0.4012%" height="15" fill="rgb(245,159,27)" fg:x="822467380" fg:w="4012036"/><text x="82.4967%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="82.6479%" y="261" width="0.1003%" height="15" fill="rgb(245,172,44)" fg:x="826479416" fg:w="1003009"/><text x="82.8979%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (25,075,225 samples, 2.51%)</title><rect x="80.3410%" y="309" width="2.5075%" height="15" fill="rgb(236,23,11)" fg:x="803410209" fg:w="25075225"/><text x="80.5910%" y="319.50">co..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="82.6479%" y="293" width="0.2006%" height="15" fill="rgb(205,117,38)" fg:x="826479416" fg:w="2006018"/><text x="82.8979%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="82.6479%" y="277" width="0.2006%" height="15" fill="rgb(237,72,25)" fg:x="826479416" fg:w="2006018"/><text x="82.8979%" y="287.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="82.7482%" y="261" width="0.1003%" height="15" fill="rgb(244,70,9)" fg:x="827482425" fg:w="1003009"/><text x="82.9982%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="82.8485%" y="293" width="0.1003%" height="15" fill="rgb(217,125,39)" fg:x="828485434" fg:w="1003009"/><text x="83.0985%" y="303.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="82.8485%" y="277" width="0.1003%" height="15" fill="rgb(235,36,10)" fg:x="828485434" fg:w="1003009"/><text x="83.0985%" y="287.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="82.8485%" y="261" width="0.1003%" height="15" fill="rgb(251,123,47)" fg:x="828485434" fg:w="1003009"/><text x="83.0985%" y="271.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="82.9488%" y="277" width="0.1003%" height="15" fill="rgb(221,13,13)" fg:x="829488443" fg:w="1003009"/><text x="83.1988%" y="287.50"></text></g><g><title>core::intrinsics::copy (26,078,234 samples, 2.61%)</title><rect x="83.2497%" y="261" width="2.6078%" height="15" fill="rgb(238,131,9)" fg:x="832497470" fg:w="26078234"/><text x="83.4997%" y="271.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (45,135,405 samples, 4.51%)</title><rect x="82.8485%" y="309" width="4.5135%" height="15" fill="rgb(211,50,8)" fg:x="828485434" fg:w="45135405"/><text x="83.0985%" y="319.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (44,132,396 samples, 4.41%)</title><rect x="82.9488%" y="293" width="4.4132%" height="15" fill="rgb(245,182,24)" fg:x="829488443" fg:w="44132396"/><text x="83.1988%" y="303.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (43,129,387 samples, 4.31%)</title><rect x="83.0491%" y="277" width="4.3129%" height="15" fill="rgb(242,14,37)" fg:x="830491452" fg:w="43129387"/><text x="83.2991%" y="287.50">core:..</text></g><g><title>core::ops::function::FnMut::call_mut (15,045,135 samples, 1.50%)</title><rect x="85.8576%" y="261" width="1.5045%" height="15" fill="rgb(246,228,12)" fg:x="858575704" fg:w="15045135"/><text x="86.1076%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15,045,135 samples, 1.50%)</title><rect x="85.8576%" y="245" width="1.5045%" height="15" fill="rgb(213,55,15)" fg:x="858575704" fg:w="15045135"/><text x="86.1076%" y="255.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (2,006,018 samples, 0.20%)</title><rect x="87.4624%" y="293" width="0.2006%" height="15" fill="rgb(209,9,3)" fg:x="874623848" fg:w="2006018"/><text x="87.7124%" y="303.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (2,006,018 samples, 0.20%)</title><rect x="87.4624%" y="277" width="0.2006%" height="15" fill="rgb(230,59,30)" fg:x="874623848" fg:w="2006018"/><text x="87.7124%" y="287.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="87.6630%" y="293" width="0.2006%" height="15" fill="rgb(209,121,21)" fg:x="876629866" fg:w="2006018"/><text x="87.9130%" y="303.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="87.6630%" y="277" width="0.2006%" height="15" fill="rgb(220,109,13)" fg:x="876629866" fg:w="2006018"/><text x="87.9130%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="87.7633%" y="261" width="0.1003%" height="15" fill="rgb(232,18,1)" fg:x="877632875" fg:w="1003009"/><text x="88.0133%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="88.0642%" y="277" width="0.2006%" height="15" fill="rgb(215,41,42)" fg:x="880641902" fg:w="2006018"/><text x="88.3142%" y="287.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="88.1645%" y="261" width="0.1003%" height="15" fill="rgb(224,123,36)" fg:x="881644911" fg:w="1003009"/><text x="88.4145%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="88.2648%" y="261" width="0.1003%" height="15" fill="rgb(240,125,3)" fg:x="882647920" fg:w="1003009"/><text x="88.5148%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="88.9669%" y="245" width="0.2006%" height="15" fill="rgb(205,98,50)" fg:x="889668983" fg:w="2006018"/><text x="89.2169%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="88.9669%" y="229" width="0.2006%" height="15" fill="rgb(205,185,37)" fg:x="889668983" fg:w="2006018"/><text x="89.2169%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10,030,090 samples, 1.00%)</title><rect x="88.2648%" y="277" width="1.0030%" height="15" fill="rgb(238,207,15)" fg:x="882647920" fg:w="10030090"/><text x="88.5148%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (9,027,081 samples, 0.90%)</title><rect x="88.3651%" y="261" width="0.9027%" height="15" fill="rgb(213,199,42)" fg:x="883650929" fg:w="9027081"/><text x="88.6151%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="89.1675%" y="245" width="0.1003%" height="15" fill="rgb(235,201,11)" fg:x="891675001" fg:w="1003009"/><text x="89.4175%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="89.1675%" y="229" width="0.1003%" height="15" fill="rgb(207,46,11)" fg:x="891675001" fg:w="1003009"/><text x="89.4175%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="89.3681%" y="261" width="0.1003%" height="15" fill="rgb(241,35,35)" fg:x="893681019" fg:w="1003009"/><text x="89.6181%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (5,015,045 samples, 0.50%)</title><rect x="89.2678%" y="277" width="0.5015%" height="15" fill="rgb(243,32,47)" fg:x="892678010" fg:w="5015045"/><text x="89.5178%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,009,027 samples, 0.30%)</title><rect x="89.4684%" y="261" width="0.3009%" height="15" fill="rgb(247,202,23)" fg:x="894684028" fg:w="3009027"/><text x="89.7184%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (21,063,189 samples, 2.11%)</title><rect x="87.8636%" y="293" width="2.1063%" height="15" fill="rgb(219,102,11)" fg:x="878635884" fg:w="21063189"/><text x="88.1136%" y="303.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="89.7693%" y="277" width="0.2006%" height="15" fill="rgb(243,110,44)" fg:x="897693055" fg:w="2006018"/><text x="90.0193%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="89.7693%" y="261" width="0.2006%" height="15" fill="rgb(222,74,54)" fg:x="897693055" fg:w="2006018"/><text x="90.0193%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="89.8696%" y="245" width="0.1003%" height="15" fill="rgb(216,99,12)" fg:x="898696064" fg:w="1003009"/><text x="90.1196%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="89.9699%" y="277" width="0.1003%" height="15" fill="rgb(226,22,26)" fg:x="899699073" fg:w="1003009"/><text x="90.2199%" y="287.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="89.9699%" y="261" width="0.1003%" height="15" fill="rgb(217,163,10)" fg:x="899699073" fg:w="1003009"/><text x="90.2199%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="89.9699%" y="245" width="0.1003%" height="15" fill="rgb(213,25,53)" fg:x="899699073" fg:w="1003009"/><text x="90.2199%" y="255.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="90.1705%" y="261" width="0.1003%" height="15" fill="rgb(252,105,26)" fg:x="901705091" fg:w="1003009"/><text x="90.4205%" y="271.50"></text></g><g><title>core::intrinsics::copy (20,060,180 samples, 2.01%)</title><rect x="90.5717%" y="245" width="2.0060%" height="15" fill="rgb(220,39,43)" fg:x="905717127" fg:w="20060180"/><text x="90.8217%" y="255.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (31,093,279 samples, 3.11%)</title><rect x="89.9699%" y="293" width="3.1093%" height="15" fill="rgb(229,68,48)" fg:x="899699073" fg:w="31093279"/><text x="90.2199%" y="303.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (30,090,270 samples, 3.01%)</title><rect x="90.0702%" y="277" width="3.0090%" height="15" fill="rgb(252,8,32)" fg:x="900702082" fg:w="30090270"/><text x="90.3202%" y="287.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (28,084,252 samples, 2.81%)</title><rect x="90.2708%" y="261" width="2.8084%" height="15" fill="rgb(223,20,43)" fg:x="902708100" fg:w="28084252"/><text x="90.5208%" y="271.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (5,015,045 samples, 0.50%)</title><rect x="92.5777%" y="245" width="0.5015%" height="15" fill="rgb(229,81,49)" fg:x="925777307" fg:w="5015045"/><text x="92.8277%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="92.5777%" y="229" width="0.5015%" height="15" fill="rgb(236,28,36)" fg:x="925777307" fg:w="5015045"/><text x="92.8277%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from_unsigned (1,003,009 samples, 0.10%)</title><rect x="93.0792%" y="261" width="0.1003%" height="15" fill="rgb(249,185,26)" fg:x="930792352" fg:w="1003009"/><text x="93.3292%" y="271.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="93.0792%" y="277" width="0.2006%" height="15" fill="rgb(249,174,33)" fg:x="930792352" fg:w="2006018"/><text x="93.3292%" y="287.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="93.1795%" y="261" width="0.1003%" height="15" fill="rgb(233,201,37)" fg:x="931795361" fg:w="1003009"/><text x="93.4295%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="93.2798%" y="245" width="0.1003%" height="15" fill="rgb(221,78,26)" fg:x="932798370" fg:w="1003009"/><text x="93.5298%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="93.2798%" y="229" width="0.1003%" height="15" fill="rgb(250,127,30)" fg:x="932798370" fg:w="1003009"/><text x="93.5298%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="93.2798%" y="213" width="0.1003%" height="15" fill="rgb(230,49,44)" fg:x="932798370" fg:w="1003009"/><text x="93.5298%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (5,015,045 samples, 0.50%)</title><rect x="93.3801%" y="245" width="0.5015%" height="15" fill="rgb(229,67,23)" fg:x="933801379" fg:w="5015045"/><text x="93.6301%" y="255.50"></text></g><g><title>core::ops::function::FnMut::call_mut (5,015,045 samples, 0.50%)</title><rect x="93.3801%" y="229" width="0.5015%" height="15" fill="rgb(249,83,47)" fg:x="933801379" fg:w="5015045"/><text x="93.6301%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="93.3801%" y="213" width="0.5015%" height="15" fill="rgb(215,43,3)" fg:x="933801379" fg:w="5015045"/><text x="93.6301%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="93.8816%" y="229" width="0.2006%" height="15" fill="rgb(238,154,13)" fg:x="938816424" fg:w="2006018"/><text x="94.1316%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10,030,090 samples, 1.00%)</title><rect x="93.2798%" y="261" width="1.0030%" height="15" fill="rgb(219,56,2)" fg:x="932798370" fg:w="10030090"/><text x="93.5298%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (4,012,036 samples, 0.40%)</title><rect x="93.8816%" y="245" width="0.4012%" height="15" fill="rgb(233,0,4)" fg:x="938816424" fg:w="4012036"/><text x="94.1316%" y="255.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="94.0822%" y="229" width="0.2006%" height="15" fill="rgb(235,30,7)" fg:x="940822442" fg:w="2006018"/><text x="94.3322%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="94.0822%" y="213" width="0.2006%" height="15" fill="rgb(250,79,13)" fg:x="940822442" fg:w="2006018"/><text x="94.3322%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (6,018,054 samples, 0.60%)</title><rect x="94.2828%" y="261" width="0.6018%" height="15" fill="rgb(211,146,34)" fg:x="942828460" fg:w="6018054"/><text x="94.5328%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (6,018,054 samples, 0.60%)</title><rect x="94.2828%" y="245" width="0.6018%" height="15" fill="rgb(228,22,38)" fg:x="942828460" fg:w="6018054"/><text x="94.5328%" y="255.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="94.7844%" y="229" width="0.1003%" height="15" fill="rgb(235,168,5)" fg:x="947843505" fg:w="1003009"/><text x="95.0344%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="94.7844%" y="213" width="0.1003%" height="15" fill="rgb(221,155,16)" fg:x="947843505" fg:w="1003009"/><text x="95.0344%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="94.8847%" y="261" width="0.1003%" height="15" fill="rgb(215,215,53)" fg:x="948846514" fg:w="1003009"/><text x="95.1347%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="94.8847%" y="245" width="0.1003%" height="15" fill="rgb(223,4,10)" fg:x="948846514" fg:w="1003009"/><text x="95.1347%" y="255.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="94.8847%" y="229" width="0.1003%" height="15" fill="rgb(234,103,6)" fg:x="948846514" fg:w="1003009"/><text x="95.1347%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (20,060,180 samples, 2.01%)</title><rect x="93.2798%" y="277" width="2.0060%" height="15" fill="rgb(227,97,0)" fg:x="932798370" fg:w="20060180"/><text x="93.5298%" y="287.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.30%)</title><rect x="94.9850%" y="261" width="0.3009%" height="15" fill="rgb(234,150,53)" fg:x="949849523" fg:w="3009027"/><text x="95.2350%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="94.9850%" y="245" width="0.3009%" height="15" fill="rgb(228,201,54)" fg:x="949849523" fg:w="3009027"/><text x="95.2350%" y="255.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="94.9850%" y="229" width="0.3009%" height="15" fill="rgb(222,22,37)" fg:x="949849523" fg:w="3009027"/><text x="95.2350%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="261" width="0.1003%" height="15" fill="rgb(237,53,32)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="271.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="245" width="0.1003%" height="15" fill="rgb(233,25,53)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="255.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="229" width="0.1003%" height="15" fill="rgb(210,40,34)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="239.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="95.3862%" y="245" width="0.2006%" height="15" fill="rgb(241,220,44)" fg:x="953861559" fg:w="2006018"/><text x="95.6362%" y="255.50"></text></g><g><title>core::intrinsics::copy (11,033,099 samples, 1.10%)</title><rect x="95.7874%" y="229" width="1.1033%" height="15" fill="rgb(235,28,35)" fg:x="957873595" fg:w="11033099"/><text x="96.0374%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (19,057,171 samples, 1.91%)</title><rect x="95.2859%" y="277" width="1.9057%" height="15" fill="rgb(210,56,17)" fg:x="952858550" fg:w="19057171"/><text x="95.5359%" y="287.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (18,054,162 samples, 1.81%)</title><rect x="95.3862%" y="261" width="1.8054%" height="15" fill="rgb(224,130,29)" fg:x="953861559" fg:w="18054162"/><text x="95.6362%" y="271.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (16,048,144 samples, 1.60%)</title><rect x="95.5868%" y="245" width="1.6048%" height="15" fill="rgb(235,212,8)" fg:x="955867577" fg:w="16048144"/><text x="95.8368%" y="255.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="96.8907%" y="229" width="0.3009%" height="15" fill="rgb(223,33,50)" fg:x="968906694" fg:w="3009027"/><text x="97.1407%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="96.8907%" y="213" width="0.3009%" height="15" fill="rgb(219,149,13)" fg:x="968906694" fg:w="3009027"/><text x="97.1407%" y="223.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="97.1916%" y="261" width="0.1003%" height="15" fill="rgb(250,156,29)" fg:x="971915721" fg:w="1003009"/><text x="97.4416%" y="271.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="97.1916%" y="245" width="0.1003%" height="15" fill="rgb(216,193,19)" fg:x="971915721" fg:w="1003009"/><text x="97.4416%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="97.3922%" y="229" width="0.1003%" height="15" fill="rgb(216,135,14)" fg:x="973921739" fg:w="1003009"/><text x="97.6422%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (2,006,018 samples, 0.20%)</title><rect x="97.3922%" y="245" width="0.2006%" height="15" fill="rgb(241,47,5)" fg:x="973921739" fg:w="2006018"/><text x="97.6422%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="97.4925%" y="229" width="0.1003%" height="15" fill="rgb(233,42,35)" fg:x="974924748" fg:w="1003009"/><text x="97.7425%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="97.4925%" y="213" width="0.1003%" height="15" fill="rgb(231,13,6)" fg:x="974924748" fg:w="1003009"/><text x="97.7425%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="97.5928%" y="245" width="0.1003%" height="15" fill="rgb(207,181,40)" fg:x="975927757" fg:w="1003009"/><text x="97.8428%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="97.5928%" y="229" width="0.1003%" height="15" fill="rgb(254,173,49)" fg:x="975927757" fg:w="1003009"/><text x="97.8428%" y="239.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="97.6931%" y="213" width="0.2006%" height="15" fill="rgb(221,1,38)" fg:x="976930766" fg:w="2006018"/><text x="97.9431%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.30%)</title><rect x="97.6931%" y="245" width="0.3009%" height="15" fill="rgb(206,124,46)" fg:x="976930766" fg:w="3009027"/><text x="97.9431%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="97.6931%" y="229" width="0.3009%" height="15" fill="rgb(249,21,11)" fg:x="976930766" fg:w="3009027"/><text x="97.9431%" y="239.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="97.8937%" y="213" width="0.1003%" height="15" fill="rgb(222,201,40)" fg:x="978936784" fg:w="1003009"/><text x="98.1437%" y="223.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (8,024,072 samples, 0.80%)</title><rect x="97.2919%" y="261" width="0.8024%" height="15" fill="rgb(235,61,29)" fg:x="972918730" fg:w="8024072"/><text x="97.5419%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="97.9940%" y="245" width="0.1003%" height="15" fill="rgb(219,207,3)" fg:x="979939793" fg:w="1003009"/><text x="98.2440%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="97.9940%" y="229" width="0.1003%" height="15" fill="rgb(222,56,46)" fg:x="979939793" fg:w="1003009"/><text x="98.2440%" y="239.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="97.9940%" y="213" width="0.1003%" height="15" fill="rgb(239,76,54)" fg:x="979939793" fg:w="1003009"/><text x="98.2440%" y="223.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="98.1946%" y="213" width="0.3009%" height="15" fill="rgb(231,124,27)" fg:x="981945811" fg:w="3009027"/><text x="98.4446%" y="223.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="549" width="25.2758%" height="15" fill="rgb(249,195,6)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="559.50">core::array::_&lt;impl [T: N]&gt;::map</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="533" width="25.2758%" height="15" fill="rgb(237,174,47)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="543.50">core::array::_&lt;impl [T: N]&gt;::try_map</text></g><g><title>core::array::drain::drain_array_with (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="517" width="25.2758%" height="15" fill="rgb(206,201,31)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="527.50">core::array::drain::drain_array_with</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="501" width="25.2758%" height="15" fill="rgb(231,57,52)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="511.50">core::array::_&lt;impl [T: N]&gt;::try_map::_{..</text></g><g><title>core::array::try_from_trusted_iterator (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="485" width="25.2758%" height="15" fill="rgb(248,177,22)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="495.50">core::array::try_from_trusted_iterator</text></g><g><title>core::array::try_from_fn (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="469" width="25.2758%" height="15" fill="rgb(215,211,37)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="479.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="453" width="25.2758%" height="15" fill="rgb(241,128,51)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="463.50">core::array::try_from_fn_erased</text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="437" width="25.2758%" height="15" fill="rgb(227,165,31)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="447.50">core::array::try_from_trusted_iterator::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="421" width="25.2758%" height="15" fill="rgb(228,167,24)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="405" width="25.2758%" height="15" fill="rgb(228,143,12)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="415.50">core::ops::try_trait::NeverShortCircuit&lt;..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="389" width="25.2758%" height="15" fill="rgb(249,149,8)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="399.50">aoc_2024_megaproject::problems::day1::pa..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="373" width="25.2758%" height="15" fill="rgb(243,35,44)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="383.50">core::slice::&lt;impl [T]&gt;::sort_unstable</text></g><g><title>core::slice::sort::unstable::sort (252,758,268 samples, 25.28%)</title><rect x="73.3200%" y="357" width="25.2758%" height="15" fill="rgb(246,89,9)" fg:x="733199579" fg:w="252758268"/><text x="73.5700%" y="367.50">core::slice::sort::unstable::sort</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (249,749,241 samples, 24.97%)</title><rect x="73.6209%" y="341" width="24.9749%" height="15" fill="rgb(233,213,13)" fg:x="736208606" fg:w="249749241"/><text x="73.8709%" y="351.50">core::slice::sort::unstable::quicksort::..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (193,580,737 samples, 19.36%)</title><rect x="79.2377%" y="325" width="19.3581%" height="15" fill="rgb(233,141,41)" fg:x="792377110" fg:w="193580737"/><text x="79.4877%" y="335.50">core::slice::sort::unstable::q..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (112,337,008 samples, 11.23%)</title><rect x="87.3621%" y="309" width="11.2337%" height="15" fill="rgb(239,167,4)" fg:x="873620839" fg:w="112337008"/><text x="87.6121%" y="319.50">core::slice::sort..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (55,165,495 samples, 5.52%)</title><rect x="93.0792%" y="293" width="5.5165%" height="15" fill="rgb(209,217,16)" fg:x="930792352" fg:w="55165495"/><text x="93.3292%" y="303.50">core::s..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (14,042,126 samples, 1.40%)</title><rect x="97.1916%" y="277" width="1.4042%" height="15" fill="rgb(219,88,35)" fg:x="971915721" fg:w="14042126"/><text x="97.4416%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (5,015,045 samples, 0.50%)</title><rect x="98.0943%" y="261" width="0.5015%" height="15" fill="rgb(220,193,23)" fg:x="980942802" fg:w="5015045"/><text x="98.3443%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (5,015,045 samples, 0.50%)</title><rect x="98.0943%" y="245" width="0.5015%" height="15" fill="rgb(230,90,52)" fg:x="980942802" fg:w="5015045"/><text x="98.3443%" y="255.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (5,015,045 samples, 0.50%)</title><rect x="98.0943%" y="229" width="0.5015%" height="15" fill="rgb(252,106,19)" fg:x="980942802" fg:w="5015045"/><text x="98.3443%" y="239.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="98.4955%" y="213" width="0.1003%" height="15" fill="rgb(206,74,20)" fg:x="984954838" fg:w="1003009"/><text x="98.7455%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="98.4955%" y="197" width="0.1003%" height="15" fill="rgb(230,138,44)" fg:x="984954838" fg:w="1003009"/><text x="98.7455%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (7,021,063 samples, 0.70%)</title><rect x="98.5958%" y="549" width="0.7021%" height="15" fill="rgb(235,182,43)" fg:x="985957847" fg:w="7021063"/><text x="98.8458%" y="559.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (993,981,919 samples, 99.40%)</title><rect x="0.0000%" y="597" width="99.3982%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="993981919"/><text x="0.2500%" y="607.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1 (993,981,919 samples, 99.40%)</title><rect x="0.0000%" y="581" width="99.3982%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="993981919"/><text x="0.2500%" y="591.50">&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day1::part1 (993,981,919 samples, 99.40%)</title><rect x="0.0000%" y="565" width="99.3982%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="993981919"/><text x="0.2500%" y="575.50">aoc_2024_megaproject::problems::day1::part1</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;: 2]&gt; (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="549" width="0.1003%" height="15" fill="rgb(239,54,39)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="533" width="0.1003%" height="15" fill="rgb(230,99,41)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="517" width="0.1003%" height="15" fill="rgb(253,106,12)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="501" width="0.1003%" height="15" fill="rgb(213,46,41)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="485" width="0.1003%" height="15" fill="rgb(215,133,35)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="469" width="0.1003%" height="15" fill="rgb(213,28,5)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="453" width="0.1003%" height="15" fill="rgb(215,77,49)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="463.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="437" width="0.1003%" height="15" fill="rgb(248,100,22)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="447.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="421" width="0.1003%" height="15" fill="rgb(208,67,9)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="431.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="405" width="0.1003%" height="15" fill="rgb(219,133,21)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange_weak (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="389" width="0.1003%" height="15" fill="rgb(246,46,29)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1,003,009 samples, 0.10%)</title><rect x="99.2979%" y="373" width="0.1003%" height="15" fill="rgb(246,185,52)" fg:x="992978910" fg:w="1003009"/><text x="99.5479%" y="383.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="565" width="0.1003%" height="15" fill="rgb(252,136,11)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="549" width="0.1003%" height="15" fill="rgb(219,138,53)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="559.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="533" width="0.1003%" height="15" fill="rgb(211,51,23)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="543.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="517" width="0.1003%" height="15" fill="rgb(247,221,28)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="527.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="501" width="0.1003%" height="15" fill="rgb(251,222,45)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="511.50"></text></g><g><title>alloc::string::String::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="485" width="0.1003%" height="15" fill="rgb(217,162,53)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="469" width="0.1003%" height="15" fill="rgb(229,93,14)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (2,006,018 samples, 0.20%)</title><rect x="99.3982%" y="597" width="0.2006%" height="15" fill="rgb(209,67,49)" fg:x="993981919" fg:w="2006018"/><text x="99.6482%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,006,018 samples, 0.20%)</title><rect x="99.3982%" y="581" width="0.2006%" height="15" fill="rgb(213,87,29)" fg:x="993981919" fg:w="2006018"/><text x="99.6482%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="565" width="0.1003%" height="15" fill="rgb(205,151,52)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="575.50"></text></g><g><title>aoc_2024_megaproject::repeat_part::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="549" width="0.1003%" height="15" fill="rgb(253,215,39)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="533" width="0.1003%" height="15" fill="rgb(221,220,41)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="517" width="0.1003%" height="15" fill="rgb(218,133,21)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="501" width="0.1003%" height="15" fill="rgb(221,193,43)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="485" width="0.1003%" height="15" fill="rgb(240,128,52)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="469" width="0.1003%" height="15" fill="rgb(253,114,12)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="453" width="0.1003%" height="15" fill="rgb(215,223,47)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="437" width="0.1003%" height="15" fill="rgb(248,225,23)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="447.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="421" width="0.1003%" height="15" fill="rgb(250,108,0)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="431.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="405" width="0.1003%" height="15" fill="rgb(228,208,7)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="415.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="389" width="0.1003%" height="15" fill="rgb(244,45,10)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="399.50"></text></g><g><title>cfree (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="373" width="0.1003%" height="15" fill="rgb(207,125,25)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="383.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="357" width="0.1003%" height="15" fill="rgb(210,195,18)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="367.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="597" width="0.1003%" height="15" fill="rgb(249,80,12)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="607.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="581" width="0.1003%" height="15" fill="rgb(221,65,9)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="591.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="565" width="0.1003%" height="15" fill="rgb(235,49,36)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="549" width="0.1003%" height="15" fill="rgb(225,32,20)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="533" width="0.1003%" height="15" fill="rgb(215,141,46)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="517" width="0.1003%" height="15" fill="rgb(250,160,47)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="527.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="501" width="0.1003%" height="15" fill="rgb(216,222,40)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="511.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="485" width="0.1003%" height="15" fill="rgb(234,217,39)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="469" width="0.1003%" height="15" fill="rgb(207,178,40)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="453" width="0.1003%" height="15" fill="rgb(221,136,13)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="437" width="0.1003%" height="15" fill="rgb(249,199,10)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="421" width="0.1003%" height="15" fill="rgb(249,222,13)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="405" width="0.1003%" height="15" fill="rgb(244,185,38)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="389" width="0.1003%" height="15" fill="rgb(236,202,9)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="373" width="0.1003%" height="15" fill="rgb(250,229,37)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="357" width="0.1003%" height="15" fill="rgb(206,174,23)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="341" width="0.1003%" height="15" fill="rgb(211,33,43)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="325" width="0.1003%" height="15" fill="rgb(245,58,50)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="309" width="0.1003%" height="15" fill="rgb(244,68,36)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="293" width="0.1003%" height="15" fill="rgb(232,229,15)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="277" width="0.1003%" height="15" fill="rgb(254,30,23)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="261" width="0.1003%" height="15" fill="rgb(235,160,14)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="245" width="0.1003%" height="15" fill="rgb(212,155,44)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="229" width="0.1003%" height="15" fill="rgb(226,2,50)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="213" width="0.1003%" height="15" fill="rgb(234,177,6)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="197" width="0.1003%" height="15" fill="rgb(217,24,9)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="181" width="0.1003%" height="15" fill="rgb(220,13,46)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="165" width="0.1003%" height="15" fill="rgb(239,221,27)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="149" width="0.1003%" height="15" fill="rgb(222,198,25)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="159.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="133" width="0.1003%" height="15" fill="rgb(211,99,13)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="143.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="117" width="0.1003%" height="15" fill="rgb(232,111,31)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="101" width="0.1003%" height="15" fill="rgb(245,82,37)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="111.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="85" width="0.1003%" height="15" fill="rgb(227,149,46)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="69" width="0.1003%" height="15" fill="rgb(218,36,50)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="53" width="0.1003%" height="15" fill="rgb(226,80,48)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="37" width="0.1003%" height="15" fill="rgb(238,224,15)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="549" width="0.1003%" height="15" fill="rgb(241,136,10)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="533" width="0.1003%" height="15" fill="rgb(208,32,45)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="517" width="0.1003%" height="15" fill="rgb(207,135,9)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="501" width="0.1003%" height="15" fill="rgb(206,86,44)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="485" width="0.1003%" height="15" fill="rgb(245,177,15)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="469" width="0.1003%" height="15" fill="rgb(206,64,50)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="453" width="0.1003%" height="15" fill="rgb(234,36,40)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="437" width="0.1003%" height="15" fill="rgb(213,64,8)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="447.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="421" width="0.1003%" height="15" fill="rgb(210,75,36)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="431.50"></text></g><g><title>std::env::args (2,006,018 samples, 0.20%)</title><rect x="99.6991%" y="597" width="0.2006%" height="15" fill="rgb(229,88,21)" fg:x="996990946" fg:w="2006018"/><text x="99.9491%" y="607.50"></text></g><g><title>std::env::args_os (2,006,018 samples, 0.20%)</title><rect x="99.6991%" y="581" width="0.2006%" height="15" fill="rgb(252,204,47)" fg:x="996990946" fg:w="2006018"/><text x="99.9491%" y="591.50"></text></g><g><title>std::sys::args::unix::args (2,006,018 samples, 0.20%)</title><rect x="99.6991%" y="565" width="0.2006%" height="15" fill="rgb(208,77,27)" fg:x="996990946" fg:w="2006018"/><text x="99.9491%" y="575.50"></text></g><g><title>core::ffi::c_str::CStr::from_ptr (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="549" width="0.1003%" height="15" fill="rgb(221,76,26)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="559.50"></text></g><g><title>core::ffi::c_str::strlen (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="533" width="0.1003%" height="15" fill="rgb(225,139,18)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="543.50"></text></g><g><title>core::ffi::c_str::strlen::runtime (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="517" width="0.1003%" height="15" fill="rgb(230,137,11)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="527.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="501" width="0.1003%" height="15" fill="rgb(212,28,1)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="511.50"></text></g><g><title>all (999,999,973 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="927.50"></text></g><g><title>aoc-2024-megapr (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="911.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="895.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="879.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="863.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(244,192,49)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="687.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="671.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="639.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="623.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::time::Instant::elapsed (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="597" width="0.1003%" height="15" fill="rgb(234,130,49)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="607.50"></text></g><g><title>std::time::Instant::now (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="581" width="0.1003%" height="15" fill="rgb(254,6,2)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="591.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="565" width="0.1003%" height="15" fill="rgb(208,96,46)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="575.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="549" width="0.1003%" height="15" fill="rgb(239,3,39)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="559.50"></text></g><g><title>clock_gettime (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="533" width="0.1003%" height="15" fill="rgb(233,210,1)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="543.50"></text></g><g><title>[[vdso]] (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="517" width="0.1003%" height="15" fill="rgb(244,137,37)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="527.50"></text></g></svg></svg>