<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="999999973"><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (129,388,161 samples, 12.94%)</title><rect x="1.3039%" y="645" width="12.9388%" height="15" fill="rgb(227,0,7)" fg:x="13039117" fg:w="129388161"/><text x="1.5539%" y="655.50">&lt;core::str::iter::C..</text></g><g><title>core::str::validations::next_code_point (129,388,161 samples, 12.94%)</title><rect x="1.3039%" y="629" width="12.9388%" height="15" fill="rgb(217,0,24)" fg:x="13039117" fg:w="129388161"/><text x="1.5539%" y="639.50">core::str::validati..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (101,303,909 samples, 10.13%)</title><rect x="4.1123%" y="613" width="10.1304%" height="15" fill="rgb(221,193,54)" fg:x="41123369" fg:w="101303909"/><text x="4.3623%" y="623.50">&lt;core::slice::i..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (101,303,909 samples, 10.13%)</title><rect x="4.1123%" y="597" width="10.1304%" height="15" fill="rgb(248,212,6)" fg:x="41123369" fg:w="101303909"/><text x="4.3623%" y="607.50">&lt;core::ptr::non..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (13,039,117 samples, 1.30%)</title><rect x="14.2427%" y="629" width="1.3039%" height="15" fill="rgb(208,68,35)" fg:x="142427278" fg:w="13039117"/><text x="14.4927%" y="639.50"></text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (13,039,117 samples, 1.30%)</title><rect x="14.2427%" y="613" width="1.3039%" height="15" fill="rgb(232,128,0)" fg:x="142427278" fg:w="13039117"/><text x="14.4927%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (183,550,647 samples, 18.36%)</title><rect x="1.3039%" y="725" width="18.3551%" height="15" fill="rgb(207,160,47)" fg:x="13039117" fg:w="183550647"/><text x="1.5539%" y="735.50">&lt;core::iter::adapters::filter..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (183,550,647 samples, 18.36%)</title><rect x="1.3039%" y="709" width="18.3551%" height="15" fill="rgb(228,23,34)" fg:x="13039117" fg:w="183550647"/><text x="1.5539%" y="719.50">core::iter::traits::iterator:..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (183,550,647 samples, 18.36%)</title><rect x="1.3039%" y="693" width="18.3551%" height="15" fill="rgb(218,30,26)" fg:x="13039117" fg:w="183550647"/><text x="1.5539%" y="703.50">&lt;usize as core::iter::traits:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (183,550,647 samples, 18.36%)</title><rect x="1.3039%" y="677" width="18.3551%" height="15" fill="rgb(220,122,19)" fg:x="13039117" fg:w="183550647"/><text x="1.5539%" y="687.50">&lt;core::iter::adapters::map::M..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (183,550,647 samples, 18.36%)</title><rect x="1.3039%" y="661" width="18.3551%" height="15" fill="rgb(250,228,42)" fg:x="13039117" fg:w="183550647"/><text x="1.5539%" y="671.50">core::iter::traits::iterator:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (54,162,486 samples, 5.42%)</title><rect x="14.2427%" y="645" width="5.4162%" height="15" fill="rgb(240,193,28)" fg:x="142427278" fg:w="54162486"/><text x="14.4927%" y="655.50">core::i..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (41,123,369 samples, 4.11%)</title><rect x="15.5466%" y="629" width="4.1123%" height="15" fill="rgb(216,20,37)" fg:x="155466395" fg:w="41123369"/><text x="15.7966%" y="639.50">&lt;usi..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (102,306,918 samples, 10.23%)</title><rect x="32.5978%" y="565" width="10.2307%" height="15" fill="rgb(206,188,39)" fg:x="325977925" fg:w="102306918"/><text x="32.8478%" y="575.50">&lt;F as core::str..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (102,306,918 samples, 10.23%)</title><rect x="32.5978%" y="549" width="10.2307%" height="15" fill="rgb(217,207,13)" fg:x="325977925" fg:w="102306918"/><text x="32.8478%" y="559.50">&lt;core::str::IsW..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (102,306,918 samples, 10.23%)</title><rect x="32.5978%" y="533" width="10.2307%" height="15" fill="rgb(231,73,38)" fg:x="325977925" fg:w="102306918"/><text x="32.8478%" y="543.50">&lt;core::str::IsW..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (102,306,918 samples, 10.23%)</title><rect x="32.5978%" y="517" width="10.2307%" height="15" fill="rgb(225,20,46)" fg:x="325977925" fg:w="102306918"/><text x="32.8478%" y="527.50">core::char::met..</text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (340,020,051 samples, 34.00%)</title><rect x="19.6590%" y="709" width="34.0020%" height="15" fill="rgb(210,31,41)" fg:x="196589764" fg:w="340020051"/><text x="19.9090%" y="719.50">&lt;core::str::iter::SplitWhitespace as core::iter::traits..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (340,020,051 samples, 34.00%)</title><rect x="19.6590%" y="693" width="34.0020%" height="15" fill="rgb(221,200,47)" fg:x="196589764" fg:w="340020051"/><text x="19.9090%" y="703.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::find (340,020,051 samples, 34.00%)</title><rect x="19.6590%" y="677" width="34.0020%" height="15" fill="rgb(226,26,5)" fg:x="196589764" fg:w="340020051"/><text x="19.9090%" y="687.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (340,020,051 samples, 34.00%)</title><rect x="19.6590%" y="661" width="34.0020%" height="15" fill="rgb(249,33,26)" fg:x="196589764" fg:w="340020051"/><text x="19.9090%" y="671.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (225,677,025 samples, 22.57%)</title><rect x="31.0933%" y="645" width="22.5677%" height="15" fill="rgb(235,183,28)" fg:x="310932790" fg:w="225677025"/><text x="31.3433%" y="655.50">&lt;core::str::iter::Split&lt;P&gt; as core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (225,677,025 samples, 22.57%)</title><rect x="31.0933%" y="629" width="22.5677%" height="15" fill="rgb(221,5,38)" fg:x="310932790" fg:w="225677025"/><text x="31.3433%" y="639.50">core::str::iter::SplitInternal&lt;P&gt;::n..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (210,631,890 samples, 21.06%)</title><rect x="32.5978%" y="613" width="21.0632%" height="15" fill="rgb(247,18,42)" fg:x="325977925" fg:w="210631890"/><text x="32.8478%" y="623.50">&lt;core::str::pattern::CharPredicat..</text></g><g><title>core::str::pattern::Searcher::next_match (210,631,890 samples, 21.06%)</title><rect x="32.5978%" y="597" width="21.0632%" height="15" fill="rgb(241,131,45)" fg:x="325977925" fg:w="210631890"/><text x="32.8478%" y="607.50">core::str::pattern::Searcher::nex..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (210,631,890 samples, 21.06%)</title><rect x="32.5978%" y="581" width="21.0632%" height="15" fill="rgb(249,31,29)" fg:x="325977925" fg:w="210631890"/><text x="32.8478%" y="591.50">&lt;core::str::pattern::MultiCharEqS..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (108,324,972 samples, 10.83%)</title><rect x="42.8285%" y="565" width="10.8325%" height="15" fill="rgb(225,111,53)" fg:x="428284843" fg:w="108324972"/><text x="43.0785%" y="575.50">&lt;core::str::iter..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (93,279,837 samples, 9.33%)</title><rect x="44.3330%" y="549" width="9.3280%" height="15" fill="rgb(238,160,17)" fg:x="443329978" fg:w="93279837"/><text x="44.5830%" y="559.50">&lt;core::str::i..</text></g><g><title>core::str::validations::next_code_point (93,279,837 samples, 9.33%)</title><rect x="44.3330%" y="533" width="9.3280%" height="15" fill="rgb(214,148,48)" fg:x="443329978" fg:w="93279837"/><text x="44.5830%" y="543.50">core::str::va..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.80%)</title><rect x="52.8586%" y="517" width="0.8024%" height="15" fill="rgb(232,36,49)" fg:x="528585743" fg:w="8024072"/><text x="53.1086%" y="527.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (51,153,459 samples, 5.12%)</title><rect x="56.5697%" y="597" width="5.1153%" height="15" fill="rgb(209,103,24)" fg:x="565697076" fg:w="51153459"/><text x="56.8197%" y="607.50">core::..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (46,138,414 samples, 4.61%)</title><rect x="57.0712%" y="581" width="4.6138%" height="15" fill="rgb(229,88,8)" fg:x="570712121" fg:w="46138414"/><text x="57.3212%" y="591.50">core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (421,263,780 samples, 42.13%)</title><rect x="19.6590%" y="725" width="42.1264%" height="15" fill="rgb(213,181,19)" fg:x="196589764" fg:w="421263780"/><text x="19.9090%" y="735.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator:..</text></g><g><title>core::option::Option&lt;T&gt;::map (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="709" width="8.1244%" height="15" fill="rgb(254,191,54)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="719.50">core::optio..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="693" width="8.1244%" height="15" fill="rgb(241,83,37)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="703.50">core::ops::..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="677" width="8.1244%" height="15" fill="rgb(233,36,39)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="687.50">aoc_2024_me..</text></g><g><title>core::str::&lt;impl str&gt;::parse (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="661" width="8.1244%" height="15" fill="rgb(226,3,54)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="671.50">core::str::..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="645" width="8.1244%" height="15" fill="rgb(245,192,40)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="655.50">core::num::..</text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="629" width="8.1244%" height="15" fill="rgb(238,167,29)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="639.50">core::num::..</text></g><g><title>core::num::&lt;impl usize&gt;::from_ascii_radix (81,243,729 samples, 8.12%)</title><rect x="53.6610%" y="613" width="8.1244%" height="15" fill="rgb(232,182,51)" fg:x="536609815" fg:w="81243729"/><text x="53.9110%" y="623.50">core::num::..</text></g><g><title>core::num::can_not_overflow (1,003,009 samples, 0.10%)</title><rect x="61.6851%" y="597" width="0.1003%" height="15" fill="rgb(231,60,39)" fg:x="616850535" fg:w="1003009"/><text x="61.9351%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="709" width="0.7021%" height="15" fill="rgb(208,69,12)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="693" width="0.7021%" height="15" fill="rgb(235,93,37)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="677" width="0.7021%" height="15" fill="rgb(213,116,39)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="661" width="0.7021%" height="15" fill="rgb(222,207,29)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="645" width="0.7021%" height="15" fill="rgb(206,96,30)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="629" width="0.7021%" height="15" fill="rgb(218,138,4)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="639.50"></text></g><g><title>alloc::alloc::realloc (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="613" width="0.7021%" height="15" fill="rgb(250,191,14)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="623.50"></text></g><g><title>realloc (7,021,063 samples, 0.70%)</title><rect x="68.7061%" y="597" width="0.7021%" height="15" fill="rgb(239,60,40)" fg:x="687061165" fg:w="7021063"/><text x="68.9561%" y="607.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="68.8064%" y="581" width="0.6018%" height="15" fill="rgb(206,27,48)" fg:x="688064174" fg:w="6018054"/><text x="69.0564%" y="591.50"></text></g><g><title>[libc.so.6] (6,018,054 samples, 0.60%)</title><rect x="68.8064%" y="565" width="0.6018%" height="15" fill="rgb(225,35,8)" fg:x="688064174" fg:w="6018054"/><text x="69.0564%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (91,273,819 samples, 9.13%)</title><rect x="61.7854%" y="725" width="9.1274%" height="15" fill="rgb(250,213,24)" fg:x="617853544" fg:w="91273819"/><text x="62.0354%" y="735.50">alloc::vec::V..</text></g><g><title>core::ptr::write (15,045,135 samples, 1.50%)</title><rect x="69.4082%" y="709" width="1.5045%" height="15" fill="rgb(247,123,22)" fg:x="694082228" fg:w="15045135"/><text x="69.6582%" y="719.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="70.9127%" y="565" width="0.1003%" height="15" fill="rgb(231,138,38)" fg:x="709127363" fg:w="1003009"/><text x="71.1627%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="725" width="0.2006%" height="15" fill="rgb(231,145,46)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="709" width="0.2006%" height="15" fill="rgb(251,118,11)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="693" width="0.2006%" height="15" fill="rgb(217,147,25)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="677" width="0.2006%" height="15" fill="rgb(247,81,37)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="661" width="0.2006%" height="15" fill="rgb(209,12,38)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="645" width="0.2006%" height="15" fill="rgb(227,1,9)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="629" width="0.2006%" height="15" fill="rgb(248,47,43)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="639.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="613" width="0.2006%" height="15" fill="rgb(221,10,30)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="623.50"></text></g><g><title>__rustc::__rust_alloc (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="597" width="0.2006%" height="15" fill="rgb(210,229,1)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="607.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (2,006,018 samples, 0.20%)</title><rect x="70.9127%" y="581" width="0.2006%" height="15" fill="rgb(222,148,37)" fg:x="709127363" fg:w="2006018"/><text x="71.1627%" y="591.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="71.0130%" y="565" width="0.1003%" height="15" fill="rgb(234,67,33)" fg:x="710130372" fg:w="1003009"/><text x="71.2630%" y="575.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="71.0130%" y="549" width="0.1003%" height="15" fill="rgb(247,98,35)" fg:x="710130372" fg:w="1003009"/><text x="71.2630%" y="559.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="71.0130%" y="533" width="0.1003%" height="15" fill="rgb(247,138,52)" fg:x="710130372" fg:w="1003009"/><text x="71.2630%" y="543.50"></text></g><g><title>&lt;core::array::drain::Drain&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1,003,009 samples, 0.10%)</title><rect x="71.2136%" y="581" width="0.1003%" height="15" fill="rgb(213,79,30)" fg:x="712136390" fg:w="1003009"/><text x="71.4636%" y="591.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1,003,009 samples, 0.10%)</title><rect x="71.2136%" y="565" width="0.1003%" height="15" fill="rgb(246,177,23)" fg:x="712136390" fg:w="1003009"/><text x="71.4636%" y="575.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1,003,009 samples, 0.10%)</title><rect x="71.2136%" y="549" width="0.1003%" height="15" fill="rgb(230,62,27)" fg:x="712136390" fg:w="1003009"/><text x="71.4636%" y="559.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (1,003,009 samples, 0.10%)</title><rect x="71.3139%" y="501" width="0.1003%" height="15" fill="rgb(216,154,8)" fg:x="713139399" fg:w="1003009"/><text x="71.5639%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="71.3139%" y="485" width="0.1003%" height="15" fill="rgb(244,35,45)" fg:x="713139399" fg:w="1003009"/><text x="71.5639%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="71.4142%" y="501" width="0.1003%" height="15" fill="rgb(251,115,12)" fg:x="714142408" fg:w="1003009"/><text x="71.6642%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="71.4142%" y="485" width="0.1003%" height="15" fill="rgb(240,54,50)" fg:x="714142408" fg:w="1003009"/><text x="71.6642%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (3,009,027 samples, 0.30%)</title><rect x="71.3139%" y="517" width="0.3009%" height="15" fill="rgb(233,84,52)" fg:x="713139399" fg:w="3009027"/><text x="71.5639%" y="527.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="71.5145%" y="501" width="0.1003%" height="15" fill="rgb(207,117,47)" fg:x="715145417" fg:w="1003009"/><text x="71.7645%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="71.5145%" y="485" width="0.1003%" height="15" fill="rgb(249,43,39)" fg:x="715145417" fg:w="1003009"/><text x="71.7645%" y="495.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="71.5145%" y="469" width="0.1003%" height="15" fill="rgb(209,38,44)" fg:x="715145417" fg:w="1003009"/><text x="71.7645%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="71.6148%" y="469" width="0.1003%" height="15" fill="rgb(236,212,23)" fg:x="716148426" fg:w="1003009"/><text x="71.8648%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="71.7151%" y="469" width="0.1003%" height="15" fill="rgb(242,79,21)" fg:x="717151435" fg:w="1003009"/><text x="71.9651%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (4,012,036 samples, 0.40%)</title><rect x="71.6148%" y="501" width="0.4012%" height="15" fill="rgb(211,96,35)" fg:x="716148426" fg:w="4012036"/><text x="71.8648%" y="511.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="71.6148%" y="485" width="0.4012%" height="15" fill="rgb(253,215,40)" fg:x="716148426" fg:w="4012036"/><text x="71.8648%" y="495.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="71.8154%" y="469" width="0.2006%" height="15" fill="rgb(211,81,21)" fg:x="718154444" fg:w="2006018"/><text x="72.0654%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="71.9157%" y="453" width="0.1003%" height="15" fill="rgb(208,190,38)" fg:x="719157453" fg:w="1003009"/><text x="72.1657%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="71.9157%" y="437" width="0.1003%" height="15" fill="rgb(235,213,38)" fg:x="719157453" fg:w="1003009"/><text x="72.1657%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="71.9157%" y="421" width="0.1003%" height="15" fill="rgb(237,122,38)" fg:x="719157453" fg:w="1003009"/><text x="72.1657%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="72.0160%" y="485" width="0.1003%" height="15" fill="rgb(244,218,35)" fg:x="720160462" fg:w="1003009"/><text x="72.2660%" y="495.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="72.0160%" y="469" width="0.1003%" height="15" fill="rgb(240,68,47)" fg:x="720160462" fg:w="1003009"/><text x="72.2660%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (4,012,036 samples, 0.40%)</title><rect x="72.1163%" y="469" width="0.4012%" height="15" fill="rgb(210,16,53)" fg:x="721163471" fg:w="4012036"/><text x="72.3663%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="72.3170%" y="453" width="0.2006%" height="15" fill="rgb(235,124,12)" fg:x="723169489" fg:w="2006018"/><text x="72.5670%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="72.3170%" y="437" width="0.2006%" height="15" fill="rgb(224,169,11)" fg:x="723169489" fg:w="2006018"/><text x="72.5670%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="72.6179%" y="453" width="0.1003%" height="15" fill="rgb(250,166,2)" fg:x="726178516" fg:w="1003009"/><text x="72.8679%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (7,021,063 samples, 0.70%)</title><rect x="72.1163%" y="485" width="0.7021%" height="15" fill="rgb(242,216,29)" fg:x="721163471" fg:w="7021063"/><text x="72.3663%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,009,027 samples, 0.30%)</title><rect x="72.5176%" y="469" width="0.3009%" height="15" fill="rgb(230,116,27)" fg:x="725175507" fg:w="3009027"/><text x="72.7676%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="72.7182%" y="453" width="0.1003%" height="15" fill="rgb(228,99,48)" fg:x="727181525" fg:w="1003009"/><text x="72.9682%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="72.7182%" y="437" width="0.1003%" height="15" fill="rgb(253,11,6)" fg:x="727181525" fg:w="1003009"/><text x="72.9682%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.20%)</title><rect x="72.8185%" y="485" width="0.2006%" height="15" fill="rgb(247,143,39)" fg:x="728184534" fg:w="2006018"/><text x="73.0685%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (2,006,018 samples, 0.20%)</title><rect x="72.8185%" y="469" width="0.2006%" height="15" fill="rgb(236,97,10)" fg:x="728184534" fg:w="2006018"/><text x="73.0685%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="73.0191%" y="485" width="0.1003%" height="15" fill="rgb(233,208,19)" fg:x="730190552" fg:w="1003009"/><text x="73.2691%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="73.0191%" y="469" width="0.1003%" height="15" fill="rgb(216,164,2)" fg:x="730190552" fg:w="1003009"/><text x="73.2691%" y="479.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="73.0191%" y="453" width="0.1003%" height="15" fill="rgb(220,129,5)" fg:x="730190552" fg:w="1003009"/><text x="73.2691%" y="463.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="73.1194%" y="453" width="0.2006%" height="15" fill="rgb(242,17,10)" fg:x="731193561" fg:w="2006018"/><text x="73.3694%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (14,042,126 samples, 1.40%)</title><rect x="72.0160%" y="501" width="1.4042%" height="15" fill="rgb(242,107,0)" fg:x="720160462" fg:w="14042126"/><text x="72.2660%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.30%)</title><rect x="73.1194%" y="485" width="0.3009%" height="15" fill="rgb(251,28,31)" fg:x="731193561" fg:w="3009027"/><text x="73.3694%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="73.1194%" y="469" width="0.3009%" height="15" fill="rgb(233,223,10)" fg:x="731193561" fg:w="3009027"/><text x="73.3694%" y="479.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="73.3200%" y="453" width="0.1003%" height="15" fill="rgb(215,21,27)" fg:x="733199579" fg:w="1003009"/><text x="73.5700%" y="463.50"></text></g><g><title>core::intrinsics::copy (30,090,270 samples, 3.01%)</title><rect x="74.0221%" y="453" width="3.0090%" height="15" fill="rgb(232,23,21)" fg:x="740220642" fg:w="30090270"/><text x="74.2721%" y="463.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (41,123,369 samples, 4.11%)</title><rect x="73.4203%" y="501" width="4.1123%" height="15" fill="rgb(244,5,23)" fg:x="734202588" fg:w="41123369"/><text x="73.6703%" y="511.50">core..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (41,123,369 samples, 4.11%)</title><rect x="73.4203%" y="485" width="4.1123%" height="15" fill="rgb(226,81,46)" fg:x="734202588" fg:w="41123369"/><text x="73.6703%" y="495.50">core..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (41,123,369 samples, 4.11%)</title><rect x="73.4203%" y="469" width="4.1123%" height="15" fill="rgb(247,70,30)" fg:x="734202588" fg:w="41123369"/><text x="73.6703%" y="479.50">core..</text></g><g><title>core::ops::function::FnMut::call_mut (5,015,045 samples, 0.50%)</title><rect x="77.0311%" y="453" width="0.5015%" height="15" fill="rgb(212,68,19)" fg:x="770310912" fg:w="5015045"/><text x="77.2811%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="77.0311%" y="437" width="0.5015%" height="15" fill="rgb(240,187,13)" fg:x="770310912" fg:w="5015045"/><text x="77.2811%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="77.5326%" y="485" width="0.1003%" height="15" fill="rgb(223,113,26)" fg:x="775325957" fg:w="1003009"/><text x="77.7826%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="77.5326%" y="469" width="0.1003%" height="15" fill="rgb(206,192,2)" fg:x="775325957" fg:w="1003009"/><text x="77.7826%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="77.6329%" y="453" width="0.1003%" height="15" fill="rgb(241,108,4)" fg:x="776328966" fg:w="1003009"/><text x="77.8829%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="77.6329%" y="437" width="0.1003%" height="15" fill="rgb(247,173,49)" fg:x="776328966" fg:w="1003009"/><text x="77.8829%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="77.6329%" y="421" width="0.1003%" height="15" fill="rgb(224,114,35)" fg:x="776328966" fg:w="1003009"/><text x="77.8829%" y="431.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (5,015,045 samples, 0.50%)</title><rect x="77.6329%" y="485" width="0.5015%" height="15" fill="rgb(245,159,27)" fg:x="776328966" fg:w="5015045"/><text x="77.8829%" y="495.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (5,015,045 samples, 0.50%)</title><rect x="77.6329%" y="469" width="0.5015%" height="15" fill="rgb(245,172,44)" fg:x="776328966" fg:w="5015045"/><text x="77.8829%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="77.7332%" y="453" width="0.4012%" height="15" fill="rgb(236,23,11)" fg:x="777331975" fg:w="4012036"/><text x="77.9832%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="78.0341%" y="437" width="0.1003%" height="15" fill="rgb(205,117,38)" fg:x="780341002" fg:w="1003009"/><text x="78.2841%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="78.2347%" y="469" width="0.1003%" height="15" fill="rgb(237,72,25)" fg:x="782347020" fg:w="1003009"/><text x="78.4847%" y="479.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="78.2347%" y="453" width="0.1003%" height="15" fill="rgb(244,70,9)" fg:x="782347020" fg:w="1003009"/><text x="78.4847%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="78.3350%" y="453" width="0.1003%" height="15" fill="rgb(217,125,39)" fg:x="783350029" fg:w="1003009"/><text x="78.5850%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="78.3350%" y="437" width="0.1003%" height="15" fill="rgb(235,36,10)" fg:x="783350029" fg:w="1003009"/><text x="78.5850%" y="447.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="78.3350%" y="421" width="0.1003%" height="15" fill="rgb(251,123,47)" fg:x="783350029" fg:w="1003009"/><text x="78.5850%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="78.3350%" y="405" width="0.1003%" height="15" fill="rgb(221,13,13)" fg:x="783350029" fg:w="1003009"/><text x="78.5850%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (6,018,054 samples, 0.60%)</title><rect x="78.4353%" y="453" width="0.6018%" height="15" fill="rgb(238,131,9)" fg:x="784353038" fg:w="6018054"/><text x="78.6853%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="78.9368%" y="437" width="0.1003%" height="15" fill="rgb(211,50,8)" fg:x="789368083" fg:w="1003009"/><text x="79.1868%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="78.9368%" y="421" width="0.1003%" height="15" fill="rgb(245,182,24)" fg:x="789368083" fg:w="1003009"/><text x="79.1868%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="79.0371%" y="437" width="0.2006%" height="15" fill="rgb(242,14,37)" fg:x="790371092" fg:w="2006018"/><text x="79.2871%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (11,033,099 samples, 1.10%)</title><rect x="78.3350%" y="469" width="1.1033%" height="15" fill="rgb(246,228,12)" fg:x="783350029" fg:w="11033099"/><text x="78.5850%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (4,012,036 samples, 0.40%)</title><rect x="79.0371%" y="453" width="0.4012%" height="15" fill="rgb(213,55,15)" fg:x="790371092" fg:w="4012036"/><text x="79.2871%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="79.2377%" y="437" width="0.2006%" height="15" fill="rgb(209,9,3)" fg:x="792377110" fg:w="2006018"/><text x="79.4877%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="79.2377%" y="421" width="0.2006%" height="15" fill="rgb(230,59,30)" fg:x="792377110" fg:w="2006018"/><text x="79.4877%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (6,018,054 samples, 0.60%)</title><rect x="79.4383%" y="469" width="0.6018%" height="15" fill="rgb(209,121,21)" fg:x="794383128" fg:w="6018054"/><text x="79.6883%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (6,018,054 samples, 0.60%)</title><rect x="79.4383%" y="453" width="0.6018%" height="15" fill="rgb(220,109,13)" fg:x="794383128" fg:w="6018054"/><text x="79.6883%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="79.9398%" y="437" width="0.1003%" height="15" fill="rgb(232,18,1)" fg:x="799398173" fg:w="1003009"/><text x="80.1898%" y="447.50"></text></g><g><title>core::intrinsics::copy (5,015,045 samples, 0.50%)</title><rect x="80.1404%" y="437" width="0.5015%" height="15" fill="rgb(215,41,42)" fg:x="801404191" fg:w="5015045"/><text x="80.3904%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (7,021,063 samples, 0.70%)</title><rect x="80.0401%" y="469" width="0.7021%" height="15" fill="rgb(224,123,36)" fg:x="800401182" fg:w="7021063"/><text x="80.2901%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (7,021,063 samples, 0.70%)</title><rect x="80.0401%" y="453" width="0.7021%" height="15" fill="rgb(240,125,3)" fg:x="800401182" fg:w="7021063"/><text x="80.2901%" y="463.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="80.6419%" y="437" width="0.1003%" height="15" fill="rgb(205,98,50)" fg:x="806419236" fg:w="1003009"/><text x="80.8919%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (28,084,252 samples, 2.81%)</title><rect x="78.1344%" y="485" width="2.8084%" height="15" fill="rgb(205,185,37)" fg:x="781344011" fg:w="28084252"/><text x="78.3844%" y="495.50">co..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="80.7422%" y="469" width="0.2006%" height="15" fill="rgb(238,207,15)" fg:x="807422245" fg:w="2006018"/><text x="80.9922%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="80.7422%" y="453" width="0.2006%" height="15" fill="rgb(213,199,42)" fg:x="807422245" fg:w="2006018"/><text x="80.9922%" y="463.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="80.7422%" y="437" width="0.2006%" height="15" fill="rgb(235,201,11)" fg:x="807422245" fg:w="2006018"/><text x="80.9922%" y="447.50"></text></g><g><title>core::intrinsics::copy (27,081,243 samples, 2.71%)</title><rect x="81.6449%" y="437" width="2.7081%" height="15" fill="rgb(207,46,11)" fg:x="816449326" fg:w="27081243"/><text x="81.8949%" y="447.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (42,126,378 samples, 4.21%)</title><rect x="80.9428%" y="485" width="4.2126%" height="15" fill="rgb(241,35,35)" fg:x="809428263" fg:w="42126378"/><text x="81.1928%" y="495.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (42,126,378 samples, 4.21%)</title><rect x="80.9428%" y="469" width="4.2126%" height="15" fill="rgb(243,32,47)" fg:x="809428263" fg:w="42126378"/><text x="81.1928%" y="479.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (41,123,369 samples, 4.11%)</title><rect x="81.0431%" y="453" width="4.1123%" height="15" fill="rgb(247,202,23)" fg:x="810431272" fg:w="41123369"/><text x="81.2931%" y="463.50">core..</text></g><g><title>core::ops::function::FnMut::call_mut (8,024,072 samples, 0.80%)</title><rect x="84.3531%" y="437" width="0.8024%" height="15" fill="rgb(219,102,11)" fg:x="843530569" fg:w="8024072"/><text x="84.6031%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,024,072 samples, 0.80%)</title><rect x="84.3531%" y="421" width="0.8024%" height="15" fill="rgb(243,110,44)" fg:x="843530569" fg:w="8024072"/><text x="84.6031%" y="431.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (2,006,018 samples, 0.20%)</title><rect x="85.5567%" y="437" width="0.2006%" height="15" fill="rgb(222,74,54)" fg:x="855566677" fg:w="2006018"/><text x="85.8067%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (5,015,045 samples, 0.50%)</title><rect x="85.4564%" y="469" width="0.5015%" height="15" fill="rgb(216,99,12)" fg:x="854563668" fg:w="5015045"/><text x="85.7064%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="85.5567%" y="453" width="0.4012%" height="15" fill="rgb(226,22,26)" fg:x="855566677" fg:w="4012036"/><text x="85.8067%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="85.7573%" y="437" width="0.2006%" height="15" fill="rgb(217,163,10)" fg:x="857572695" fg:w="2006018"/><text x="86.0073%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="85.8576%" y="421" width="0.1003%" height="15" fill="rgb(213,25,53)" fg:x="858575704" fg:w="1003009"/><text x="86.1076%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="86.0582%" y="453" width="0.2006%" height="15" fill="rgb(252,105,26)" fg:x="860581722" fg:w="2006018"/><text x="86.3082%" y="463.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="86.0582%" y="437" width="0.2006%" height="15" fill="rgb(220,39,43)" fg:x="860581722" fg:w="2006018"/><text x="86.3082%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="86.4594%" y="437" width="0.1003%" height="15" fill="rgb(229,68,48)" fg:x="864593758" fg:w="1003009"/><text x="86.7094%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="86.4594%" y="421" width="0.1003%" height="15" fill="rgb(252,8,32)" fg:x="864593758" fg:w="1003009"/><text x="86.7094%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="86.4594%" y="405" width="0.1003%" height="15" fill="rgb(223,20,43)" fg:x="864593758" fg:w="1003009"/><text x="86.7094%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (6,018,054 samples, 0.60%)</title><rect x="86.2588%" y="453" width="0.6018%" height="15" fill="rgb(229,81,49)" fg:x="862587740" fg:w="6018054"/><text x="86.5088%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.30%)</title><rect x="86.5597%" y="437" width="0.3009%" height="15" fill="rgb(236,28,36)" fg:x="865596767" fg:w="3009027"/><text x="86.8097%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4,012,036 samples, 0.40%)</title><rect x="86.8606%" y="453" width="0.4012%" height="15" fill="rgb(249,185,26)" fg:x="868605794" fg:w="4012036"/><text x="87.1106%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (4,012,036 samples, 0.40%)</title><rect x="86.8606%" y="437" width="0.4012%" height="15" fill="rgb(249,174,33)" fg:x="868605794" fg:w="4012036"/><text x="87.1106%" y="447.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="87.2618%" y="421" width="0.2006%" height="15" fill="rgb(233,201,37)" fg:x="872617830" fg:w="2006018"/><text x="87.5118%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.30%)</title><rect x="87.2618%" y="453" width="0.3009%" height="15" fill="rgb(221,78,26)" fg:x="872617830" fg:w="3009027"/><text x="87.5118%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="87.2618%" y="437" width="0.3009%" height="15" fill="rgb(250,127,30)" fg:x="872617830" fg:w="3009027"/><text x="87.5118%" y="447.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="87.4624%" y="421" width="0.1003%" height="15" fill="rgb(230,49,44)" fg:x="874623848" fg:w="1003009"/><text x="87.7124%" y="431.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="87.5627%" y="421" width="0.2006%" height="15" fill="rgb(229,67,23)" fg:x="875626857" fg:w="2006018"/><text x="87.8127%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (19,057,171 samples, 1.91%)</title><rect x="85.9579%" y="469" width="1.9057%" height="15" fill="rgb(249,83,47)" fg:x="859578713" fg:w="19057171"/><text x="86.2079%" y="479.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.30%)</title><rect x="87.5627%" y="453" width="0.3009%" height="15" fill="rgb(215,43,3)" fg:x="875626857" fg:w="3009027"/><text x="87.8127%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="87.5627%" y="437" width="0.3009%" height="15" fill="rgb(238,154,13)" fg:x="875626857" fg:w="3009027"/><text x="87.8127%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="87.7633%" y="421" width="0.1003%" height="15" fill="rgb(219,56,2)" fg:x="877632875" fg:w="1003009"/><text x="88.0133%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="87.8636%" y="453" width="0.1003%" height="15" fill="rgb(233,0,4)" fg:x="878635884" fg:w="1003009"/><text x="88.1136%" y="463.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="87.8636%" y="437" width="0.1003%" height="15" fill="rgb(235,30,7)" fg:x="878635884" fg:w="1003009"/><text x="88.1136%" y="447.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="87.8636%" y="421" width="0.1003%" height="15" fill="rgb(250,79,13)" fg:x="878635884" fg:w="1003009"/><text x="88.1136%" y="431.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="87.9639%" y="437" width="0.1003%" height="15" fill="rgb(211,146,34)" fg:x="879638893" fg:w="1003009"/><text x="88.2139%" y="447.50"></text></g><g><title>core::intrinsics::copy (20,060,180 samples, 2.01%)</title><rect x="88.5657%" y="421" width="2.0060%" height="15" fill="rgb(228,22,38)" fg:x="885656947" fg:w="20060180"/><text x="88.8157%" y="431.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (35,105,315 samples, 3.51%)</title><rect x="87.8636%" y="469" width="3.5105%" height="15" fill="rgb(235,168,5)" fg:x="878635884" fg:w="35105315"/><text x="88.1136%" y="479.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (34,102,306 samples, 3.41%)</title><rect x="87.9639%" y="453" width="3.4102%" height="15" fill="rgb(221,155,16)" fg:x="879638893" fg:w="34102306"/><text x="88.2139%" y="463.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (33,099,297 samples, 3.31%)</title><rect x="88.0642%" y="437" width="3.3099%" height="15" fill="rgb(215,215,53)" fg:x="880641902" fg:w="33099297"/><text x="88.3142%" y="447.50">cor..</text></g><g><title>core::ops::function::FnMut::call_mut (8,024,072 samples, 0.80%)</title><rect x="90.5717%" y="421" width="0.8024%" height="15" fill="rgb(223,4,10)" fg:x="905717127" fg:w="8024072"/><text x="90.8217%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,024,072 samples, 0.80%)</title><rect x="90.5717%" y="405" width="0.8024%" height="15" fill="rgb(234,103,6)" fg:x="905717127" fg:w="8024072"/><text x="90.8217%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="453" width="0.1003%" height="15" fill="rgb(227,97,0)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="437" width="0.1003%" height="15" fill="rgb(234,150,53)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="91.5747%" y="453" width="0.2006%" height="15" fill="rgb(228,201,54)" fg:x="915747217" fg:w="2006018"/><text x="91.8247%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (2,006,018 samples, 0.20%)</title><rect x="91.5747%" y="437" width="0.2006%" height="15" fill="rgb(222,22,37)" fg:x="915747217" fg:w="2006018"/><text x="91.8247%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="91.9759%" y="437" width="0.2006%" height="15" fill="rgb(237,53,32)" fg:x="919759253" fg:w="2006018"/><text x="92.2259%" y="447.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="91.9759%" y="421" width="0.2006%" height="15" fill="rgb(233,25,53)" fg:x="919759253" fg:w="2006018"/><text x="92.2259%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="92.1765%" y="421" width="0.1003%" height="15" fill="rgb(210,40,34)" fg:x="921765271" fg:w="1003009"/><text x="92.4265%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (4,012,036 samples, 0.40%)</title><rect x="92.2768%" y="421" width="0.4012%" height="15" fill="rgb(241,220,44)" fg:x="922768280" fg:w="4012036"/><text x="92.5268%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="92.5777%" y="405" width="0.1003%" height="15" fill="rgb(235,28,35)" fg:x="925777307" fg:w="1003009"/><text x="92.8277%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="92.5777%" y="389" width="0.1003%" height="15" fill="rgb(210,56,17)" fg:x="925777307" fg:w="1003009"/><text x="92.8277%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="92.6780%" y="405" width="0.2006%" height="15" fill="rgb(224,130,29)" fg:x="926780316" fg:w="2006018"/><text x="92.9280%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (11,033,099 samples, 1.10%)</title><rect x="92.1765%" y="437" width="1.1033%" height="15" fill="rgb(235,212,8)" fg:x="921765271" fg:w="11033099"/><text x="92.4265%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (6,018,054 samples, 0.60%)</title><rect x="92.6780%" y="421" width="0.6018%" height="15" fill="rgb(223,33,50)" fg:x="926780316" fg:w="6018054"/><text x="92.9280%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (4,012,036 samples, 0.40%)</title><rect x="92.8786%" y="405" width="0.4012%" height="15" fill="rgb(219,149,13)" fg:x="928786334" fg:w="4012036"/><text x="93.1286%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4,012,036 samples, 0.40%)</title><rect x="92.8786%" y="389" width="0.4012%" height="15" fill="rgb(250,156,29)" fg:x="928786334" fg:w="4012036"/><text x="93.1286%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (10,030,090 samples, 1.00%)</title><rect x="93.2798%" y="437" width="1.0030%" height="15" fill="rgb(216,193,19)" fg:x="932798370" fg:w="10030090"/><text x="93.5298%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (10,030,090 samples, 1.00%)</title><rect x="93.2798%" y="421" width="1.0030%" height="15" fill="rgb(216,135,14)" fg:x="932798370" fg:w="10030090"/><text x="93.5298%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="94.1825%" y="405" width="0.1003%" height="15" fill="rgb(241,47,5)" fg:x="941825451" fg:w="1003009"/><text x="94.4325%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="94.1825%" y="389" width="0.1003%" height="15" fill="rgb(233,42,35)" fg:x="941825451" fg:w="1003009"/><text x="94.4325%" y="399.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="94.3831%" y="405" width="0.1003%" height="15" fill="rgb(231,13,6)" fg:x="943831469" fg:w="1003009"/><text x="94.6331%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="94.4835%" y="405" width="0.2006%" height="15" fill="rgb(207,181,40)" fg:x="944834478" fg:w="2006018"/><text x="94.7335%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (8,024,072 samples, 0.80%)</title><rect x="94.2828%" y="437" width="0.8024%" height="15" fill="rgb(254,173,49)" fg:x="942828460" fg:w="8024072"/><text x="94.5328%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (8,024,072 samples, 0.80%)</title><rect x="94.2828%" y="421" width="0.8024%" height="15" fill="rgb(221,1,38)" fg:x="942828460" fg:w="8024072"/><text x="94.5328%" y="431.50"></text></g><g><title>core::ptr::read (4,012,036 samples, 0.40%)</title><rect x="94.6841%" y="405" width="0.4012%" height="15" fill="rgb(206,124,46)" fg:x="946840496" fg:w="4012036"/><text x="94.9341%" y="415.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.0853%" y="405" width="0.1003%" height="15" fill="rgb(249,21,11)" fg:x="950852532" fg:w="1003009"/><text x="95.3353%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="95.1856%" y="405" width="0.1003%" height="15" fill="rgb(222,201,40)" fg:x="951855541" fg:w="1003009"/><text x="95.4356%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (36,108,324 samples, 3.61%)</title><rect x="91.7753%" y="453" width="3.6108%" height="15" fill="rgb(235,61,29)" fg:x="917753235" fg:w="36108324"/><text x="92.0253%" y="463.50">core..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.30%)</title><rect x="95.0853%" y="437" width="0.3009%" height="15" fill="rgb(219,207,3)" fg:x="950852532" fg:w="3009027"/><text x="95.3353%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="95.0853%" y="421" width="0.3009%" height="15" fill="rgb(222,56,46)" fg:x="950852532" fg:w="3009027"/><text x="95.3353%" y="431.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="405" width="0.1003%" height="15" fill="rgb(239,76,54)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="95.3862%" y="437" width="0.1003%" height="15" fill="rgb(231,124,27)" fg:x="953861559" fg:w="1003009"/><text x="95.6362%" y="447.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="95.3862%" y="421" width="0.1003%" height="15" fill="rgb(249,195,6)" fg:x="953861559" fg:w="1003009"/><text x="95.6362%" y="431.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.3862%" y="405" width="0.1003%" height="15" fill="rgb(237,174,47)" fg:x="953861559" fg:w="1003009"/><text x="95.6362%" y="415.50"></text></g><g><title>core::intrinsics::copy (15,045,135 samples, 1.50%)</title><rect x="95.6871%" y="405" width="1.5045%" height="15" fill="rgb(206,201,31)" fg:x="956870586" fg:w="15045135"/><text x="95.9371%" y="415.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (19,057,171 samples, 1.91%)</title><rect x="95.3862%" y="453" width="1.9057%" height="15" fill="rgb(231,57,52)" fg:x="953861559" fg:w="19057171"/><text x="95.6362%" y="463.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (18,054,162 samples, 1.81%)</title><rect x="95.4865%" y="437" width="1.8054%" height="15" fill="rgb(248,177,22)" fg:x="954864568" fg:w="18054162"/><text x="95.7365%" y="447.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (18,054,162 samples, 1.81%)</title><rect x="95.4865%" y="421" width="1.8054%" height="15" fill="rgb(215,211,37)" fg:x="954864568" fg:w="18054162"/><text x="95.7365%" y="431.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="97.1916%" y="405" width="0.1003%" height="15" fill="rgb(241,128,51)" fg:x="971915721" fg:w="1003009"/><text x="97.4416%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="97.1916%" y="389" width="0.1003%" height="15" fill="rgb(227,165,31)" fg:x="971915721" fg:w="1003009"/><text x="97.4416%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (1,003,009 samples, 0.10%)</title><rect x="97.2919%" y="437" width="0.1003%" height="15" fill="rgb(228,167,24)" fg:x="972918730" fg:w="1003009"/><text x="97.5419%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_checked (1,003,009 samples, 0.10%)</title><rect x="97.2919%" y="421" width="0.1003%" height="15" fill="rgb(228,143,12)" fg:x="972918730" fg:w="1003009"/><text x="97.5419%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (1,003,009 samples, 0.10%)</title><rect x="97.2919%" y="405" width="0.1003%" height="15" fill="rgb(249,149,8)" fg:x="972918730" fg:w="1003009"/><text x="97.5419%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="97.3922%" y="405" width="0.1003%" height="15" fill="rgb(243,35,44)" fg:x="973921739" fg:w="1003009"/><text x="97.6422%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="97.3922%" y="389" width="0.1003%" height="15" fill="rgb(246,89,9)" fg:x="973921739" fg:w="1003009"/><text x="97.6422%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="97.3922%" y="373" width="0.1003%" height="15" fill="rgb(233,213,13)" fg:x="973921739" fg:w="1003009"/><text x="97.6422%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (2,006,018 samples, 0.20%)</title><rect x="97.3922%" y="421" width="0.2006%" height="15" fill="rgb(233,141,41)" fg:x="973921739" fg:w="2006018"/><text x="97.6422%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="97.4925%" y="405" width="0.1003%" height="15" fill="rgb(239,167,4)" fg:x="974924748" fg:w="1003009"/><text x="97.7425%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="97.4925%" y="389" width="0.1003%" height="15" fill="rgb(209,217,16)" fg:x="974924748" fg:w="1003009"/><text x="97.7425%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="97.4925%" y="373" width="0.1003%" height="15" fill="rgb(219,88,35)" fg:x="974924748" fg:w="1003009"/><text x="97.7425%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.20%)</title><rect x="97.5928%" y="421" width="0.2006%" height="15" fill="rgb(220,193,23)" fg:x="975927757" fg:w="2006018"/><text x="97.8428%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (2,006,018 samples, 0.20%)</title><rect x="97.5928%" y="405" width="0.2006%" height="15" fill="rgb(230,90,52)" fg:x="975927757" fg:w="2006018"/><text x="97.8428%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="97.6931%" y="389" width="0.1003%" height="15" fill="rgb(252,106,19)" fg:x="976930766" fg:w="1003009"/><text x="97.9431%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="97.6931%" y="373" width="0.1003%" height="15" fill="rgb(206,74,20)" fg:x="976930766" fg:w="1003009"/><text x="97.9431%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (5,015,045 samples, 0.50%)</title><rect x="97.3922%" y="437" width="0.5015%" height="15" fill="rgb(230,138,44)" fg:x="973921739" fg:w="5015045"/><text x="97.6422%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="97.7934%" y="421" width="0.1003%" height="15" fill="rgb(235,182,43)" fg:x="977933775" fg:w="1003009"/><text x="98.0434%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="97.7934%" y="405" width="0.1003%" height="15" fill="rgb(242,16,51)" fg:x="977933775" fg:w="1003009"/><text x="98.0434%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="97.7934%" y="389" width="0.1003%" height="15" fill="rgb(248,9,4)" fg:x="977933775" fg:w="1003009"/><text x="98.0434%" y="399.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (270,812,430 samples, 27.08%)</title><rect x="71.1133%" y="725" width="27.0812%" height="15" fill="rgb(210,31,22)" fg:x="711133381" fg:w="270812430"/><text x="71.3633%" y="735.50">core::array::_&lt;impl [T: N]&gt;::map</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (270,812,430 samples, 27.08%)</title><rect x="71.1133%" y="709" width="27.0812%" height="15" fill="rgb(239,54,39)" fg:x="711133381" fg:w="270812430"/><text x="71.3633%" y="719.50">core::array::_&lt;impl [T: N]&gt;::try_map</text></g><g><title>core::array::drain::drain_array_with (270,812,430 samples, 27.08%)</title><rect x="71.1133%" y="693" width="27.0812%" height="15" fill="rgb(230,99,41)" fg:x="711133381" fg:w="270812430"/><text x="71.3633%" y="703.50">core::array::drain::drain_array_with</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (270,812,430 samples, 27.08%)</title><rect x="71.1133%" y="677" width="27.0812%" height="15" fill="rgb(253,106,12)" fg:x="711133381" fg:w="270812430"/><text x="71.3633%" y="687.50">core::array::_&lt;impl [T: N]&gt;::try_map::_{{cl..</text></g><g><title>core::array::try_from_trusted_iterator (270,812,430 samples, 27.08%)</title><rect x="71.1133%" y="661" width="27.0812%" height="15" fill="rgb(213,46,41)" fg:x="711133381" fg:w="270812430"/><text x="71.3633%" y="671.50">core::array::try_from_trusted_iterator</text></g><g><title>core::array::try_from_fn (270,812,430 samples, 27.08%)</title><rect x="71.1133%" y="645" width="27.0812%" height="15" fill="rgb(215,133,35)" fg:x="711133381" fg:w="270812430"/><text x="71.3633%" y="655.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (269,809,421 samples, 26.98%)</title><rect x="71.2136%" y="629" width="26.9809%" height="15" fill="rgb(213,28,5)" fg:x="712136390" fg:w="269809421"/><text x="71.4636%" y="639.50">core::array::try_from_fn_erased</text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (269,809,421 samples, 26.98%)</title><rect x="71.2136%" y="613" width="26.9809%" height="15" fill="rgb(215,77,49)" fg:x="712136390" fg:w="269809421"/><text x="71.4636%" y="623.50">core::array::try_from_trusted_iterator::nex..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (269,809,421 samples, 26.98%)</title><rect x="71.2136%" y="597" width="26.9809%" height="15" fill="rgb(248,100,22)" fg:x="712136390" fg:w="269809421"/><text x="71.4636%" y="607.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as cor..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (268,806,412 samples, 26.88%)</title><rect x="71.3139%" y="581" width="26.8806%" height="15" fill="rgb(208,67,9)" fg:x="713139399" fg:w="268806412"/><text x="71.5639%" y="591.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;:..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (268,806,412 samples, 26.88%)</title><rect x="71.3139%" y="565" width="26.8806%" height="15" fill="rgb(219,133,21)" fg:x="713139399" fg:w="268806412"/><text x="71.5639%" y="575.50">aoc_2024_megaproject::problems::day1::part1..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (268,806,412 samples, 26.88%)</title><rect x="71.3139%" y="549" width="26.8806%" height="15" fill="rgb(246,46,29)" fg:x="713139399" fg:w="268806412"/><text x="71.5639%" y="559.50">core::slice::&lt;impl [T]&gt;::sort_unstable</text></g><g><title>core::slice::sort::unstable::sort (268,806,412 samples, 26.88%)</title><rect x="71.3139%" y="533" width="26.8806%" height="15" fill="rgb(246,185,52)" fg:x="713139399" fg:w="268806412"/><text x="71.5639%" y="543.50">core::slice::sort::unstable::sort</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (265,797,385 samples, 26.58%)</title><rect x="71.6148%" y="517" width="26.5797%" height="15" fill="rgb(252,136,11)" fg:x="716148426" fg:w="265797385"/><text x="71.8648%" y="527.50">core::slice::sort::unstable::quicksort::qui..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (206,619,854 samples, 20.66%)</title><rect x="77.5326%" y="501" width="20.6620%" height="15" fill="rgb(219,138,53)" fg:x="775325957" fg:w="206619854"/><text x="77.7826%" y="511.50">core::slice::sort::unstable::quic..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (130,391,170 samples, 13.04%)</title><rect x="85.1555%" y="485" width="13.0391%" height="15" fill="rgb(211,51,23)" fg:x="851554641" fg:w="130391170"/><text x="85.4055%" y="495.50">core::slice::sort::u..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (68,204,612 samples, 6.82%)</title><rect x="91.3741%" y="469" width="6.8205%" height="15" fill="rgb(247,221,28)" fg:x="913741199" fg:w="68204612"/><text x="91.6241%" y="479.50">core::sli..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (9,027,081 samples, 0.90%)</title><rect x="97.2919%" y="453" width="0.9027%" height="15" fill="rgb(251,222,45)" fg:x="972918730" fg:w="9027081"/><text x="97.5419%" y="463.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (3,009,027 samples, 0.30%)</title><rect x="97.8937%" y="437" width="0.3009%" height="15" fill="rgb(217,162,53)" fg:x="978936784" fg:w="3009027"/><text x="98.1437%" y="447.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (3,009,027 samples, 0.30%)</title><rect x="97.8937%" y="421" width="0.3009%" height="15" fill="rgb(229,93,14)" fg:x="978936784" fg:w="3009027"/><text x="98.1437%" y="431.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="97.8937%" y="405" width="0.3009%" height="15" fill="rgb(209,67,49)" fg:x="978936784" fg:w="3009027"/><text x="98.1437%" y="415.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="97.9940%" y="389" width="0.2006%" height="15" fill="rgb(213,87,29)" fg:x="979939793" fg:w="2006018"/><text x="98.2440%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (9,027,081 samples, 0.90%)</title><rect x="98.1946%" y="725" width="0.9027%" height="15" fill="rgb(205,151,52)" fg:x="981945811" fg:w="9027081"/><text x="98.4446%" y="735.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.0973%" y="581" width="0.1003%" height="15" fill="rgb(253,215,39)" fg:x="990972892" fg:w="1003009"/><text x="99.3473%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange_weak (1,003,009 samples, 0.10%)</title><rect x="99.0973%" y="565" width="0.1003%" height="15" fill="rgb(221,220,41)" fg:x="990972892" fg:w="1003009"/><text x="99.3473%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1,003,009 samples, 0.10%)</title><rect x="99.0973%" y="549" width="0.1003%" height="15" fill="rgb(218,133,21)" fg:x="990972892" fg:w="1003009"/><text x="99.3473%" y="559.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (992,978,910 samples, 99.30%)</title><rect x="0.0000%" y="773" width="99.2979%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="992978910"/><text x="0.2500%" y="783.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1 (992,978,910 samples, 99.30%)</title><rect x="0.0000%" y="757" width="99.2979%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="992978910"/><text x="0.2500%" y="767.50">&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day1::part1 (992,978,910 samples, 99.30%)</title><rect x="0.0000%" y="741" width="99.2979%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="992978910"/><text x="0.2500%" y="751.50">aoc_2024_megaproject::problems::day1::part1</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;: 2]&gt; (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="725" width="0.2006%" height="15" fill="rgb(215,223,47)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="709" width="0.2006%" height="15" fill="rgb(248,225,23)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="693" width="0.2006%" height="15" fill="rgb(250,108,0)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="677" width="0.2006%" height="15" fill="rgb(228,208,7)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="661" width="0.2006%" height="15" fill="rgb(244,45,10)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="645" width="0.2006%" height="15" fill="rgb(207,125,25)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="629" width="0.2006%" height="15" fill="rgb(210,195,18)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="639.50"></text></g><g><title>__rustc::__rust_dealloc (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="613" width="0.2006%" height="15" fill="rgb(249,80,12)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="623.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (2,006,018 samples, 0.20%)</title><rect x="99.0973%" y="597" width="0.2006%" height="15" fill="rgb(221,65,9)" fg:x="990972892" fg:w="2006018"/><text x="99.3473%" y="607.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.1976%" y="581" width="0.1003%" height="15" fill="rgb(235,49,36)" fg:x="991975901" fg:w="1003009"/><text x="99.4476%" y="591.50"></text></g><g><title>cfree (1,003,009 samples, 0.10%)</title><rect x="99.1976%" y="565" width="0.1003%" height="15" fill="rgb(225,32,20)" fg:x="991975901" fg:w="1003009"/><text x="99.4476%" y="575.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.1976%" y="549" width="0.1003%" height="15" fill="rgb(215,141,46)" fg:x="991975901" fg:w="1003009"/><text x="99.4476%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (2,006,018 samples, 0.20%)</title><rect x="99.2979%" y="773" width="0.2006%" height="15" fill="rgb(250,160,47)" fg:x="992978910" fg:w="2006018"/><text x="99.5479%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,006,018 samples, 0.20%)</title><rect x="99.2979%" y="757" width="0.2006%" height="15" fill="rgb(216,222,40)" fg:x="992978910" fg:w="2006018"/><text x="99.5479%" y="767.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="99.2979%" y="741" width="0.2006%" height="15" fill="rgb(234,217,39)" fg:x="992978910" fg:w="2006018"/><text x="99.5479%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,006,018 samples, 0.20%)</title><rect x="99.2979%" y="725" width="0.2006%" height="15" fill="rgb(207,178,40)" fg:x="992978910" fg:w="2006018"/><text x="99.5479%" y="735.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="709" width="0.1003%" height="15" fill="rgb(221,136,13)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="719.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="693" width="0.1003%" height="15" fill="rgb(249,199,10)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="703.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="677" width="0.1003%" height="15" fill="rgb(249,222,13)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="687.50"></text></g><g><title>alloc::string::String::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.3982%" y="661" width="0.1003%" height="15" fill="rgb(244,185,38)" fg:x="993981919" fg:w="1003009"/><text x="99.6482%" y="671.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="773" width="0.1003%" height="15" fill="rgb(236,202,9)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="783.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="757" width="0.1003%" height="15" fill="rgb(250,229,37)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="767.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="741" width="0.1003%" height="15" fill="rgb(206,174,23)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="751.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="725" width="0.1003%" height="15" fill="rgb(211,33,43)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="735.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="709" width="0.1003%" height="15" fill="rgb(245,58,50)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="719.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="693" width="0.1003%" height="15" fill="rgb(244,68,36)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="703.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="677" width="0.1003%" height="15" fill="rgb(232,229,15)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="687.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="661" width="0.1003%" height="15" fill="rgb(254,30,23)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="645" width="0.1003%" height="15" fill="rgb(235,160,14)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="629" width="0.1003%" height="15" fill="rgb(212,155,44)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="613" width="0.1003%" height="15" fill="rgb(226,2,50)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="597" width="0.1003%" height="15" fill="rgb(234,177,6)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="581" width="0.1003%" height="15" fill="rgb(217,24,9)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="565" width="0.1003%" height="15" fill="rgb(220,13,46)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="549" width="0.1003%" height="15" fill="rgb(239,221,27)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="533" width="0.1003%" height="15" fill="rgb(222,198,25)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="517" width="0.1003%" height="15" fill="rgb(211,99,13)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="501" width="0.1003%" height="15" fill="rgb(232,111,31)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="485" width="0.1003%" height="15" fill="rgb(245,82,37)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="469" width="0.1003%" height="15" fill="rgb(227,149,46)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="453" width="0.1003%" height="15" fill="rgb(218,36,50)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="437" width="0.1003%" height="15" fill="rgb(226,80,48)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="421" width="0.1003%" height="15" fill="rgb(238,224,15)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="405" width="0.1003%" height="15" fill="rgb(241,136,10)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="389" width="0.1003%" height="15" fill="rgb(208,32,45)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="373" width="0.1003%" height="15" fill="rgb(207,135,9)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="357" width="0.1003%" height="15" fill="rgb(206,86,44)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="341" width="0.1003%" height="15" fill="rgb(245,177,15)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="325" width="0.1003%" height="15" fill="rgb(206,64,50)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="335.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="309" width="0.1003%" height="15" fill="rgb(234,36,40)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="293" width="0.1003%" height="15" fill="rgb(213,64,8)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="277" width="0.1003%" height="15" fill="rgb(210,75,36)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="287.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="261" width="0.1003%" height="15" fill="rgb(229,88,21)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="271.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="245" width="0.1003%" height="15" fill="rgb(252,204,47)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="229" width="0.1003%" height="15" fill="rgb(208,77,27)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="213" width="0.1003%" height="15" fill="rgb(221,76,26)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="197" width="0.1003%" height="15" fill="rgb(225,139,18)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="181" width="0.1003%" height="15" fill="rgb(230,137,11)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="165" width="0.1003%" height="15" fill="rgb(212,28,1)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="149" width="0.1003%" height="15" fill="rgb(248,164,17)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="133" width="0.1003%" height="15" fill="rgb(222,171,42)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="117" width="0.1003%" height="15" fill="rgb(243,84,45)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="101" width="0.1003%" height="15" fill="rgb(252,49,23)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="85" width="0.1003%" height="15" fill="rgb(215,19,7)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="69" width="0.1003%" height="15" fill="rgb(238,81,41)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="53" width="0.1003%" height="15" fill="rgb(210,199,37)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="37" width="0.1003%" height="15" fill="rgb(244,192,49)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="677" width="0.1003%" height="15" fill="rgb(226,211,11)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="661" width="0.1003%" height="15" fill="rgb(236,162,54)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="645" width="0.1003%" height="15" fill="rgb(220,229,9)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="629" width="0.1003%" height="15" fill="rgb(250,87,22)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="613" width="0.1003%" height="15" fill="rgb(239,43,17)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="597" width="0.1003%" height="15" fill="rgb(231,177,25)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="581" width="0.1003%" height="15" fill="rgb(219,179,1)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="591.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="565" width="0.1003%" height="15" fill="rgb(238,219,53)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,006,018 samples, 0.20%)</title><rect x="99.5988%" y="725" width="0.2006%" height="15" fill="rgb(232,167,36)" fg:x="995987937" fg:w="2006018"/><text x="99.8488%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,006,018 samples, 0.20%)</title><rect x="99.5988%" y="709" width="0.2006%" height="15" fill="rgb(244,19,51)" fg:x="995987937" fg:w="2006018"/><text x="99.8488%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,006,018 samples, 0.20%)</title><rect x="99.5988%" y="693" width="0.2006%" height="15" fill="rgb(224,6,22)" fg:x="995987937" fg:w="2006018"/><text x="99.8488%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="677" width="0.1003%" height="15" fill="rgb(224,145,5)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="661" width="0.1003%" height="15" fill="rgb(234,130,49)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="671.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="645" width="0.1003%" height="15" fill="rgb(254,6,2)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="655.50"></text></g><g><title>all (999,999,973 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1103.50"></text></g><g><title>aoc-2024-megapr (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1087.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1039.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="863.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="847.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="815.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="799.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (4,012,036 samples, 0.40%)</title><rect x="99.5988%" y="773" width="0.4012%" height="15" fill="rgb(251,153,30)" fg:x="995987937" fg:w="4012036"/><text x="99.8488%" y="783.50"></text></g><g><title>std::env::args_os (4,012,036 samples, 0.40%)</title><rect x="99.5988%" y="757" width="0.4012%" height="15" fill="rgb(239,152,38)" fg:x="995987937" fg:w="4012036"/><text x="99.8488%" y="767.50"></text></g><g><title>std::sys::args::unix::args (4,012,036 samples, 0.40%)</title><rect x="99.5988%" y="741" width="0.4012%" height="15" fill="rgb(249,139,47)" fg:x="995987937" fg:w="4012036"/><text x="99.8488%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="725" width="0.2006%" height="15" fill="rgb(244,64,35)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="709" width="0.2006%" height="15" fill="rgb(216,46,15)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="693" width="0.2006%" height="15" fill="rgb(250,74,19)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="677" width="0.2006%" height="15" fill="rgb(249,42,33)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="661" width="0.2006%" height="15" fill="rgb(242,149,17)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="645" width="0.1003%" height="15" fill="rgb(244,29,21)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="629" width="0.1003%" height="15" fill="rgb(220,130,37)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="613" width="0.1003%" height="15" fill="rgb(211,67,2)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="623.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="597" width="0.1003%" height="15" fill="rgb(235,68,52)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="607.50"></text></g></svg></svg>