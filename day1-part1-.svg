<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (108,324,972 samples, 10.82%)</title><rect x="0.0000%" y="309" width="10.8216%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="108324972"/><text x="0.2500%" y="319.50">&lt;core::str::iter..</text></g><g><title>core::str::validations::next_code_point (108,324,972 samples, 10.82%)</title><rect x="0.0000%" y="293" width="10.8216%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="108324972"/><text x="0.2500%" y="303.50">core::str::valid..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (81,243,729 samples, 8.12%)</title><rect x="2.7054%" y="277" width="8.1162%" height="15" fill="rgb(221,193,54)" fg:x="27081243" fg:w="81243729"/><text x="2.9554%" y="287.50">&lt;core::slic..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (81,243,729 samples, 8.12%)</title><rect x="2.7054%" y="261" width="8.1162%" height="15" fill="rgb(248,212,6)" fg:x="27081243" fg:w="81243729"/><text x="2.9554%" y="271.50">&lt;core::ptr:..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (11,033,099 samples, 1.10%)</title><rect x="10.8216%" y="293" width="1.1022%" height="15" fill="rgb(208,68,35)" fg:x="108324972" fg:w="11033099"/><text x="11.0716%" y="303.50"></text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (11,033,099 samples, 1.10%)</title><rect x="10.8216%" y="277" width="1.1022%" height="15" fill="rgb(232,128,0)" fg:x="108324972" fg:w="11033099"/><text x="11.0716%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (145,436,305 samples, 14.53%)</title><rect x="0.0000%" y="389" width="14.5291%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="145436305"/><text x="0.2500%" y="399.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (145,436,305 samples, 14.53%)</title><rect x="0.0000%" y="373" width="14.5291%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="145436305"/><text x="0.2500%" y="383.50">core::iter::traits::it..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (145,436,305 samples, 14.53%)</title><rect x="0.0000%" y="357" width="14.5291%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="145436305"/><text x="0.2500%" y="367.50">&lt;usize as core::iter::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (145,436,305 samples, 14.53%)</title><rect x="0.0000%" y="341" width="14.5291%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="145436305"/><text x="0.2500%" y="351.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (145,436,305 samples, 14.53%)</title><rect x="0.0000%" y="325" width="14.5291%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="145436305"/><text x="0.2500%" y="335.50">core::iter::traits::it..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (37,111,333 samples, 3.71%)</title><rect x="10.8216%" y="309" width="3.7074%" height="15" fill="rgb(240,193,28)" fg:x="108324972" fg:w="37111333"/><text x="11.0716%" y="319.50">core..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (26,078,234 samples, 2.61%)</title><rect x="11.9238%" y="293" width="2.6052%" height="15" fill="rgb(216,20,37)" fg:x="119358071" fg:w="26078234"/><text x="12.1738%" y="303.50">&lt;u..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (86,258,774 samples, 8.62%)</title><rect x="29.8597%" y="229" width="8.6172%" height="15" fill="rgb(206,188,39)" fg:x="298896682" fg:w="86258774"/><text x="30.1097%" y="239.50">&lt;F as core::..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (86,258,774 samples, 8.62%)</title><rect x="29.8597%" y="213" width="8.6172%" height="15" fill="rgb(217,207,13)" fg:x="298896682" fg:w="86258774"/><text x="30.1097%" y="223.50">&lt;core::str::..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (86,258,774 samples, 8.62%)</title><rect x="29.8597%" y="197" width="8.6172%" height="15" fill="rgb(231,73,38)" fg:x="298896682" fg:w="86258774"/><text x="30.1097%" y="207.50">&lt;core::str::..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (86,258,774 samples, 8.62%)</title><rect x="29.8597%" y="181" width="8.6172%" height="15" fill="rgb(225,20,46)" fg:x="298896682" fg:w="86258774"/><text x="30.1097%" y="191.50">core::char::..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (209,628,881 samples, 20.94%)</title><rect x="29.8597%" y="277" width="20.9419%" height="15" fill="rgb(210,31,41)" fg:x="298896682" fg:w="209628881"/><text x="30.1097%" y="287.50">&lt;core::str::pattern::CharPredicat..</text></g><g><title>core::str::pattern::Searcher::next_match (209,628,881 samples, 20.94%)</title><rect x="29.8597%" y="261" width="20.9419%" height="15" fill="rgb(221,200,47)" fg:x="298896682" fg:w="209628881"/><text x="30.1097%" y="271.50">core::str::pattern::Searcher::nex..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (209,628,881 samples, 20.94%)</title><rect x="29.8597%" y="245" width="20.9419%" height="15" fill="rgb(226,26,5)" fg:x="298896682" fg:w="209628881"/><text x="30.1097%" y="255.50">&lt;core::str::pattern::MultiCharEqS..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (123,370,107 samples, 12.32%)</title><rect x="38.4770%" y="229" width="12.3246%" height="15" fill="rgb(249,33,26)" fg:x="385155456" fg:w="123370107"/><text x="38.7270%" y="239.50">&lt;core::str::iter::..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (88,264,792 samples, 8.82%)</title><rect x="41.9840%" y="213" width="8.8176%" height="15" fill="rgb(235,183,28)" fg:x="420260771" fg:w="88264792"/><text x="42.2340%" y="223.50">&lt;core::str::..</text></g><g><title>core::str::validations::next_code_point (88,264,792 samples, 8.82%)</title><rect x="41.9840%" y="197" width="8.8176%" height="15" fill="rgb(221,5,38)" fg:x="420260771" fg:w="88264792"/><text x="42.2340%" y="207.50">core::str::v..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 0.50%)</title><rect x="50.3006%" y="181" width="0.5010%" height="15" fill="rgb(247,18,42)" fg:x="503510518" fg:w="5015045"/><text x="50.5506%" y="191.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (364,092,267 samples, 36.37%)</title><rect x="14.5291%" y="373" width="36.3727%" height="15" fill="rgb(241,131,45)" fg:x="145436305" fg:w="364092267"/><text x="14.7791%" y="383.50">&lt;core::str::iter::SplitWhitespace as core::iter::traits::it..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (364,092,267 samples, 36.37%)</title><rect x="14.5291%" y="357" width="36.3727%" height="15" fill="rgb(249,31,29)" fg:x="145436305" fg:w="364092267"/><text x="14.7791%" y="367.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::find (364,092,267 samples, 36.37%)</title><rect x="14.5291%" y="341" width="36.3727%" height="15" fill="rgb(225,111,53)" fg:x="145436305" fg:w="364092267"/><text x="14.7791%" y="351.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (362,086,249 samples, 36.17%)</title><rect x="14.7295%" y="325" width="36.1723%" height="15" fill="rgb(238,160,17)" fg:x="147442323" fg:w="362086249"/><text x="14.9795%" y="335.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (225,677,025 samples, 22.55%)</title><rect x="28.3567%" y="309" width="22.5451%" height="15" fill="rgb(214,148,48)" fg:x="283851547" fg:w="225677025"/><text x="28.6067%" y="319.50">&lt;core::str::iter::Split&lt;P&gt; as core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (225,677,025 samples, 22.55%)</title><rect x="28.3567%" y="293" width="22.5451%" height="15" fill="rgb(232,36,49)" fg:x="283851547" fg:w="225677025"/><text x="28.6067%" y="303.50">core::str::iter::SplitInternal&lt;P&gt;::n..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1,003,009 samples, 0.10%)</title><rect x="50.8016%" y="277" width="0.1002%" height="15" fill="rgb(209,103,24)" fg:x="508525563" fg:w="1003009"/><text x="51.0516%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (28,084,252 samples, 2.81%)</title><rect x="58.3166%" y="261" width="2.8056%" height="15" fill="rgb(229,88,8)" fg:x="583751238" fg:w="28084252"/><text x="58.5666%" y="271.50">co..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (14,042,126 samples, 1.40%)</title><rect x="59.7194%" y="245" width="1.4028%" height="15" fill="rgb(213,181,19)" fg:x="597793364" fg:w="14042126"/><text x="59.9694%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (467,402,194 samples, 46.69%)</title><rect x="14.5291%" y="389" width="46.6934%" height="15" fill="rgb(254,191,54)" fg:x="145436305" fg:w="467402194"/><text x="14.7791%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterato..</text></g><g><title>core::option::Option&lt;T&gt;::map (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="373" width="10.3206%" height="15" fill="rgb(241,83,37)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="383.50">core::option::O..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="357" width="10.3206%" height="15" fill="rgb(233,36,39)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="367.50">core::ops::func..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="341" width="10.3206%" height="15" fill="rgb(226,3,54)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="351.50">aoc_2024_megapr..</text></g><g><title>core::str::&lt;impl str&gt;::parse (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="325" width="10.3206%" height="15" fill="rgb(245,192,40)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="335.50">core::str::&lt;imp..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="309" width="10.3206%" height="15" fill="rgb(238,167,29)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="319.50">core::num::&lt;imp..</text></g><g><title>core::num::&lt;impl u32&gt;::from_str_radix (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="293" width="10.3206%" height="15" fill="rgb(232,182,51)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="303.50">core::num::&lt;imp..</text></g><g><title>core::num::&lt;impl u32&gt;::from_ascii_radix (103,309,927 samples, 10.32%)</title><rect x="50.9018%" y="277" width="10.3206%" height="15" fill="rgb(231,60,39)" fg:x="509528572" fg:w="103309927"/><text x="51.1518%" y="287.50">core::num::&lt;imp..</text></g><g><title>core::num::can_not_overflow (1,003,009 samples, 0.10%)</title><rect x="61.1222%" y="261" width="0.1002%" height="15" fill="rgb(208,69,12)" fg:x="611835490" fg:w="1003009"/><text x="61.3722%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="373" width="0.3006%" height="15" fill="rgb(235,93,37)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="357" width="0.3006%" height="15" fill="rgb(213,116,39)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="341" width="0.3006%" height="15" fill="rgb(222,207,29)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="325" width="0.3006%" height="15" fill="rgb(206,96,30)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="309" width="0.3006%" height="15" fill="rgb(218,138,4)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="293" width="0.3006%" height="15" fill="rgb(250,191,14)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="303.50"></text></g><g><title>alloc::alloc::realloc (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="277" width="0.3006%" height="15" fill="rgb(239,60,40)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="287.50"></text></g><g><title>realloc (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="261" width="0.3006%" height="15" fill="rgb(206,27,48)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="271.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="245" width="0.3006%" height="15" fill="rgb(225,35,8)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="255.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="68.4369%" y="229" width="0.3006%" height="15" fill="rgb(250,213,24)" fg:x="685055147" fg:w="3009027"/><text x="68.6869%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (85,255,765 samples, 8.52%)</title><rect x="61.2224%" y="389" width="8.5170%" height="15" fill="rgb(247,123,22)" fg:x="612838499" fg:w="85255765"/><text x="61.4724%" y="399.50">alloc::vec::..</text></g><g><title>core::ptr::write (10,030,090 samples, 1.00%)</title><rect x="68.7375%" y="373" width="1.0020%" height="15" fill="rgb(231,138,38)" fg:x="688064174" fg:w="10030090"/><text x="68.9875%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="389" width="0.4008%" height="15" fill="rgb(231,145,46)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="373" width="0.4008%" height="15" fill="rgb(251,118,11)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="357" width="0.4008%" height="15" fill="rgb(217,147,25)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="341" width="0.4008%" height="15" fill="rgb(247,81,37)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="325" width="0.4008%" height="15" fill="rgb(209,12,38)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="309" width="0.4008%" height="15" fill="rgb(227,1,9)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="293" width="0.4008%" height="15" fill="rgb(248,47,43)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="303.50"></text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="277" width="0.4008%" height="15" fill="rgb(221,10,30)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="287.50"></text></g><g><title>__rustc::__rust_alloc (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="261" width="0.4008%" height="15" fill="rgb(210,229,1)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="271.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="245" width="0.4008%" height="15" fill="rgb(222,148,37)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="229" width="0.4008%" height="15" fill="rgb(234,67,33)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="239.50"></text></g><g><title>malloc (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="213" width="0.4008%" height="15" fill="rgb(247,98,35)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="223.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="69.7395%" y="197" width="0.4008%" height="15" fill="rgb(247,138,52)" fg:x="698094264" fg:w="4012036"/><text x="69.9895%" y="207.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (1,003,009 samples, 0.10%)</title><rect x="70.1403%" y="181" width="0.1002%" height="15" fill="rgb(213,79,30)" fg:x="702106300" fg:w="1003009"/><text x="70.3903%" y="191.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (1,003,009 samples, 0.10%)</title><rect x="70.1403%" y="165" width="0.1002%" height="15" fill="rgb(246,177,23)" fg:x="702106300" fg:w="1003009"/><text x="70.3903%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="70.1403%" y="149" width="0.1002%" height="15" fill="rgb(230,62,27)" fg:x="702106300" fg:w="1003009"/><text x="70.3903%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="70.2405%" y="133" width="0.1002%" height="15" fill="rgb(216,154,8)" fg:x="703109309" fg:w="1003009"/><text x="70.4905%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="70.7415%" y="117" width="0.1002%" height="15" fill="rgb(244,35,45)" fg:x="708124354" fg:w="1003009"/><text x="70.9915%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (7,021,063 samples, 0.70%)</title><rect x="70.2405%" y="165" width="0.7014%" height="15" fill="rgb(251,115,12)" fg:x="703109309" fg:w="7021063"/><text x="70.4905%" y="175.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (7,021,063 samples, 0.70%)</title><rect x="70.2405%" y="149" width="0.7014%" height="15" fill="rgb(240,54,50)" fg:x="703109309" fg:w="7021063"/><text x="70.4905%" y="159.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (6,018,054 samples, 0.60%)</title><rect x="70.3407%" y="133" width="0.6012%" height="15" fill="rgb(233,84,52)" fg:x="704112318" fg:w="6018054"/><text x="70.5907%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="70.8417%" y="117" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="709127363" fg:w="1003009"/><text x="71.0917%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="70.8417%" y="101" width="0.1002%" height="15" fill="rgb(249,43,39)" fg:x="709127363" fg:w="1003009"/><text x="71.0917%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="70.9419%" y="149" width="0.2004%" height="15" fill="rgb(209,38,44)" fg:x="710130372" fg:w="2006018"/><text x="71.1919%" y="159.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="70.9419%" y="133" width="0.2004%" height="15" fill="rgb(236,212,23)" fg:x="710130372" fg:w="2006018"/><text x="71.1919%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="71.1423%" y="133" width="0.1002%" height="15" fill="rgb(242,79,21)" fg:x="712136390" fg:w="1003009"/><text x="71.3923%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="71.1423%" y="117" width="0.1002%" height="15" fill="rgb(211,96,35)" fg:x="712136390" fg:w="1003009"/><text x="71.3923%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="71.1423%" y="101" width="0.1002%" height="15" fill="rgb(253,215,40)" fg:x="712136390" fg:w="1003009"/><text x="71.3923%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.30%)</title><rect x="71.2425%" y="133" width="0.3006%" height="15" fill="rgb(211,81,21)" fg:x="713139399" fg:w="3009027"/><text x="71.4925%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="71.4429%" y="117" width="0.1002%" height="15" fill="rgb(208,190,38)" fg:x="715145417" fg:w="1003009"/><text x="71.6929%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="71.4429%" y="101" width="0.1002%" height="15" fill="rgb(235,213,38)" fg:x="715145417" fg:w="1003009"/><text x="71.6929%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="71.5431%" y="117" width="0.2004%" height="15" fill="rgb(237,122,38)" fg:x="716148426" fg:w="2006018"/><text x="71.7931%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (9,027,081 samples, 0.90%)</title><rect x="71.1423%" y="149" width="0.9018%" height="15" fill="rgb(244,218,35)" fg:x="712136390" fg:w="9027081"/><text x="71.3923%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (5,015,045 samples, 0.50%)</title><rect x="71.5431%" y="133" width="0.5010%" height="15" fill="rgb(240,68,47)" fg:x="716148426" fg:w="5015045"/><text x="71.7931%" y="143.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="71.7435%" y="117" width="0.3006%" height="15" fill="rgb(210,16,53)" fg:x="718154444" fg:w="3009027"/><text x="71.9935%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="71.7435%" y="101" width="0.3006%" height="15" fill="rgb(235,124,12)" fg:x="718154444" fg:w="3009027"/><text x="71.9935%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="72.0441%" y="149" width="0.1002%" height="15" fill="rgb(224,169,11)" fg:x="721163471" fg:w="1003009"/><text x="72.2941%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="72.0441%" y="133" width="0.1002%" height="15" fill="rgb(250,166,2)" fg:x="721163471" fg:w="1003009"/><text x="72.2941%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (13,039,117 samples, 1.30%)</title><rect x="70.9419%" y="165" width="1.3026%" height="15" fill="rgb(242,216,29)" fg:x="710130372" fg:w="13039117"/><text x="71.1919%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="72.1443%" y="149" width="0.1002%" height="15" fill="rgb(230,116,27)" fg:x="722166480" fg:w="1003009"/><text x="72.3943%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="72.1443%" y="133" width="0.1002%" height="15" fill="rgb(228,99,48)" fg:x="722166480" fg:w="1003009"/><text x="72.3943%" y="143.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="72.1443%" y="117" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="722166480" fg:w="1003009"/><text x="72.3943%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="72.2445%" y="149" width="0.1002%" height="15" fill="rgb(247,143,39)" fg:x="723169489" fg:w="1003009"/><text x="72.4945%" y="159.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="72.2445%" y="133" width="0.1002%" height="15" fill="rgb(236,97,10)" fg:x="723169489" fg:w="1003009"/><text x="72.4945%" y="143.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="72.2445%" y="117" width="0.1002%" height="15" fill="rgb(233,208,19)" fg:x="723169489" fg:w="1003009"/><text x="72.4945%" y="127.50"></text></g><g><title>core::intrinsics::copy (34,102,306 samples, 3.41%)</title><rect x="72.5451%" y="117" width="3.4068%" height="15" fill="rgb(216,164,2)" fg:x="726178516" fg:w="34102306"/><text x="72.7951%" y="127.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (44,132,396 samples, 4.41%)</title><rect x="72.2445%" y="165" width="4.4088%" height="15" fill="rgb(220,129,5)" fg:x="723169489" fg:w="44132396"/><text x="72.4945%" y="175.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (43,129,387 samples, 4.31%)</title><rect x="72.3447%" y="149" width="4.3086%" height="15" fill="rgb(242,17,10)" fg:x="724172498" fg:w="43129387"/><text x="72.5947%" y="159.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (43,129,387 samples, 4.31%)</title><rect x="72.3447%" y="133" width="4.3086%" height="15" fill="rgb(242,107,0)" fg:x="724172498" fg:w="43129387"/><text x="72.5947%" y="143.50">core:..</text></g><g><title>core::ops::function::FnMut::call_mut (7,021,063 samples, 0.70%)</title><rect x="75.9519%" y="117" width="0.7014%" height="15" fill="rgb(251,28,31)" fg:x="760280822" fg:w="7021063"/><text x="76.2019%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (7,021,063 samples, 0.70%)</title><rect x="75.9519%" y="101" width="0.7014%" height="15" fill="rgb(233,223,10)" fg:x="760280822" fg:w="7021063"/><text x="76.2019%" y="111.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="76.7535%" y="149" width="0.1002%" height="15" fill="rgb(215,21,27)" fg:x="768304894" fg:w="1003009"/><text x="77.0035%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="76.7535%" y="133" width="0.1002%" height="15" fill="rgb(232,23,21)" fg:x="768304894" fg:w="1003009"/><text x="77.0035%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (4,012,036 samples, 0.40%)</title><rect x="76.8537%" y="149" width="0.4008%" height="15" fill="rgb(244,5,23)" fg:x="769307903" fg:w="4012036"/><text x="77.1037%" y="159.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="76.8537%" y="133" width="0.4008%" height="15" fill="rgb(226,81,46)" fg:x="769307903" fg:w="4012036"/><text x="77.1037%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="77.0541%" y="117" width="0.2004%" height="15" fill="rgb(247,70,30)" fg:x="771313921" fg:w="2006018"/><text x="77.3041%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="77.1543%" y="101" width="0.1002%" height="15" fill="rgb(212,68,19)" fg:x="772316930" fg:w="1003009"/><text x="77.4043%" y="111.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="77.1543%" y="85" width="0.1002%" height="15" fill="rgb(240,187,13)" fg:x="772316930" fg:w="1003009"/><text x="77.4043%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="77.4549%" y="133" width="0.1002%" height="15" fill="rgb(223,113,26)" fg:x="775325957" fg:w="1003009"/><text x="77.7049%" y="143.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="77.4549%" y="117" width="0.1002%" height="15" fill="rgb(206,192,2)" fg:x="775325957" fg:w="1003009"/><text x="77.7049%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="77.6553%" y="117" width="0.1002%" height="15" fill="rgb(241,108,4)" fg:x="777331975" fg:w="1003009"/><text x="77.9053%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="77.6553%" y="101" width="0.1002%" height="15" fill="rgb(247,173,49)" fg:x="777331975" fg:w="1003009"/><text x="77.9053%" y="111.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="77.6553%" y="85" width="0.1002%" height="15" fill="rgb(224,114,35)" fg:x="777331975" fg:w="1003009"/><text x="77.9053%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="77.6553%" y="69" width="0.1002%" height="15" fill="rgb(245,159,27)" fg:x="777331975" fg:w="1003009"/><text x="77.9053%" y="79.50"></text></g><g><title>core::ops::function::FnMut::call_mut (6,018,054 samples, 0.60%)</title><rect x="77.9559%" y="101" width="0.6012%" height="15" fill="rgb(245,172,44)" fg:x="780341002" fg:w="6018054"/><text x="78.2059%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (6,018,054 samples, 0.60%)</title><rect x="77.9559%" y="85" width="0.6012%" height="15" fill="rgb(236,23,11)" fg:x="780341002" fg:w="6018054"/><text x="78.2059%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (9,027,081 samples, 0.90%)</title><rect x="77.7555%" y="117" width="0.9018%" height="15" fill="rgb(205,117,38)" fg:x="778334984" fg:w="9027081"/><text x="78.0055%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="78.5571%" y="101" width="0.1002%" height="15" fill="rgb(237,72,25)" fg:x="786359056" fg:w="1003009"/><text x="78.8071%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="78.5571%" y="85" width="0.1002%" height="15" fill="rgb(244,70,9)" fg:x="786359056" fg:w="1003009"/><text x="78.8071%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (17,051,153 samples, 1.70%)</title><rect x="77.5551%" y="133" width="1.7034%" height="15" fill="rgb(217,125,39)" fg:x="776328966" fg:w="17051153"/><text x="77.8051%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (6,018,054 samples, 0.60%)</title><rect x="78.6573%" y="117" width="0.6012%" height="15" fill="rgb(235,36,10)" fg:x="787362065" fg:w="6018054"/><text x="78.9073%" y="127.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="78.9579%" y="101" width="0.3006%" height="15" fill="rgb(251,123,47)" fg:x="790371092" fg:w="3009027"/><text x="79.2079%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="78.9579%" y="85" width="0.3006%" height="15" fill="rgb(221,13,13)" fg:x="790371092" fg:w="3009027"/><text x="79.2079%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="79.2585%" y="117" width="0.1002%" height="15" fill="rgb(238,131,9)" fg:x="793380119" fg:w="1003009"/><text x="79.5085%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (8,024,072 samples, 0.80%)</title><rect x="79.2585%" y="133" width="0.8016%" height="15" fill="rgb(211,50,8)" fg:x="793380119" fg:w="8024072"/><text x="79.5085%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7,021,063 samples, 0.70%)</title><rect x="79.3587%" y="117" width="0.7014%" height="15" fill="rgb(245,182,24)" fg:x="794383128" fg:w="7021063"/><text x="79.6087%" y="127.50"></text></g><g><title>core::intrinsics::copy (4,012,036 samples, 0.40%)</title><rect x="80.0601%" y="101" width="0.4008%" height="15" fill="rgb(242,14,37)" fg:x="801404191" fg:w="4012036"/><text x="80.3101%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="80.4609%" y="101" width="0.1002%" height="15" fill="rgb(246,228,12)" fg:x="805416227" fg:w="1003009"/><text x="80.7109%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (7,021,063 samples, 0.70%)</title><rect x="80.0601%" y="133" width="0.7014%" height="15" fill="rgb(213,55,15)" fg:x="801404191" fg:w="7021063"/><text x="80.3101%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (7,021,063 samples, 0.70%)</title><rect x="80.0601%" y="117" width="0.7014%" height="15" fill="rgb(209,9,3)" fg:x="801404191" fg:w="7021063"/><text x="80.3101%" y="127.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="80.5611%" y="101" width="0.2004%" height="15" fill="rgb(230,59,30)" fg:x="806419236" fg:w="2006018"/><text x="80.8111%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (36,108,324 samples, 3.61%)</title><rect x="77.2545%" y="149" width="3.6072%" height="15" fill="rgb(209,121,21)" fg:x="773319939" fg:w="36108324"/><text x="77.5045%" y="159.50">core..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="80.7615%" y="133" width="0.1002%" height="15" fill="rgb(220,109,13)" fg:x="808425254" fg:w="1003009"/><text x="81.0115%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="80.7615%" y="117" width="0.1002%" height="15" fill="rgb(232,18,1)" fg:x="808425254" fg:w="1003009"/><text x="81.0115%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="80.7615%" y="101" width="0.1002%" height="15" fill="rgb(215,41,42)" fg:x="808425254" fg:w="1003009"/><text x="81.0115%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="80.8617%" y="133" width="0.1002%" height="15" fill="rgb(224,123,36)" fg:x="809428263" fg:w="1003009"/><text x="81.1117%" y="143.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="80.8617%" y="117" width="0.1002%" height="15" fill="rgb(240,125,3)" fg:x="809428263" fg:w="1003009"/><text x="81.1117%" y="127.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="80.8617%" y="101" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="809428263" fg:w="1003009"/><text x="81.1117%" y="111.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="80.9619%" y="117" width="0.1002%" height="15" fill="rgb(205,185,37)" fg:x="810431272" fg:w="1003009"/><text x="81.2119%" y="127.50"></text></g><g><title>core::intrinsics::copy (39,117,351 samples, 3.91%)</title><rect x="81.4629%" y="101" width="3.9078%" height="15" fill="rgb(238,207,15)" fg:x="815446317" fg:w="39117351"/><text x="81.7129%" y="111.50">core..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (57,171,513 samples, 5.71%)</title><rect x="80.8617%" y="149" width="5.7114%" height="15" fill="rgb(213,199,42)" fg:x="809428263" fg:w="57171513"/><text x="81.1117%" y="159.50">core::s..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (56,168,504 samples, 5.61%)</title><rect x="80.9619%" y="133" width="5.6112%" height="15" fill="rgb(235,201,11)" fg:x="810431272" fg:w="56168504"/><text x="81.2119%" y="143.50">core::s..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (55,165,495 samples, 5.51%)</title><rect x="81.0621%" y="117" width="5.5110%" height="15" fill="rgb(207,46,11)" fg:x="811434281" fg:w="55165495"/><text x="81.3121%" y="127.50">core::s..</text></g><g><title>core::ops::function::FnMut::call_mut (12,036,108 samples, 1.20%)</title><rect x="85.3707%" y="101" width="1.2024%" height="15" fill="rgb(241,35,35)" fg:x="854563668" fg:w="12036108"/><text x="85.6207%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (12,036,108 samples, 1.20%)</title><rect x="85.3707%" y="85" width="1.2024%" height="15" fill="rgb(243,32,47)" fg:x="854563668" fg:w="12036108"/><text x="85.6207%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="86.6733%" y="133" width="0.1002%" height="15" fill="rgb(247,202,23)" fg:x="867602785" fg:w="1003009"/><text x="86.9233%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="86.6733%" y="117" width="0.1002%" height="15" fill="rgb(219,102,11)" fg:x="867602785" fg:w="1003009"/><text x="86.9233%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="86.7735%" y="133" width="0.2004%" height="15" fill="rgb(243,110,44)" fg:x="868605794" fg:w="2006018"/><text x="87.0235%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="86.7735%" y="117" width="0.2004%" height="15" fill="rgb(222,74,54)" fg:x="868605794" fg:w="2006018"/><text x="87.0235%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="86.8737%" y="101" width="0.1002%" height="15" fill="rgb(216,99,12)" fg:x="869608803" fg:w="1003009"/><text x="87.1237%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="87.0741%" y="117" width="0.1002%" height="15" fill="rgb(226,22,26)" fg:x="871614821" fg:w="1003009"/><text x="87.3241%" y="127.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="87.0741%" y="101" width="0.1002%" height="15" fill="rgb(217,163,10)" fg:x="871614821" fg:w="1003009"/><text x="87.3241%" y="111.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="87.1743%" y="101" width="0.2004%" height="15" fill="rgb(213,25,53)" fg:x="872617830" fg:w="2006018"/><text x="87.4243%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="87.1743%" y="85" width="0.2004%" height="15" fill="rgb(252,105,26)" fg:x="872617830" fg:w="2006018"/><text x="87.4243%" y="95.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,006,018 samples, 0.20%)</title><rect x="87.1743%" y="69" width="0.2004%" height="15" fill="rgb(220,39,43)" fg:x="872617830" fg:w="2006018"/><text x="87.4243%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,006,018 samples, 0.20%)</title><rect x="87.1743%" y="53" width="0.2004%" height="15" fill="rgb(229,68,48)" fg:x="872617830" fg:w="2006018"/><text x="87.4243%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.30%)</title><rect x="87.3747%" y="101" width="0.3006%" height="15" fill="rgb(252,8,32)" fg:x="874623848" fg:w="3009027"/><text x="87.6247%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="87.4749%" y="85" width="0.2004%" height="15" fill="rgb(223,20,43)" fg:x="875626857" fg:w="2006018"/><text x="87.7249%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (2,006,018 samples, 0.20%)</title><rect x="87.4749%" y="69" width="0.2004%" height="15" fill="rgb(229,81,49)" fg:x="875626857" fg:w="2006018"/><text x="87.7249%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10,030,090 samples, 1.00%)</title><rect x="87.1743%" y="117" width="1.0020%" height="15" fill="rgb(236,28,36)" fg:x="872617830" fg:w="10030090"/><text x="87.4243%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (5,015,045 samples, 0.50%)</title><rect x="87.6754%" y="101" width="0.5010%" height="15" fill="rgb(249,185,26)" fg:x="877632875" fg:w="5015045"/><text x="87.9254%" y="111.50"></text></g><g><title>core::ops::function::FnMut::call_mut (4,012,036 samples, 0.40%)</title><rect x="87.7756%" y="85" width="0.4008%" height="15" fill="rgb(249,174,33)" fg:x="878635884" fg:w="4012036"/><text x="88.0256%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (4,012,036 samples, 0.40%)</title><rect x="87.7756%" y="69" width="0.4008%" height="15" fill="rgb(233,201,37)" fg:x="878635884" fg:w="4012036"/><text x="88.0256%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (7,021,063 samples, 0.70%)</title><rect x="88.1764%" y="117" width="0.7014%" height="15" fill="rgb(221,78,26)" fg:x="882647920" fg:w="7021063"/><text x="88.4264%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7,021,063 samples, 0.70%)</title><rect x="88.1764%" y="101" width="0.7014%" height="15" fill="rgb(250,127,30)" fg:x="882647920" fg:w="7021063"/><text x="88.4264%" y="111.50"></text></g><g><title>core::intrinsics::copy (6,018,054 samples, 0.60%)</title><rect x="88.8778%" y="85" width="0.6012%" height="15" fill="rgb(230,49,44)" fg:x="889668983" fg:w="6018054"/><text x="89.1278%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="89.4790%" y="85" width="0.1002%" height="15" fill="rgb(229,67,23)" fg:x="895687037" fg:w="1003009"/><text x="89.7290%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (10,030,090 samples, 1.00%)</title><rect x="88.8778%" y="117" width="1.0020%" height="15" fill="rgb(249,83,47)" fg:x="889668983" fg:w="10030090"/><text x="89.1278%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (10,030,090 samples, 1.00%)</title><rect x="88.8778%" y="101" width="1.0020%" height="15" fill="rgb(215,43,3)" fg:x="889668983" fg:w="10030090"/><text x="89.1278%" y="111.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.30%)</title><rect x="89.5792%" y="85" width="0.3006%" height="15" fill="rgb(238,154,13)" fg:x="896690046" fg:w="3009027"/><text x="89.8292%" y="95.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="89.8798%" y="85" width="0.1002%" height="15" fill="rgb(219,56,2)" fg:x="899699073" fg:w="1003009"/><text x="90.1298%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (31,093,279 samples, 3.11%)</title><rect x="86.9739%" y="133" width="3.1062%" height="15" fill="rgb(233,0,4)" fg:x="870611812" fg:w="31093279"/><text x="87.2239%" y="143.50">cor..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="89.8798%" y="117" width="0.2004%" height="15" fill="rgb(235,30,7)" fg:x="899699073" fg:w="2006018"/><text x="90.1298%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="89.8798%" y="101" width="0.2004%" height="15" fill="rgb(250,79,13)" fg:x="899699073" fg:w="2006018"/><text x="90.1298%" y="111.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="89.9800%" y="85" width="0.1002%" height="15" fill="rgb(211,146,34)" fg:x="900702082" fg:w="1003009"/><text x="90.2300%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="90.0802%" y="117" width="0.1002%" height="15" fill="rgb(228,22,38)" fg:x="901705091" fg:w="1003009"/><text x="90.3302%" y="127.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="90.0802%" y="101" width="0.1002%" height="15" fill="rgb(235,168,5)" fg:x="901705091" fg:w="1003009"/><text x="90.3302%" y="111.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="90.0802%" y="85" width="0.1002%" height="15" fill="rgb(221,155,16)" fg:x="901705091" fg:w="1003009"/><text x="90.3302%" y="95.50"></text></g><g><title>core::intrinsics::copy (27,081,243 samples, 2.71%)</title><rect x="90.4810%" y="85" width="2.7054%" height="15" fill="rgb(215,215,53)" fg:x="905717127" fg:w="27081243"/><text x="90.7310%" y="95.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (35,105,315 samples, 3.51%)</title><rect x="90.0802%" y="133" width="3.5070%" height="15" fill="rgb(223,4,10)" fg:x="901705091" fg:w="35105315"/><text x="90.3302%" y="143.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (34,102,306 samples, 3.41%)</title><rect x="90.1804%" y="117" width="3.4068%" height="15" fill="rgb(234,103,6)" fg:x="902708100" fg:w="34102306"/><text x="90.4304%" y="127.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (34,102,306 samples, 3.41%)</title><rect x="90.1804%" y="101" width="3.4068%" height="15" fill="rgb(227,97,0)" fg:x="902708100" fg:w="34102306"/><text x="90.4304%" y="111.50">cor..</text></g><g><title>core::ops::function::FnMut::call_mut (4,012,036 samples, 0.40%)</title><rect x="93.1864%" y="85" width="0.4008%" height="15" fill="rgb(234,150,53)" fg:x="932798370" fg:w="4012036"/><text x="93.4364%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (4,012,036 samples, 0.40%)</title><rect x="93.1864%" y="69" width="0.4008%" height="15" fill="rgb(228,201,54)" fg:x="932798370" fg:w="4012036"/><text x="93.4364%" y="79.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="93.6874%" y="117" width="0.1002%" height="15" fill="rgb(222,22,37)" fg:x="937813415" fg:w="1003009"/><text x="93.9374%" y="127.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="93.6874%" y="101" width="0.1002%" height="15" fill="rgb(237,53,32)" fg:x="937813415" fg:w="1003009"/><text x="93.9374%" y="111.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.10%)</title><rect x="93.7876%" y="117" width="0.1002%" height="15" fill="rgb(233,25,53)" fg:x="938816424" fg:w="1003009"/><text x="94.0376%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="93.7876%" y="101" width="0.1002%" height="15" fill="rgb(210,40,34)" fg:x="938816424" fg:w="1003009"/><text x="94.0376%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="93.8878%" y="101" width="0.1002%" height="15" fill="rgb(241,220,44)" fg:x="939819433" fg:w="1003009"/><text x="94.1378%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="94.0882%" y="85" width="0.1002%" height="15" fill="rgb(235,28,35)" fg:x="941825451" fg:w="1003009"/><text x="94.3382%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="94.3888%" y="69" width="0.3006%" height="15" fill="rgb(210,56,17)" fg:x="944834478" fg:w="3009027"/><text x="94.6388%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="94.3888%" y="53" width="0.3006%" height="15" fill="rgb(224,130,29)" fg:x="944834478" fg:w="3009027"/><text x="94.6388%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7,021,063 samples, 0.70%)</title><rect x="94.1884%" y="85" width="0.7014%" height="15" fill="rgb(235,212,8)" fg:x="942828460" fg:w="7021063"/><text x="94.4384%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="94.6894%" y="69" width="0.2004%" height="15" fill="rgb(223,33,50)" fg:x="947843505" fg:w="2006018"/><text x="94.9394%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (2,006,018 samples, 0.20%)</title><rect x="94.6894%" y="53" width="0.2004%" height="15" fill="rgb(219,149,13)" fg:x="947843505" fg:w="2006018"/><text x="94.9394%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10,030,090 samples, 1.00%)</title><rect x="93.9880%" y="101" width="1.0020%" height="15" fill="rgb(250,156,29)" fg:x="940822442" fg:w="10030090"/><text x="94.2380%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="85" width="0.1002%" height="15" fill="rgb(216,193,19)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="69" width="0.1002%" height="15" fill="rgb(216,135,14)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="94.8898%" y="53" width="0.1002%" height="15" fill="rgb(241,47,5)" fg:x="949849523" fg:w="1003009"/><text x="95.1398%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4,012,036 samples, 0.40%)</title><rect x="94.9900%" y="101" width="0.4008%" height="15" fill="rgb(233,42,35)" fg:x="950852532" fg:w="4012036"/><text x="95.2400%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (4,012,036 samples, 0.40%)</title><rect x="94.9900%" y="85" width="0.4008%" height="15" fill="rgb(231,13,6)" fg:x="950852532" fg:w="4012036"/><text x="95.2400%" y="95.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="95.3908%" y="69" width="0.2004%" height="15" fill="rgb(207,181,40)" fg:x="954864568" fg:w="2006018"/><text x="95.6408%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (4,012,036 samples, 0.40%)</title><rect x="95.3908%" y="101" width="0.4008%" height="15" fill="rgb(254,173,49)" fg:x="954864568" fg:w="4012036"/><text x="95.6408%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (4,012,036 samples, 0.40%)</title><rect x="95.3908%" y="85" width="0.4008%" height="15" fill="rgb(221,1,38)" fg:x="954864568" fg:w="4012036"/><text x="95.6408%" y="95.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="95.5912%" y="69" width="0.2004%" height="15" fill="rgb(206,124,46)" fg:x="956870586" fg:w="2006018"/><text x="95.8412%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (20,060,180 samples, 2.00%)</title><rect x="93.8878%" y="117" width="2.0040%" height="15" fill="rgb(249,21,11)" fg:x="939819433" fg:w="20060180"/><text x="94.1378%" y="127.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="95.7916%" y="101" width="0.1002%" height="15" fill="rgb(222,201,40)" fg:x="958876604" fg:w="1003009"/><text x="96.0416%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="95.7916%" y="85" width="0.1002%" height="15" fill="rgb(235,61,29)" fg:x="958876604" fg:w="1003009"/><text x="96.0416%" y="95.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.7916%" y="69" width="0.1002%" height="15" fill="rgb(219,207,3)" fg:x="958876604" fg:w="1003009"/><text x="96.0416%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="95.8918%" y="101" width="0.1002%" height="15" fill="rgb(222,56,46)" fg:x="959879613" fg:w="1003009"/><text x="96.1418%" y="111.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="95.8918%" y="85" width="0.1002%" height="15" fill="rgb(239,76,54)" fg:x="959879613" fg:w="1003009"/><text x="96.1418%" y="95.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.8918%" y="69" width="0.1002%" height="15" fill="rgb(231,124,27)" fg:x="959879613" fg:w="1003009"/><text x="96.1418%" y="79.50"></text></g><g><title>core::intrinsics::copy (11,033,099 samples, 1.10%)</title><rect x="96.1924%" y="69" width="1.1022%" height="15" fill="rgb(249,195,6)" fg:x="962888640" fg:w="11033099"/><text x="96.4424%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (16,048,144 samples, 1.60%)</title><rect x="95.8918%" y="117" width="1.6032%" height="15" fill="rgb(237,174,47)" fg:x="959879613" fg:w="16048144"/><text x="96.1418%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (15,045,135 samples, 1.50%)</title><rect x="95.9920%" y="101" width="1.5030%" height="15" fill="rgb(206,201,31)" fg:x="960882622" fg:w="15045135"/><text x="96.2420%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (14,042,126 samples, 1.40%)</title><rect x="96.0922%" y="85" width="1.4028%" height="15" fill="rgb(231,57,52)" fg:x="961885631" fg:w="14042126"/><text x="96.3422%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="97.2946%" y="69" width="0.2004%" height="15" fill="rgb(248,177,22)" fg:x="973921739" fg:w="2006018"/><text x="97.5446%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="97.2946%" y="53" width="0.2004%" height="15" fill="rgb(215,211,37)" fg:x="973921739" fg:w="2006018"/><text x="97.5446%" y="63.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="97.4950%" y="101" width="0.1002%" height="15" fill="rgb(241,128,51)" fg:x="975927757" fg:w="1003009"/><text x="97.7450%" y="111.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="97.4950%" y="85" width="0.1002%" height="15" fill="rgb(227,165,31)" fg:x="975927757" fg:w="1003009"/><text x="97.7450%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (1,003,009 samples, 0.10%)</title><rect x="97.5952%" y="101" width="0.1002%" height="15" fill="rgb(228,167,24)" fg:x="976930766" fg:w="1003009"/><text x="97.8452%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_checked (1,003,009 samples, 0.10%)</title><rect x="97.5952%" y="85" width="0.1002%" height="15" fill="rgb(228,143,12)" fg:x="976930766" fg:w="1003009"/><text x="97.8452%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (1,003,009 samples, 0.10%)</title><rect x="97.5952%" y="69" width="0.1002%" height="15" fill="rgb(249,149,8)" fg:x="976930766" fg:w="1003009"/><text x="97.8452%" y="79.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.10%)</title><rect x="97.6954%" y="101" width="0.1002%" height="15" fill="rgb(243,35,44)" fg:x="977933775" fg:w="1003009"/><text x="97.9454%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="97.6954%" y="85" width="0.1002%" height="15" fill="rgb(246,89,9)" fg:x="977933775" fg:w="1003009"/><text x="97.9454%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (2,006,018 samples, 0.20%)</title><rect x="97.7956%" y="85" width="0.2004%" height="15" fill="rgb(233,213,13)" fg:x="978936784" fg:w="2006018"/><text x="98.0456%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (2,006,018 samples, 0.20%)</title><rect x="97.7956%" y="69" width="0.2004%" height="15" fill="rgb(233,141,41)" fg:x="978936784" fg:w="2006018"/><text x="98.0456%" y="79.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="97.7956%" y="53" width="0.2004%" height="15" fill="rgb(239,167,4)" fg:x="978936784" fg:w="2006018"/><text x="98.0456%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="97.7956%" y="37" width="0.2004%" height="15" fill="rgb(209,217,16)" fg:x="978936784" fg:w="2006018"/><text x="98.0456%" y="47.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="97.9960%" y="85" width="0.1002%" height="15" fill="rgb(219,88,35)" fg:x="980942802" fg:w="1003009"/><text x="98.2460%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="97.9960%" y="69" width="0.1002%" height="15" fill="rgb(220,193,23)" fg:x="980942802" fg:w="1003009"/><text x="98.2460%" y="79.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="98.0962%" y="53" width="0.1002%" height="15" fill="rgb(230,90,52)" fg:x="981945811" fg:w="1003009"/><text x="98.3462%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (5,015,045 samples, 0.50%)</title><rect x="97.7956%" y="101" width="0.5010%" height="15" fill="rgb(252,106,19)" fg:x="978936784" fg:w="5015045"/><text x="98.0456%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (2,006,018 samples, 0.20%)</title><rect x="98.0962%" y="85" width="0.2004%" height="15" fill="rgb(206,74,20)" fg:x="981945811" fg:w="2006018"/><text x="98.3462%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="98.0962%" y="69" width="0.2004%" height="15" fill="rgb(230,138,44)" fg:x="981945811" fg:w="2006018"/><text x="98.3462%" y="79.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="98.1964%" y="53" width="0.1002%" height="15" fill="rgb(235,182,43)" fg:x="982948820" fg:w="1003009"/><text x="98.4464%" y="63.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="98.3968%" y="53" width="0.3006%" height="15" fill="rgb(242,16,51)" fg:x="984954838" fg:w="3009027"/><text x="98.6468%" y="63.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="389" width="28.8577%" height="15" fill="rgb(248,9,4)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="399.50">core::array::_&lt;impl [T: N]&gt;::map</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="373" width="28.8577%" height="15" fill="rgb(210,31,22)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="383.50">core::array::_&lt;impl [T: N]&gt;::try_map</text></g><g><title>core::array::drain::drain_array_with (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="357" width="28.8577%" height="15" fill="rgb(239,54,39)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="367.50">core::array::drain::drain_array_with</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="341" width="28.8577%" height="15" fill="rgb(230,99,41)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="351.50">core::array::_&lt;impl [T: N]&gt;::try_map::_{{closu..</text></g><g><title>core::array::try_from_trusted_iterator (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="325" width="28.8577%" height="15" fill="rgb(253,106,12)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="335.50">core::array::try_from_trusted_iterator</text></g><g><title>core::array::try_from_fn (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="309" width="28.8577%" height="15" fill="rgb(213,46,41)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="319.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="293" width="28.8577%" height="15" fill="rgb(215,133,35)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="303.50">core::array::try_from_fn_erased</text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="277" width="28.8577%" height="15" fill="rgb(213,28,5)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="287.50">core::array::try_from_trusted_iterator::next::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="261" width="28.8577%" height="15" fill="rgb(215,77,49)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="271.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="245" width="28.8577%" height="15" fill="rgb(248,100,22)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="255.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wr..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="229" width="28.8577%" height="15" fill="rgb(208,67,9)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="239.50">aoc_2024_megaproject::problems::day1::part1::_..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="213" width="28.8577%" height="15" fill="rgb(219,133,21)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="223.50">core::slice::&lt;impl [T]&gt;::sort_unstable</text></g><g><title>core::slice::sort::unstable::sort (288,866,592 samples, 28.86%)</title><rect x="70.1403%" y="197" width="28.8577%" height="15" fill="rgb(246,46,29)" fg:x="702106300" fg:w="288866592"/><text x="70.3903%" y="207.50">core::slice::sort::unstable::sort</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (287,863,583 samples, 28.76%)</title><rect x="70.2405%" y="181" width="28.7575%" height="15" fill="rgb(246,185,52)" fg:x="703109309" fg:w="287863583"/><text x="70.4905%" y="191.50">core::slice::sort::unstable::quicksort::quicks..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (223,671,007 samples, 22.34%)</title><rect x="76.6533%" y="165" width="22.3447%" height="15" fill="rgb(252,136,11)" fg:x="767301885" fg:w="223671007"/><text x="76.9033%" y="175.50">core::slice::sort::unstable::quicks..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (124,373,116 samples, 12.42%)</title><rect x="86.5731%" y="149" width="12.4248%" height="15" fill="rgb(219,138,53)" fg:x="866599776" fg:w="124373116"/><text x="86.8231%" y="159.50">core::slice::sort::..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (54,162,486 samples, 5.41%)</title><rect x="93.5872%" y="133" width="5.4108%" height="15" fill="rgb(211,51,23)" fg:x="936810406" fg:w="54162486"/><text x="93.8372%" y="143.50">core::s..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (15,045,135 samples, 1.50%)</title><rect x="97.4950%" y="117" width="1.5030%" height="15" fill="rgb(247,221,28)" fg:x="975927757" fg:w="15045135"/><text x="97.7450%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (7,021,063 samples, 0.70%)</title><rect x="98.2966%" y="101" width="0.7014%" height="15" fill="rgb(251,222,45)" fg:x="983951829" fg:w="7021063"/><text x="98.5466%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (7,021,063 samples, 0.70%)</title><rect x="98.2966%" y="85" width="0.7014%" height="15" fill="rgb(217,162,53)" fg:x="983951829" fg:w="7021063"/><text x="98.5466%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="98.2966%" y="69" width="0.7014%" height="15" fill="rgb(229,93,14)" fg:x="983951829" fg:w="7021063"/><text x="98.5466%" y="79.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="98.6974%" y="53" width="0.3006%" height="15" fill="rgb(209,67,49)" fg:x="987963865" fg:w="3009027"/><text x="98.9474%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="98.6974%" y="37" width="0.3006%" height="15" fill="rgb(213,87,29)" fg:x="987963865" fg:w="3009027"/><text x="98.9474%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="98.9980%" y="389" width="0.2004%" height="15" fill="rgb(205,151,52)" fg:x="990972892" fg:w="2006018"/><text x="99.2480%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="98.9980%" y="373" width="0.2004%" height="15" fill="rgb(253,215,39)" fg:x="990972892" fg:w="2006018"/><text x="99.2480%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,006,018 samples, 0.20%)</title><rect x="98.9980%" y="357" width="0.2004%" height="15" fill="rgb(221,220,41)" fg:x="990972892" fg:w="2006018"/><text x="99.2480%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,006,018 samples, 0.20%)</title><rect x="98.9980%" y="341" width="0.2004%" height="15" fill="rgb(218,133,21)" fg:x="990972892" fg:w="2006018"/><text x="99.2480%" y="351.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (995,987,937 samples, 99.50%)</title><rect x="0.0000%" y="437" width="99.4990%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="447.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1 (995,987,937 samples, 99.50%)</title><rect x="0.0000%" y="421" width="99.4990%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="431.50">&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day1::part1 (995,987,937 samples, 99.50%)</title><rect x="0.0000%" y="405" width="99.4990%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="415.50">aoc_2024_megaproject::problems::day1::part1</text></g><g><title>core::num::&lt;impl u32&gt;::abs_diff (3,009,027 samples, 0.30%)</title><rect x="99.1984%" y="389" width="0.3006%" height="15" fill="rgb(215,223,47)" fg:x="992978910" fg:w="3009027"/><text x="99.4484%" y="399.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="405" width="0.1002%" height="15" fill="rgb(248,225,23)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="389" width="0.1002%" height="15" fill="rgb(250,108,0)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="399.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="373" width="0.1002%" height="15" fill="rgb(228,208,7)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="383.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="357" width="0.1002%" height="15" fill="rgb(244,45,10)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="367.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="341" width="0.1002%" height="15" fill="rgb(207,125,25)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="325" width="0.1002%" height="15" fill="rgb(210,195,18)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="309" width="0.1002%" height="15" fill="rgb(249,80,12)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="293" width="0.1002%" height="15" fill="rgb(221,65,9)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (2,006,018 samples, 0.20%)</title><rect x="99.4990%" y="437" width="0.2004%" height="15" fill="rgb(235,49,36)" fg:x="995987937" fg:w="2006018"/><text x="99.7490%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,006,018 samples, 0.20%)</title><rect x="99.4990%" y="421" width="0.2004%" height="15" fill="rgb(225,32,20)" fg:x="995987937" fg:w="2006018"/><text x="99.7490%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="405" width="0.1002%" height="15" fill="rgb(215,141,46)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="415.50"></text></g><g><title>aoc_2024_megaproject::repeat_part::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="389" width="0.1002%" height="15" fill="rgb(250,160,47)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="373" width="0.1002%" height="15" fill="rgb(216,222,40)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="357" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="341" width="0.1002%" height="15" fill="rgb(207,178,40)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="325" width="0.1002%" height="15" fill="rgb(221,136,13)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="309" width="0.1002%" height="15" fill="rgb(249,199,10)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="293" width="0.1002%" height="15" fill="rgb(249,222,13)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="277" width="0.1002%" height="15" fill="rgb(244,185,38)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="287.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="261" width="0.1002%" height="15" fill="rgb(236,202,9)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="271.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="245" width="0.1002%" height="15" fill="rgb(250,229,37)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="229" width="0.1002%" height="15" fill="rgb(206,174,23)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="239.50"></text></g><g><title>cfree (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="213" width="0.1002%" height="15" fill="rgb(211,33,43)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="223.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="197" width="0.1002%" height="15" fill="rgb(245,58,50)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="437" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="447.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="421" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="431.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="405" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="389" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="373" width="0.1002%" height="15" fill="rgb(212,155,44)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="383.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="357" width="0.1002%" height="15" fill="rgb(226,2,50)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="341" width="0.1002%" height="15" fill="rgb(234,177,6)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="325" width="0.1002%" height="15" fill="rgb(217,24,9)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="309" width="0.1002%" height="15" fill="rgb(220,13,46)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="293" width="0.1002%" height="15" fill="rgb(239,221,27)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="277" width="0.1002%" height="15" fill="rgb(222,198,25)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="261" width="0.1002%" height="15" fill="rgb(211,99,13)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="271.50"></text></g><g><title>std::env::args (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="437" width="0.1002%" height="15" fill="rgb(232,111,31)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="447.50"></text></g><g><title>std::env::args_os (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="421" width="0.1002%" height="15" fill="rgb(245,82,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="431.50"></text></g><g><title>std::sys::args::unix::args (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="405" width="0.1002%" height="15" fill="rgb(227,149,46)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="415.50"></text></g><g><title>core::ffi::c_str::CStr::from_ptr (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="389" width="0.1002%" height="15" fill="rgb(218,36,50)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="399.50"></text></g><g><title>core::ffi::c_str::strlen (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="373" width="0.1002%" height="15" fill="rgb(226,80,48)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="383.50"></text></g><g><title>core::ffi::c_str::strlen::runtime (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="357" width="0.1002%" height="15" fill="rgb(238,224,15)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="367.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(241,136,10)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="751.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="607.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="527.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="511.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="479.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="463.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::time::Instant::elapsed (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="437" width="0.1002%" height="15" fill="rgb(238,81,41)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="447.50"></text></g></svg></svg>