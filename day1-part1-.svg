<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (106,318,954 samples, 10.62%)</title><rect x="0.2004%" y="645" width="10.6212%" height="15" fill="rgb(227,0,7)" fg:x="2006018" fg:w="106318954"/><text x="0.4504%" y="655.50">&lt;core::str::iter..</text></g><g><title>core::str::validations::next_code_point (106,318,954 samples, 10.62%)</title><rect x="0.2004%" y="629" width="10.6212%" height="15" fill="rgb(217,0,24)" fg:x="2006018" fg:w="106318954"/><text x="0.4504%" y="639.50">core::str::valid..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74,222,666 samples, 7.41%)</title><rect x="3.4068%" y="613" width="7.4148%" height="15" fill="rgb(221,193,54)" fg:x="34102306" fg:w="74222666"/><text x="3.6568%" y="623.50">&lt;core::sli..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (74,222,666 samples, 7.41%)</title><rect x="3.4068%" y="597" width="7.4148%" height="15" fill="rgb(248,212,6)" fg:x="34102306" fg:w="74222666"/><text x="3.6568%" y="607.50">&lt;core::ptr..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="10.8216%" y="629" width="0.3006%" height="15" fill="rgb(208,68,35)" fg:x="108324972" fg:w="3009027"/><text x="11.0716%" y="639.50"></text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="10.8216%" y="613" width="0.3006%" height="15" fill="rgb(232,128,0)" fg:x="108324972" fg:w="3009027"/><text x="11.0716%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (137,412,233 samples, 13.73%)</title><rect x="0.2004%" y="725" width="13.7275%" height="15" fill="rgb(207,160,47)" fg:x="2006018" fg:w="137412233"/><text x="0.4504%" y="735.50">&lt;core::iter::adapters..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (137,412,233 samples, 13.73%)</title><rect x="0.2004%" y="709" width="13.7275%" height="15" fill="rgb(228,23,34)" fg:x="2006018" fg:w="137412233"/><text x="0.4504%" y="719.50">core::iter::traits::i..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (137,412,233 samples, 13.73%)</title><rect x="0.2004%" y="693" width="13.7275%" height="15" fill="rgb(218,30,26)" fg:x="2006018" fg:w="137412233"/><text x="0.4504%" y="703.50">&lt;usize as core::iter:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (137,412,233 samples, 13.73%)</title><rect x="0.2004%" y="677" width="13.7275%" height="15" fill="rgb(220,122,19)" fg:x="2006018" fg:w="137412233"/><text x="0.4504%" y="687.50">&lt;core::iter::adapters..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (137,412,233 samples, 13.73%)</title><rect x="0.2004%" y="661" width="13.7275%" height="15" fill="rgb(250,228,42)" fg:x="2006018" fg:w="137412233"/><text x="0.4504%" y="671.50">core::iter::traits::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (31,093,279 samples, 3.11%)</title><rect x="10.8216%" y="645" width="3.1062%" height="15" fill="rgb(240,193,28)" fg:x="108324972" fg:w="31093279"/><text x="11.0716%" y="655.50">cor..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (28,084,252 samples, 2.81%)</title><rect x="11.1222%" y="629" width="2.8056%" height="15" fill="rgb(216,20,37)" fg:x="111333999" fg:w="28084252"/><text x="11.3722%" y="639.50">&lt;u..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (85,255,765 samples, 8.52%)</title><rect x="31.7635%" y="565" width="8.5170%" height="15" fill="rgb(206,188,39)" fg:x="317953853" fg:w="85255765"/><text x="32.0135%" y="575.50">&lt;F as core::..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (85,255,765 samples, 8.52%)</title><rect x="31.7635%" y="549" width="8.5170%" height="15" fill="rgb(217,207,13)" fg:x="317953853" fg:w="85255765"/><text x="32.0135%" y="559.50">&lt;core::str::..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (85,255,765 samples, 8.52%)</title><rect x="31.7635%" y="533" width="8.5170%" height="15" fill="rgb(231,73,38)" fg:x="317953853" fg:w="85255765"/><text x="32.0135%" y="543.50">&lt;core::str::..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (85,255,765 samples, 8.52%)</title><rect x="31.7635%" y="517" width="8.5170%" height="15" fill="rgb(225,20,46)" fg:x="317953853" fg:w="85255765"/><text x="32.0135%" y="527.50">core::char::..</text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (416,248,735 samples, 41.58%)</title><rect x="13.9279%" y="709" width="41.5832%" height="15" fill="rgb(210,31,41)" fg:x="139418251" fg:w="416248735"/><text x="14.1779%" y="719.50">&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::I..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (416,248,735 samples, 41.58%)</title><rect x="13.9279%" y="693" width="41.5832%" height="15" fill="rgb(221,200,47)" fg:x="139418251" fg:w="416248735"/><text x="14.1779%" y="703.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::it..</text></g><g><title>core::iter::traits::iterator::Iterator::find (416,248,735 samples, 41.58%)</title><rect x="13.9279%" y="677" width="41.5832%" height="15" fill="rgb(226,26,5)" fg:x="139418251" fg:w="416248735"/><text x="14.1779%" y="687.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (416,248,735 samples, 41.58%)</title><rect x="13.9279%" y="661" width="41.5832%" height="15" fill="rgb(249,33,26)" fg:x="139418251" fg:w="416248735"/><text x="14.1779%" y="671.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (254,764,286 samples, 25.45%)</title><rect x="30.0601%" y="645" width="25.4509%" height="15" fill="rgb(235,183,28)" fg:x="300902700" fg:w="254764286"/><text x="30.3101%" y="655.50">&lt;core::str::iter::Split&lt;P&gt; as core::iter:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (254,764,286 samples, 25.45%)</title><rect x="30.0601%" y="629" width="25.4509%" height="15" fill="rgb(221,5,38)" fg:x="300902700" fg:w="254764286"/><text x="30.3101%" y="639.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (237,713,133 samples, 23.75%)</title><rect x="31.7635%" y="613" width="23.7475%" height="15" fill="rgb(247,18,42)" fg:x="317953853" fg:w="237713133"/><text x="32.0135%" y="623.50">&lt;core::str::pattern::CharPredicateSear..</text></g><g><title>core::str::pattern::Searcher::next_match (237,713,133 samples, 23.75%)</title><rect x="31.7635%" y="597" width="23.7475%" height="15" fill="rgb(241,131,45)" fg:x="317953853" fg:w="237713133"/><text x="32.0135%" y="607.50">core::str::pattern::Searcher::next_mat..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (237,713,133 samples, 23.75%)</title><rect x="31.7635%" y="581" width="23.7475%" height="15" fill="rgb(249,31,29)" fg:x="317953853" fg:w="237713133"/><text x="32.0135%" y="591.50">&lt;core::str::pattern::MultiCharEqSearch..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (152,457,368 samples, 15.23%)</title><rect x="40.2806%" y="565" width="15.2305%" height="15" fill="rgb(225,111,53)" fg:x="403209618" fg:w="152457368"/><text x="40.5306%" y="575.50">&lt;core::str::iter::CharI..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (142,427,278 samples, 14.23%)</title><rect x="41.2826%" y="549" width="14.2285%" height="15" fill="rgb(238,160,17)" fg:x="413239708" fg:w="142427278"/><text x="41.5326%" y="559.50">&lt;core::str::iter::Char..</text></g><g><title>core::str::validations::next_code_point (142,427,278 samples, 14.23%)</title><rect x="41.2826%" y="533" width="14.2285%" height="15" fill="rgb(214,148,48)" fg:x="413239708" fg:w="142427278"/><text x="41.5326%" y="543.50">core::str::validations..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32,096,288 samples, 3.21%)</title><rect x="52.3046%" y="517" width="3.2064%" height="15" fill="rgb(232,36,49)" fg:x="523570698" fg:w="32096288"/><text x="52.5546%" y="527.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (545,636,896 samples, 54.51%)</title><rect x="13.9279%" y="725" width="54.5090%" height="15" fill="rgb(209,103,24)" fg:x="139418251" fg:w="545636896"/><text x="14.1779%" y="735.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="709" width="12.9259%" height="15" fill="rgb(229,88,8)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="719.50">core::option::Optio..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="693" width="12.9259%" height="15" fill="rgb(213,181,19)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="703.50">core::ops::function..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="677" width="12.9259%" height="15" fill="rgb(254,191,54)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="687.50">aoc_2024_megaprojec..</text></g><g><title>core::str::&lt;impl str&gt;::parse (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="661" width="12.9259%" height="15" fill="rgb(241,83,37)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="671.50">core::str::&lt;impl st..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="645" width="12.9259%" height="15" fill="rgb(233,36,39)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="655.50">core::num::&lt;impl co..</text></g><g><title>core::num::&lt;impl u32&gt;::from_str_radix (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="629" width="12.9259%" height="15" fill="rgb(226,3,54)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="639.50">core::num::&lt;impl u3..</text></g><g><title>core::num::&lt;impl u32&gt;::from_ascii_radix (129,388,161 samples, 12.93%)</title><rect x="55.5110%" y="613" width="12.9259%" height="15" fill="rgb(245,192,40)" fg:x="555666986" fg:w="129388161"/><text x="55.7610%" y="623.50">core::num::&lt;impl u3..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (23,069,207 samples, 2.30%)</title><rect x="66.1323%" y="597" width="2.3046%" height="15" fill="rgb(238,167,29)" fg:x="661985940" fg:w="23069207"/><text x="66.3823%" y="607.50">c..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (13,039,117 samples, 1.30%)</title><rect x="67.1343%" y="581" width="1.3026%" height="15" fill="rgb(232,182,51)" fg:x="672016030" fg:w="13039117"/><text x="67.3843%" y="591.50"></text></g><g><title>__rustc::__rust_realloc (1,003,009 samples, 0.10%)</title><rect x="73.5471%" y="597" width="0.1002%" height="15" fill="rgb(231,60,39)" fg:x="736208606" fg:w="1003009"/><text x="73.7971%" y="607.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::realloc (1,003,009 samples, 0.10%)</title><rect x="73.5471%" y="581" width="0.1002%" height="15" fill="rgb(208,69,12)" fg:x="736208606" fg:w="1003009"/><text x="73.7971%" y="591.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="73.5471%" y="565" width="0.1002%" height="15" fill="rgb(235,93,37)" fg:x="736208606" fg:w="1003009"/><text x="73.7971%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,009,027 samples, 0.30%)</title><rect x="73.4469%" y="709" width="0.3006%" height="15" fill="rgb(213,116,39)" fg:x="735205597" fg:w="3009027"/><text x="73.6969%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,009,027 samples, 0.30%)</title><rect x="73.4469%" y="693" width="0.3006%" height="15" fill="rgb(222,207,29)" fg:x="735205597" fg:w="3009027"/><text x="73.6969%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,009,027 samples, 0.30%)</title><rect x="73.4469%" y="677" width="0.3006%" height="15" fill="rgb(206,96,30)" fg:x="735205597" fg:w="3009027"/><text x="73.6969%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,009,027 samples, 0.30%)</title><rect x="73.4469%" y="661" width="0.3006%" height="15" fill="rgb(218,138,4)" fg:x="735205597" fg:w="3009027"/><text x="73.6969%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,006,018 samples, 0.20%)</title><rect x="73.5471%" y="645" width="0.2004%" height="15" fill="rgb(250,191,14)" fg:x="736208606" fg:w="2006018"/><text x="73.7971%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,006,018 samples, 0.20%)</title><rect x="73.5471%" y="629" width="0.2004%" height="15" fill="rgb(239,60,40)" fg:x="736208606" fg:w="2006018"/><text x="73.7971%" y="639.50"></text></g><g><title>alloc::alloc::realloc (2,006,018 samples, 0.20%)</title><rect x="73.5471%" y="613" width="0.2004%" height="15" fill="rgb(206,27,48)" fg:x="736208606" fg:w="2006018"/><text x="73.7971%" y="623.50"></text></g><g><title>realloc (1,003,009 samples, 0.10%)</title><rect x="73.6473%" y="597" width="0.1002%" height="15" fill="rgb(225,35,8)" fg:x="737211615" fg:w="1003009"/><text x="73.8973%" y="607.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="73.6473%" y="581" width="0.1002%" height="15" fill="rgb(250,213,24)" fg:x="737211615" fg:w="1003009"/><text x="73.8973%" y="591.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="73.6473%" y="565" width="0.1002%" height="15" fill="rgb(247,123,22)" fg:x="737211615" fg:w="1003009"/><text x="73.8973%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (56,168,504 samples, 5.61%)</title><rect x="68.4369%" y="725" width="5.6112%" height="15" fill="rgb(231,138,38)" fg:x="685055147" fg:w="56168504"/><text x="68.6869%" y="735.50">alloc::..</text></g><g><title>core::ptr::write (3,009,027 samples, 0.30%)</title><rect x="73.7475%" y="709" width="0.3006%" height="15" fill="rgb(231,145,46)" fg:x="738214624" fg:w="3009027"/><text x="73.9975%" y="719.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="74.0481%" y="565" width="0.1002%" height="15" fill="rgb(251,118,11)" fg:x="741223651" fg:w="1003009"/><text x="74.2981%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="725" width="0.2004%" height="15" fill="rgb(217,147,25)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="709" width="0.2004%" height="15" fill="rgb(247,81,37)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="693" width="0.2004%" height="15" fill="rgb(209,12,38)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="677" width="0.2004%" height="15" fill="rgb(227,1,9)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="661" width="0.2004%" height="15" fill="rgb(248,47,43)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="645" width="0.2004%" height="15" fill="rgb(221,10,30)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="629" width="0.2004%" height="15" fill="rgb(210,229,1)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="639.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="613" width="0.2004%" height="15" fill="rgb(222,148,37)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="623.50"></text></g><g><title>__rustc::__rust_alloc (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="597" width="0.2004%" height="15" fill="rgb(234,67,33)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="607.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (2,006,018 samples, 0.20%)</title><rect x="74.0481%" y="581" width="0.2004%" height="15" fill="rgb(247,98,35)" fg:x="741223651" fg:w="2006018"/><text x="74.2981%" y="591.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,003,009 samples, 0.10%)</title><rect x="74.1483%" y="565" width="0.1002%" height="15" fill="rgb(247,138,52)" fg:x="742226660" fg:w="1003009"/><text x="74.3983%" y="575.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="74.1483%" y="549" width="0.1002%" height="15" fill="rgb(213,79,30)" fg:x="742226660" fg:w="1003009"/><text x="74.3983%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="74.2485%" y="501" width="0.1002%" height="15" fill="rgb(246,177,23)" fg:x="743229669" fg:w="1003009"/><text x="74.4985%" y="511.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="74.2485%" y="485" width="0.1002%" height="15" fill="rgb(230,62,27)" fg:x="743229669" fg:w="1003009"/><text x="74.4985%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (1,003,009 samples, 0.10%)</title><rect x="74.3487%" y="501" width="0.1002%" height="15" fill="rgb(216,154,8)" fg:x="744232678" fg:w="1003009"/><text x="74.5987%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="74.3487%" y="485" width="0.1002%" height="15" fill="rgb(244,35,45)" fg:x="744232678" fg:w="1003009"/><text x="74.5987%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="74.4489%" y="501" width="0.1002%" height="15" fill="rgb(251,115,12)" fg:x="745235687" fg:w="1003009"/><text x="74.6989%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="74.4489%" y="485" width="0.1002%" height="15" fill="rgb(240,54,50)" fg:x="745235687" fg:w="1003009"/><text x="74.6989%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (4,012,036 samples, 0.40%)</title><rect x="74.2485%" y="517" width="0.4008%" height="15" fill="rgb(233,84,52)" fg:x="743229669" fg:w="4012036"/><text x="74.4985%" y="527.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="74.5491%" y="501" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="746238696" fg:w="1003009"/><text x="74.7991%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="74.5491%" y="485" width="0.1002%" height="15" fill="rgb(249,43,39)" fg:x="746238696" fg:w="1003009"/><text x="74.7991%" y="495.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="74.5491%" y="469" width="0.1002%" height="15" fill="rgb(209,38,44)" fg:x="746238696" fg:w="1003009"/><text x="74.7991%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="74.6493%" y="501" width="0.1002%" height="15" fill="rgb(236,212,23)" fg:x="747241705" fg:w="1003009"/><text x="74.8993%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="74.6493%" y="485" width="0.1002%" height="15" fill="rgb(242,79,21)" fg:x="747241705" fg:w="1003009"/><text x="74.8993%" y="495.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (3,009,027 samples, 0.30%)</title><rect x="74.7495%" y="501" width="0.3006%" height="15" fill="rgb(211,96,35)" fg:x="748244714" fg:w="3009027"/><text x="74.9995%" y="511.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (3,009,027 samples, 0.30%)</title><rect x="74.7495%" y="485" width="0.3006%" height="15" fill="rgb(253,215,40)" fg:x="748244714" fg:w="3009027"/><text x="74.9995%" y="495.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (3,009,027 samples, 0.30%)</title><rect x="74.7495%" y="469" width="0.3006%" height="15" fill="rgb(211,81,21)" fg:x="748244714" fg:w="3009027"/><text x="74.9995%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (3,009,027 samples, 0.30%)</title><rect x="74.7495%" y="453" width="0.3006%" height="15" fill="rgb(208,190,38)" fg:x="748244714" fg:w="3009027"/><text x="74.9995%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (3,009,027 samples, 0.30%)</title><rect x="74.7495%" y="437" width="0.3006%" height="15" fill="rgb(235,213,38)" fg:x="748244714" fg:w="3009027"/><text x="74.9995%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (2,006,018 samples, 0.20%)</title><rect x="75.0501%" y="469" width="0.2004%" height="15" fill="rgb(237,122,38)" fg:x="751253741" fg:w="2006018"/><text x="75.3001%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="75.0501%" y="453" width="0.2004%" height="15" fill="rgb(244,218,35)" fg:x="751253741" fg:w="2006018"/><text x="75.3001%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="75.0501%" y="437" width="0.2004%" height="15" fill="rgb(240,68,47)" fg:x="751253741" fg:w="2006018"/><text x="75.3001%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,009,027 samples, 0.30%)</title><rect x="75.0501%" y="485" width="0.3006%" height="15" fill="rgb(210,16,53)" fg:x="751253741" fg:w="3009027"/><text x="75.3001%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="75.2505%" y="469" width="0.1002%" height="15" fill="rgb(235,124,12)" fg:x="753259759" fg:w="1003009"/><text x="75.5005%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.20%)</title><rect x="75.3507%" y="485" width="0.2004%" height="15" fill="rgb(224,169,11)" fg:x="754262768" fg:w="2006018"/><text x="75.6007%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (2,006,018 samples, 0.20%)</title><rect x="75.3507%" y="469" width="0.2004%" height="15" fill="rgb(250,166,2)" fg:x="754262768" fg:w="2006018"/><text x="75.6007%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (6,018,054 samples, 0.60%)</title><rect x="75.0501%" y="501" width="0.6012%" height="15" fill="rgb(242,216,29)" fg:x="751253741" fg:w="6018054"/><text x="75.3001%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="75.5511%" y="485" width="0.1002%" height="15" fill="rgb(230,116,27)" fg:x="756268786" fg:w="1003009"/><text x="75.8011%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="75.5511%" y="469" width="0.1002%" height="15" fill="rgb(228,99,48)" fg:x="756268786" fg:w="1003009"/><text x="75.8011%" y="479.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="75.5511%" y="453" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="756268786" fg:w="1003009"/><text x="75.8011%" y="463.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="75.6513%" y="469" width="0.1002%" height="15" fill="rgb(247,143,39)" fg:x="757271795" fg:w="1003009"/><text x="75.9013%" y="479.50"></text></g><g><title>core::intrinsics::copy (33,099,297 samples, 3.31%)</title><rect x="76.4529%" y="453" width="3.3066%" height="15" fill="rgb(236,97,10)" fg:x="765295867" fg:w="33099297"/><text x="76.7029%" y="463.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (48,144,432 samples, 4.81%)</title><rect x="75.6513%" y="501" width="4.8096%" height="15" fill="rgb(233,208,19)" fg:x="757271795" fg:w="48144432"/><text x="75.9013%" y="511.50">core::..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (48,144,432 samples, 4.81%)</title><rect x="75.6513%" y="485" width="4.8096%" height="15" fill="rgb(216,164,2)" fg:x="757271795" fg:w="48144432"/><text x="75.9013%" y="495.50">core::..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (47,141,423 samples, 4.71%)</title><rect x="75.7515%" y="469" width="4.7094%" height="15" fill="rgb(220,129,5)" fg:x="758274804" fg:w="47141423"/><text x="76.0015%" y="479.50">core:..</text></g><g><title>core::ops::function::FnMut::call_mut (7,021,063 samples, 0.70%)</title><rect x="79.7595%" y="453" width="0.7014%" height="15" fill="rgb(242,17,10)" fg:x="798395164" fg:w="7021063"/><text x="80.0095%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (7,021,063 samples, 0.70%)</title><rect x="79.7595%" y="437" width="0.7014%" height="15" fill="rgb(242,107,0)" fg:x="798395164" fg:w="7021063"/><text x="80.0095%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="80.5611%" y="469" width="0.1002%" height="15" fill="rgb(251,28,31)" fg:x="806419236" fg:w="1003009"/><text x="80.8111%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="80.6613%" y="453" width="0.1002%" height="15" fill="rgb(233,223,10)" fg:x="807422245" fg:w="1003009"/><text x="80.9113%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="80.6613%" y="437" width="0.1002%" height="15" fill="rgb(215,21,27)" fg:x="807422245" fg:w="1003009"/><text x="80.9113%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="80.6613%" y="421" width="0.1002%" height="15" fill="rgb(232,23,21)" fg:x="807422245" fg:w="1003009"/><text x="80.9113%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="80.9619%" y="437" width="0.1002%" height="15" fill="rgb(244,5,23)" fg:x="810431272" fg:w="1003009"/><text x="81.2119%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (6,018,054 samples, 0.60%)</title><rect x="80.5611%" y="485" width="0.6012%" height="15" fill="rgb(226,81,46)" fg:x="806419236" fg:w="6018054"/><text x="80.8111%" y="495.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (5,015,045 samples, 0.50%)</title><rect x="80.6613%" y="469" width="0.5010%" height="15" fill="rgb(247,70,30)" fg:x="807422245" fg:w="5015045"/><text x="80.9113%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="80.7615%" y="453" width="0.4008%" height="15" fill="rgb(212,68,19)" fg:x="808425254" fg:w="4012036"/><text x="81.0115%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="81.0621%" y="437" width="0.1002%" height="15" fill="rgb(240,187,13)" fg:x="811434281" fg:w="1003009"/><text x="81.3121%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="81.3627%" y="453" width="0.1002%" height="15" fill="rgb(223,113,26)" fg:x="814443308" fg:w="1003009"/><text x="81.6127%" y="463.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="81.4629%" y="421" width="0.1002%" height="15" fill="rgb(206,192,2)" fg:x="815446317" fg:w="1003009"/><text x="81.7129%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="81.4629%" y="405" width="0.1002%" height="15" fill="rgb(241,108,4)" fg:x="815446317" fg:w="1003009"/><text x="81.7129%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="81.4629%" y="453" width="0.2004%" height="15" fill="rgb(247,173,49)" fg:x="815446317" fg:w="2006018"/><text x="81.7129%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="81.4629%" y="437" width="0.2004%" height="15" fill="rgb(224,114,35)" fg:x="815446317" fg:w="2006018"/><text x="81.7129%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="81.5631%" y="421" width="0.1002%" height="15" fill="rgb(245,159,27)" fg:x="816449326" fg:w="1003009"/><text x="81.8131%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="81.8637%" y="437" width="0.3006%" height="15" fill="rgb(245,172,44)" fg:x="819458353" fg:w="3009027"/><text x="82.1137%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="81.8637%" y="421" width="0.3006%" height="15" fill="rgb(236,23,11)" fg:x="819458353" fg:w="3009027"/><text x="82.1137%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (10,030,090 samples, 1.00%)</title><rect x="81.3627%" y="469" width="1.0020%" height="15" fill="rgb(205,117,38)" fg:x="814443308" fg:w="10030090"/><text x="81.6127%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7,021,063 samples, 0.70%)</title><rect x="81.6633%" y="453" width="0.7014%" height="15" fill="rgb(237,72,25)" fg:x="817452335" fg:w="7021063"/><text x="81.9133%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (2,006,018 samples, 0.20%)</title><rect x="82.1643%" y="437" width="0.2004%" height="15" fill="rgb(244,70,9)" fg:x="822467380" fg:w="2006018"/><text x="82.4143%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (2,006,018 samples, 0.20%)</title><rect x="82.1643%" y="421" width="0.2004%" height="15" fill="rgb(217,125,39)" fg:x="822467380" fg:w="2006018"/><text x="82.4143%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4,012,036 samples, 0.40%)</title><rect x="82.3647%" y="469" width="0.4008%" height="15" fill="rgb(235,36,10)" fg:x="824473398" fg:w="4012036"/><text x="82.6147%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (4,012,036 samples, 0.40%)</title><rect x="82.3647%" y="453" width="0.4008%" height="15" fill="rgb(251,123,47)" fg:x="824473398" fg:w="4012036"/><text x="82.6147%" y="463.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="82.7655%" y="437" width="0.1002%" height="15" fill="rgb(221,13,13)" fg:x="828485434" fg:w="1003009"/><text x="83.0155%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="82.8657%" y="437" width="0.1002%" height="15" fill="rgb(238,131,9)" fg:x="829488443" fg:w="1003009"/><text x="83.1157%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (20,060,180 samples, 2.00%)</title><rect x="81.1623%" y="485" width="2.0040%" height="15" fill="rgb(211,50,8)" fg:x="812437290" fg:w="20060180"/><text x="81.4123%" y="495.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (4,012,036 samples, 0.40%)</title><rect x="82.7655%" y="469" width="0.4008%" height="15" fill="rgb(245,182,24)" fg:x="828485434" fg:w="4012036"/><text x="83.0155%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (4,012,036 samples, 0.40%)</title><rect x="82.7655%" y="453" width="0.4008%" height="15" fill="rgb(242,14,37)" fg:x="828485434" fg:w="4012036"/><text x="83.0155%" y="463.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="82.9659%" y="437" width="0.2004%" height="15" fill="rgb(246,228,12)" fg:x="830491452" fg:w="2006018"/><text x="83.2159%" y="447.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="83.2665%" y="453" width="0.2004%" height="15" fill="rgb(213,55,15)" fg:x="833500479" fg:w="2006018"/><text x="83.5165%" y="463.50"></text></g><g><title>core::intrinsics::copy (29,087,261 samples, 2.91%)</title><rect x="83.6673%" y="437" width="2.9058%" height="15" fill="rgb(209,9,3)" fg:x="837512515" fg:w="29087261"/><text x="83.9173%" y="447.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (44,132,396 samples, 4.41%)</title><rect x="83.1663%" y="485" width="4.4088%" height="15" fill="rgb(230,59,30)" fg:x="832497470" fg:w="44132396"/><text x="83.4163%" y="495.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (43,129,387 samples, 4.31%)</title><rect x="83.2665%" y="469" width="4.3086%" height="15" fill="rgb(209,121,21)" fg:x="833500479" fg:w="43129387"/><text x="83.5165%" y="479.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (41,123,369 samples, 4.11%)</title><rect x="83.4669%" y="453" width="4.1082%" height="15" fill="rgb(220,109,13)" fg:x="835506497" fg:w="41123369"/><text x="83.7169%" y="463.50">core..</text></g><g><title>core::ops::function::FnMut::call_mut (10,030,090 samples, 1.00%)</title><rect x="86.5731%" y="437" width="1.0020%" height="15" fill="rgb(232,18,1)" fg:x="866599776" fg:w="10030090"/><text x="86.8231%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (10,030,090 samples, 1.00%)</title><rect x="86.5731%" y="421" width="1.0020%" height="15" fill="rgb(215,41,42)" fg:x="866599776" fg:w="10030090"/><text x="86.8231%" y="431.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="87.5752%" y="469" width="0.1002%" height="15" fill="rgb(224,123,36)" fg:x="876629866" fg:w="1003009"/><text x="87.8252%" y="479.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::UnstableSmallSortFreezeTypeImpl&gt;::small_sort (1,003,009 samples, 0.10%)</title><rect x="87.5752%" y="453" width="0.1002%" height="15" fill="rgb(240,125,3)" fg:x="876629866" fg:w="1003009"/><text x="87.8252%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="87.6754%" y="469" width="0.2004%" height="15" fill="rgb(205,98,50)" fg:x="877632875" fg:w="2006018"/><text x="87.9254%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="87.6754%" y="453" width="0.2004%" height="15" fill="rgb(205,185,37)" fg:x="877632875" fg:w="2006018"/><text x="87.9254%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.10%)</title><rect x="87.8758%" y="469" width="0.1002%" height="15" fill="rgb(238,207,15)" fg:x="879638893" fg:w="1003009"/><text x="88.1258%" y="479.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="87.8758%" y="453" width="0.1002%" height="15" fill="rgb(213,199,42)" fg:x="879638893" fg:w="1003009"/><text x="88.1258%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,012,036 samples, 0.40%)</title><rect x="88.1764%" y="453" width="0.4008%" height="15" fill="rgb(235,201,11)" fg:x="882647920" fg:w="4012036"/><text x="88.4264%" y="463.50"></text></g><g><title>[libc.so.6] (4,012,036 samples, 0.40%)</title><rect x="88.1764%" y="437" width="0.4008%" height="15" fill="rgb(207,46,11)" fg:x="882647920" fg:w="4012036"/><text x="88.4264%" y="447.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="88.5772%" y="405" width="0.1002%" height="15" fill="rgb(241,35,35)" fg:x="886659956" fg:w="1003009"/><text x="88.8272%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="88.5772%" y="389" width="0.1002%" height="15" fill="rgb(243,32,47)" fg:x="886659956" fg:w="1003009"/><text x="88.8272%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="88.5772%" y="437" width="0.2004%" height="15" fill="rgb(247,202,23)" fg:x="886659956" fg:w="2006018"/><text x="88.8272%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="88.5772%" y="421" width="0.2004%" height="15" fill="rgb(219,102,11)" fg:x="886659956" fg:w="2006018"/><text x="88.8272%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="88.6774%" y="405" width="0.1002%" height="15" fill="rgb(243,110,44)" fg:x="887662965" fg:w="1003009"/><text x="88.9274%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (5,015,045 samples, 0.50%)</title><rect x="88.7776%" y="437" width="0.5010%" height="15" fill="rgb(222,74,54)" fg:x="888665974" fg:w="5015045"/><text x="89.0276%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="89.0782%" y="421" width="0.2004%" height="15" fill="rgb(216,99,12)" fg:x="891675001" fg:w="2006018"/><text x="89.3282%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="89.0782%" y="405" width="0.2004%" height="15" fill="rgb(226,22,26)" fg:x="891675001" fg:w="2006018"/><text x="89.3282%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (9,027,081 samples, 0.90%)</title><rect x="88.5772%" y="453" width="0.9018%" height="15" fill="rgb(217,163,10)" fg:x="886659956" fg:w="9027081"/><text x="88.8272%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (2,006,018 samples, 0.20%)</title><rect x="89.2786%" y="437" width="0.2004%" height="15" fill="rgb(213,25,53)" fg:x="893681019" fg:w="2006018"/><text x="89.5286%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="89.3788%" y="421" width="0.1002%" height="15" fill="rgb(252,105,26)" fg:x="894684028" fg:w="1003009"/><text x="89.6288%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="89.3788%" y="405" width="0.1002%" height="15" fill="rgb(220,39,43)" fg:x="894684028" fg:w="1003009"/><text x="89.6288%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (6,018,054 samples, 0.60%)</title><rect x="89.4790%" y="453" width="0.6012%" height="15" fill="rgb(229,68,48)" fg:x="895687037" fg:w="6018054"/><text x="89.7290%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (6,018,054 samples, 0.60%)</title><rect x="89.4790%" y="437" width="0.6012%" height="15" fill="rgb(252,8,32)" fg:x="895687037" fg:w="6018054"/><text x="89.7290%" y="447.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="90.0802%" y="421" width="0.2004%" height="15" fill="rgb(223,20,43)" fg:x="901705091" fg:w="2006018"/><text x="90.3302%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.30%)</title><rect x="90.0802%" y="453" width="0.3006%" height="15" fill="rgb(229,81,49)" fg:x="901705091" fg:w="3009027"/><text x="90.3302%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="90.0802%" y="437" width="0.3006%" height="15" fill="rgb(236,28,36)" fg:x="901705091" fg:w="3009027"/><text x="90.3302%" y="447.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="90.2806%" y="421" width="0.1002%" height="15" fill="rgb(249,185,26)" fg:x="903711109" fg:w="1003009"/><text x="90.5306%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (25,075,225 samples, 2.51%)</title><rect x="87.9760%" y="469" width="2.5050%" height="15" fill="rgb(249,174,33)" fg:x="880641902" fg:w="25075225"/><text x="88.2260%" y="479.50">co..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="90.3808%" y="453" width="0.1002%" height="15" fill="rgb(233,201,37)" fg:x="904714118" fg:w="1003009"/><text x="90.6308%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="90.3808%" y="437" width="0.1002%" height="15" fill="rgb(221,78,26)" fg:x="904714118" fg:w="1003009"/><text x="90.6308%" y="447.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="90.3808%" y="421" width="0.1002%" height="15" fill="rgb(250,127,30)" fg:x="904714118" fg:w="1003009"/><text x="90.6308%" y="431.50"></text></g><g><title>core::intrinsics::copy (19,057,171 samples, 1.90%)</title><rect x="90.7816%" y="421" width="1.9038%" height="15" fill="rgb(230,49,44)" fg:x="908726154" fg:w="19057171"/><text x="91.0316%" y="431.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (26,078,234 samples, 2.61%)</title><rect x="90.4810%" y="469" width="2.6052%" height="15" fill="rgb(229,67,23)" fg:x="905717127" fg:w="26078234"/><text x="90.7310%" y="479.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (26,078,234 samples, 2.61%)</title><rect x="90.4810%" y="453" width="2.6052%" height="15" fill="rgb(249,83,47)" fg:x="905717127" fg:w="26078234"/><text x="90.7310%" y="463.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (26,078,234 samples, 2.61%)</title><rect x="90.4810%" y="437" width="2.6052%" height="15" fill="rgb(215,43,3)" fg:x="905717127" fg:w="26078234"/><text x="90.7310%" y="447.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (4,012,036 samples, 0.40%)</title><rect x="92.6854%" y="421" width="0.4008%" height="15" fill="rgb(238,154,13)" fg:x="927783325" fg:w="4012036"/><text x="92.9354%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (4,012,036 samples, 0.40%)</title><rect x="92.6854%" y="405" width="0.4008%" height="15" fill="rgb(219,56,2)" fg:x="927783325" fg:w="4012036"/><text x="92.9354%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="93.1864%" y="453" width="0.1002%" height="15" fill="rgb(233,0,4)" fg:x="932798370" fg:w="1003009"/><text x="93.4364%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="93.1864%" y="437" width="0.1002%" height="15" fill="rgb(235,30,7)" fg:x="932798370" fg:w="1003009"/><text x="93.4364%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (2,006,018 samples, 0.20%)</title><rect x="93.2866%" y="437" width="0.2004%" height="15" fill="rgb(250,79,13)" fg:x="933801379" fg:w="2006018"/><text x="93.5366%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="93.3868%" y="421" width="0.1002%" height="15" fill="rgb(211,146,34)" fg:x="934804388" fg:w="1003009"/><text x="93.6368%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="93.3868%" y="405" width="0.1002%" height="15" fill="rgb(228,22,38)" fg:x="934804388" fg:w="1003009"/><text x="93.6368%" y="415.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (3,009,027 samples, 0.30%)</title><rect x="93.2866%" y="453" width="0.3006%" height="15" fill="rgb(235,168,5)" fg:x="933801379" fg:w="3009027"/><text x="93.5366%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="437" width="0.1002%" height="15" fill="rgb(221,155,16)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="447.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="421" width="0.1002%" height="15" fill="rgb(215,215,53)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="431.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="93.4870%" y="405" width="0.1002%" height="15" fill="rgb(223,4,10)" fg:x="935807397" fg:w="1003009"/><text x="93.7370%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="93.5872%" y="437" width="0.1002%" height="15" fill="rgb(234,103,6)" fg:x="936810406" fg:w="1003009"/><text x="93.8372%" y="447.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="93.5872%" y="421" width="0.1002%" height="15" fill="rgb(227,97,0)" fg:x="936810406" fg:w="1003009"/><text x="93.8372%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,006,018 samples, 0.20%)</title><rect x="93.6874%" y="421" width="0.2004%" height="15" fill="rgb(234,150,53)" fg:x="937813415" fg:w="2006018"/><text x="93.9374%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,006,018 samples, 0.20%)</title><rect x="93.6874%" y="405" width="0.2004%" height="15" fill="rgb(228,201,54)" fg:x="937813415" fg:w="2006018"/><text x="93.9374%" y="415.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,006,018 samples, 0.20%)</title><rect x="93.6874%" y="389" width="0.2004%" height="15" fill="rgb(222,22,37)" fg:x="937813415" fg:w="2006018"/><text x="93.9374%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,006,018 samples, 0.20%)</title><rect x="93.6874%" y="373" width="0.2004%" height="15" fill="rgb(237,53,32)" fg:x="937813415" fg:w="2006018"/><text x="93.9374%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (7,021,063 samples, 0.70%)</title><rect x="93.8878%" y="421" width="0.7014%" height="15" fill="rgb(233,25,53)" fg:x="939819433" fg:w="7021063"/><text x="94.1378%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="94.3888%" y="405" width="0.2004%" height="15" fill="rgb(210,40,34)" fg:x="944834478" fg:w="2006018"/><text x="94.6388%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="94.3888%" y="389" width="0.2004%" height="15" fill="rgb(241,220,44)" fg:x="944834478" fg:w="2006018"/><text x="94.6388%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="94.5892%" y="405" width="0.1002%" height="15" fill="rgb(235,28,35)" fg:x="946840496" fg:w="1003009"/><text x="94.8392%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (12,036,108 samples, 1.20%)</title><rect x="93.6874%" y="437" width="1.2024%" height="15" fill="rgb(210,56,17)" fg:x="937813415" fg:w="12036108"/><text x="93.9374%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,009,027 samples, 0.30%)</title><rect x="94.5892%" y="421" width="0.3006%" height="15" fill="rgb(224,130,29)" fg:x="946840496" fg:w="3009027"/><text x="94.8392%" y="431.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="94.6894%" y="405" width="0.2004%" height="15" fill="rgb(235,212,8)" fg:x="947843505" fg:w="2006018"/><text x="94.9394%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="94.6894%" y="389" width="0.2004%" height="15" fill="rgb(223,33,50)" fg:x="947843505" fg:w="2006018"/><text x="94.9394%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4,012,036 samples, 0.40%)</title><rect x="94.8898%" y="437" width="0.4008%" height="15" fill="rgb(219,149,13)" fg:x="949849523" fg:w="4012036"/><text x="95.1398%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (4,012,036 samples, 0.40%)</title><rect x="94.8898%" y="421" width="0.4008%" height="15" fill="rgb(250,156,29)" fg:x="949849523" fg:w="4012036"/><text x="95.1398%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.30%)</title><rect x="95.2906%" y="437" width="0.3006%" height="15" fill="rgb(216,193,19)" fg:x="953861559" fg:w="3009027"/><text x="95.5406%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="95.2906%" y="421" width="0.3006%" height="15" fill="rgb(216,135,14)" fg:x="953861559" fg:w="3009027"/><text x="95.5406%" y="431.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="95.2906%" y="405" width="0.3006%" height="15" fill="rgb(241,47,5)" fg:x="953861559" fg:w="3009027"/><text x="95.5406%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (21,063,189 samples, 2.10%)</title><rect x="93.5872%" y="453" width="2.1042%" height="15" fill="rgb(233,42,35)" fg:x="936810406" fg:w="21063189"/><text x="93.8372%" y="463.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="95.5912%" y="437" width="0.1002%" height="15" fill="rgb(231,13,6)" fg:x="956870586" fg:w="1003009"/><text x="95.8412%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="95.5912%" y="421" width="0.1002%" height="15" fill="rgb(207,181,40)" fg:x="956870586" fg:w="1003009"/><text x="95.8412%" y="431.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.5912%" y="405" width="0.1002%" height="15" fill="rgb(254,173,49)" fg:x="956870586" fg:w="1003009"/><text x="95.8412%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="95.7916%" y="437" width="0.1002%" height="15" fill="rgb(221,1,38)" fg:x="958876604" fg:w="1003009"/><text x="96.0416%" y="447.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="95.7916%" y="421" width="0.1002%" height="15" fill="rgb(206,124,46)" fg:x="958876604" fg:w="1003009"/><text x="96.0416%" y="431.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="95.7916%" y="405" width="0.1002%" height="15" fill="rgb(249,21,11)" fg:x="958876604" fg:w="1003009"/><text x="96.0416%" y="415.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="95.8918%" y="421" width="0.2004%" height="15" fill="rgb(222,201,40)" fg:x="959879613" fg:w="2006018"/><text x="96.1418%" y="431.50"></text></g><g><title>core::intrinsics::copy (13,039,117 samples, 1.30%)</title><rect x="96.2926%" y="405" width="1.3026%" height="15" fill="rgb(235,61,29)" fg:x="963891649" fg:w="13039117"/><text x="96.5426%" y="415.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (24,072,216 samples, 2.40%)</title><rect x="95.6914%" y="453" width="2.4048%" height="15" fill="rgb(219,207,3)" fg:x="957873595" fg:w="24072216"/><text x="95.9414%" y="463.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (22,066,198 samples, 2.20%)</title><rect x="95.8918%" y="437" width="2.2044%" height="15" fill="rgb(222,56,46)" fg:x="959879613" fg:w="22066198"/><text x="96.1418%" y="447.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (20,060,180 samples, 2.00%)</title><rect x="96.0922%" y="421" width="2.0040%" height="15" fill="rgb(239,76,54)" fg:x="961885631" fg:w="20060180"/><text x="96.3422%" y="431.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (5,015,045 samples, 0.50%)</title><rect x="97.5952%" y="405" width="0.5010%" height="15" fill="rgb(231,124,27)" fg:x="976930766" fg:w="5015045"/><text x="97.8452%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="97.5952%" y="389" width="0.5010%" height="15" fill="rgb(249,195,6)" fg:x="976930766" fg:w="5015045"/><text x="97.8452%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="421" width="0.1002%" height="15" fill="rgb(237,174,47)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="405" width="0.1002%" height="15" fill="rgb(206,201,31)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="421" width="0.1002%" height="15" fill="rgb(231,57,52)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="405" width="0.1002%" height="15" fill="rgb(248,177,22)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;u32&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="389" width="0.1002%" height="15" fill="rgb(215,211,37)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="399.50"></text></g><g><title>&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="373" width="0.1002%" height="15" fill="rgb(241,128,51)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="357" width="0.1002%" height="15" fill="rgb(227,165,31)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (5,015,045 samples, 0.50%)</title><rect x="98.1964%" y="437" width="0.5010%" height="15" fill="rgb(228,167,24)" fg:x="982948820" fg:w="5015045"/><text x="98.4464%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="98.5972%" y="421" width="0.1002%" height="15" fill="rgb(228,143,12)" fg:x="986960856" fg:w="1003009"/><text x="98.8472%" y="431.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="98.5972%" y="405" width="0.1002%" height="15" fill="rgb(249,149,8)" fg:x="986960856" fg:w="1003009"/><text x="98.8472%" y="415.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="98.5972%" y="389" width="0.1002%" height="15" fill="rgb(243,35,44)" fg:x="986960856" fg:w="1003009"/><text x="98.8472%" y="399.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="725" width="24.8497%" height="15" fill="rgb(246,89,9)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="735.50">core::array::_&lt;impl [T: N]&gt;::map</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="709" width="24.8497%" height="15" fill="rgb(233,213,13)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="719.50">core::array::_&lt;impl [T: N]&gt;::try_map</text></g><g><title>core::array::drain::drain_array_with (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="693" width="24.8497%" height="15" fill="rgb(233,141,41)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="703.50">core::array::drain::drain_array_with</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="677" width="24.8497%" height="15" fill="rgb(239,167,4)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="687.50">core::array::_&lt;impl [T: N]&gt;::try_map::_{..</text></g><g><title>core::array::try_from_trusted_iterator (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="661" width="24.8497%" height="15" fill="rgb(209,217,16)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="671.50">core::array::try_from_trusted_iterator</text></g><g><title>core::array::try_from_fn (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="645" width="24.8497%" height="15" fill="rgb(219,88,35)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="655.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="629" width="24.8497%" height="15" fill="rgb(220,193,23)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="639.50">core::array::try_from_fn_erased</text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="613" width="24.8497%" height="15" fill="rgb(230,90,52)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="623.50">core::array::try_from_trusted_iterator::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="597" width="24.8497%" height="15" fill="rgb(252,106,19)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="607.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="581" width="24.8497%" height="15" fill="rgb(206,74,20)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="591.50">core::ops::try_trait::NeverShortCircuit&lt;..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="565" width="24.8497%" height="15" fill="rgb(230,138,44)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="575.50">aoc_2024_megaproject::problems::day1::pa..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="549" width="24.8497%" height="15" fill="rgb(235,182,43)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="559.50">core::slice::&lt;impl [T]&gt;::sort_unstable</text></g><g><title>core::slice::sort::unstable::sort (248,746,232 samples, 24.85%)</title><rect x="74.2485%" y="533" width="24.8497%" height="15" fill="rgb(242,16,51)" fg:x="743229669" fg:w="248746232"/><text x="74.4985%" y="543.50">core::slice::sort::unstable::sort</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (244,734,196 samples, 24.45%)</title><rect x="74.6493%" y="517" width="24.4489%" height="15" fill="rgb(248,9,4)" fg:x="747241705" fg:w="244734196"/><text x="74.8993%" y="527.50">core::slice::sort::unstable::quicksort:..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (186,559,674 samples, 18.64%)</title><rect x="80.4609%" y="501" width="18.6373%" height="15" fill="rgb(210,31,22)" fg:x="805416227" fg:w="186559674"/><text x="80.7109%" y="511.50">core::slice::sort::unstable::..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (115,346,035 samples, 11.52%)</title><rect x="87.5752%" y="485" width="11.5230%" height="15" fill="rgb(239,54,39)" fg:x="876629866" fg:w="115346035"/><text x="87.8252%" y="495.50">core::slice::sort..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (60,180,540 samples, 6.01%)</title><rect x="93.0862%" y="469" width="6.0120%" height="15" fill="rgb(230,99,41)" fg:x="931795361" fg:w="60180540"/><text x="93.3362%" y="479.50">core::sl..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (10,030,090 samples, 1.00%)</title><rect x="98.0962%" y="453" width="1.0020%" height="15" fill="rgb(253,106,12)" fg:x="981945811" fg:w="10030090"/><text x="98.3462%" y="463.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (4,012,036 samples, 0.40%)</title><rect x="98.6974%" y="437" width="0.4008%" height="15" fill="rgb(213,46,41)" fg:x="987963865" fg:w="4012036"/><text x="98.9474%" y="447.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (4,012,036 samples, 0.40%)</title><rect x="98.6974%" y="421" width="0.4008%" height="15" fill="rgb(215,133,35)" fg:x="987963865" fg:w="4012036"/><text x="98.9474%" y="431.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (4,012,036 samples, 0.40%)</title><rect x="98.6974%" y="405" width="0.4008%" height="15" fill="rgb(213,28,5)" fg:x="987963865" fg:w="4012036"/><text x="98.9474%" y="415.50"></text></g><g><title>core::intrinsics::copy (4,012,036 samples, 0.40%)</title><rect x="98.6974%" y="389" width="0.4008%" height="15" fill="rgb(215,77,49)" fg:x="987963865" fg:w="4012036"/><text x="98.9474%" y="399.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (993,981,919 samples, 99.30%)</title><rect x="0.0000%" y="773" width="99.2986%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="993981919"/><text x="0.2500%" y="783.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1 (993,981,919 samples, 99.30%)</title><rect x="0.0000%" y="757" width="99.2986%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="993981919"/><text x="0.2500%" y="767.50">&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part1</text></g><g><title>aoc_2024_megaproject::problems::day1::part1 (993,981,919 samples, 99.30%)</title><rect x="0.0000%" y="741" width="99.2986%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="993981919"/><text x="0.2500%" y="751.50">aoc_2024_megaproject::problems::day1::part1</text></g><g><title>core::num::&lt;impl u32&gt;::abs_diff (2,006,018 samples, 0.20%)</title><rect x="99.0982%" y="725" width="0.2004%" height="15" fill="rgb(246,46,29)" fg:x="991975901" fg:w="2006018"/><text x="99.3482%" y="735.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="741" width="0.2004%" height="15" fill="rgb(246,185,52)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="725" width="0.2004%" height="15" fill="rgb(252,136,11)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="735.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="709" width="0.2004%" height="15" fill="rgb(219,138,53)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="719.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="693" width="0.2004%" height="15" fill="rgb(211,51,23)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="703.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="677" width="0.2004%" height="15" fill="rgb(247,221,28)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="687.50"></text></g><g><title>alloc::string::String::from_utf8 (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="661" width="0.2004%" height="15" fill="rgb(251,222,45)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (3,009,027 samples, 0.30%)</title><rect x="99.2986%" y="773" width="0.3006%" height="15" fill="rgb(217,162,53)" fg:x="993981919" fg:w="3009027"/><text x="99.5486%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,009,027 samples, 0.30%)</title><rect x="99.2986%" y="757" width="0.3006%" height="15" fill="rgb(229,93,14)" fg:x="993981919" fg:w="3009027"/><text x="99.5486%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="741" width="0.1002%" height="15" fill="rgb(209,67,49)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="751.50"></text></g><g><title>aoc_2024_megaproject::repeat_part::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="725" width="0.1002%" height="15" fill="rgb(213,87,29)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="709" width="0.1002%" height="15" fill="rgb(205,151,52)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="693" width="0.1002%" height="15" fill="rgb(253,215,39)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="677" width="0.1002%" height="15" fill="rgb(221,220,41)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="661" width="0.1002%" height="15" fill="rgb(218,133,21)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="645" width="0.1002%" height="15" fill="rgb(221,193,43)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="629" width="0.1002%" height="15" fill="rgb(240,128,52)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="613" width="0.1002%" height="15" fill="rgb(253,114,12)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="623.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="597" width="0.1002%" height="15" fill="rgb(215,223,47)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="607.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="581" width="0.1002%" height="15" fill="rgb(248,225,23)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="591.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="565" width="0.1002%" height="15" fill="rgb(250,108,0)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="575.50"></text></g><g><title>cfree (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="549" width="0.1002%" height="15" fill="rgb(228,208,7)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="559.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.4990%" y="533" width="0.1002%" height="15" fill="rgb(244,45,10)" fg:x="995987937" fg:w="1003009"/><text x="99.7490%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::env::Args&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="773" width="0.1002%" height="15" fill="rgb(207,125,25)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::env::ArgsOs&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="757" width="0.1002%" height="15" fill="rgb(210,195,18)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::args::common::Args&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="741" width="0.1002%" height="15" fill="rgb(249,80,12)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;std::ffi::os_str::OsString&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="725" width="0.1002%" height="15" fill="rgb(221,65,9)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="735.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="709" width="0.1002%" height="15" fill="rgb(235,49,36)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;std::ffi::os_str::OsString,alloc::alloc::Global&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="693" width="0.1002%" height="15" fill="rgb(225,32,20)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="703.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="677" width="0.1002%" height="15" fill="rgb(215,141,46)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::ffi::os_str::OsString&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="661" width="0.1002%" height="15" fill="rgb(250,160,47)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="645" width="0.1002%" height="15" fill="rgb(216,222,40)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="629" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="613" width="0.1002%" height="15" fill="rgb(207,178,40)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="597" width="0.1002%" height="15" fill="rgb(221,136,13)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="607.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="581" width="0.1002%" height="15" fill="rgb(249,199,10)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="591.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="565" width="0.1002%" height="15" fill="rgb(249,222,13)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="575.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.5992%" y="549" width="0.1002%" height="15" fill="rgb(244,185,38)" fg:x="996990946" fg:w="1003009"/><text x="99.8492%" y="559.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="773" width="0.1002%" height="15" fill="rgb(236,202,9)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="783.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="757" width="0.1002%" height="15" fill="rgb(250,229,37)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="767.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="741" width="0.1002%" height="15" fill="rgb(206,174,23)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="751.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="725" width="0.1002%" height="15" fill="rgb(211,33,43)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="735.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="709" width="0.1002%" height="15" fill="rgb(245,58,50)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="719.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="693" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="703.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="677" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="687.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="661" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="645" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="629" width="0.1002%" height="15" fill="rgb(212,155,44)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="613" width="0.1002%" height="15" fill="rgb(226,2,50)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="597" width="0.1002%" height="15" fill="rgb(234,177,6)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="581" width="0.1002%" height="15" fill="rgb(217,24,9)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="565" width="0.1002%" height="15" fill="rgb(220,13,46)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="549" width="0.1002%" height="15" fill="rgb(239,221,27)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="533" width="0.1002%" height="15" fill="rgb(222,198,25)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="517" width="0.1002%" height="15" fill="rgb(211,99,13)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="501" width="0.1002%" height="15" fill="rgb(232,111,31)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="485" width="0.1002%" height="15" fill="rgb(245,82,37)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="469" width="0.1002%" height="15" fill="rgb(227,149,46)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="453" width="0.1002%" height="15" fill="rgb(218,36,50)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="437" width="0.1002%" height="15" fill="rgb(226,80,48)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="421" width="0.1002%" height="15" fill="rgb(238,224,15)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="405" width="0.1002%" height="15" fill="rgb(241,136,10)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="389" width="0.1002%" height="15" fill="rgb(208,32,45)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="373" width="0.1002%" height="15" fill="rgb(207,135,9)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="357" width="0.1002%" height="15" fill="rgb(206,86,44)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="341" width="0.1002%" height="15" fill="rgb(245,177,15)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="325" width="0.1002%" height="15" fill="rgb(206,64,50)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="335.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="309" width="0.1002%" height="15" fill="rgb(234,36,40)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="293" width="0.1002%" height="15" fill="rgb(213,64,8)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="277" width="0.1002%" height="15" fill="rgb(210,75,36)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="287.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="261" width="0.1002%" height="15" fill="rgb(229,88,21)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="271.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="245" width="0.1002%" height="15" fill="rgb(252,204,47)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="255.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="229" width="0.1002%" height="15" fill="rgb(208,77,27)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="239.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="213" width="0.1002%" height="15" fill="rgb(221,76,26)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="223.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="197" width="0.1002%" height="15" fill="rgb(225,139,18)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="207.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="181" width="0.1002%" height="15" fill="rgb(230,137,11)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="165" width="0.1002%" height="15" fill="rgb(212,28,1)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="149" width="0.1002%" height="15" fill="rgb(248,164,17)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="133" width="0.1002%" height="15" fill="rgb(222,171,42)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="117" width="0.1002%" height="15" fill="rgb(243,84,45)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="101" width="0.1002%" height="15" fill="rgb(252,49,23)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="85" width="0.1002%" height="15" fill="rgb(215,19,7)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="69" width="0.1002%" height="15" fill="rgb(238,81,41)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="53" width="0.1002%" height="15" fill="rgb(210,199,37)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="37" width="0.1002%" height="15" fill="rgb(244,192,49)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="47.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="725" width="0.1002%" height="15" fill="rgb(226,211,11)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="709" width="0.1002%" height="15" fill="rgb(236,162,54)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="693" width="0.1002%" height="15" fill="rgb(220,229,9)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="677" width="0.1002%" height="15" fill="rgb(250,87,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="661" width="0.1002%" height="15" fill="rgb(239,43,17)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="645" width="0.1002%" height="15" fill="rgb(231,177,25)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="629" width="0.1002%" height="15" fill="rgb(219,179,1)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="613" width="0.1002%" height="15" fill="rgb(238,219,53)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="597" width="0.1002%" height="15" fill="rgb(232,167,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="581" width="0.1002%" height="15" fill="rgb(244,19,51)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="591.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="565" width="0.1002%" height="15" fill="rgb(224,6,22)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="575.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1103.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1087.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1039.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="863.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="847.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="815.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="799.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="773" width="0.2004%" height="15" fill="rgb(234,111,31)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="783.50"></text></g><g><title>std::env::args_os (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="757" width="0.2004%" height="15" fill="rgb(241,149,10)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="767.50"></text></g><g><title>std::sys::args::unix::args (2,006,018 samples, 0.20%)</title><rect x="99.7996%" y="741" width="0.2004%" height="15" fill="rgb(249,206,44)" fg:x="998996964" fg:w="2006018"/><text x="100.0496%" y="751.50"></text></g><g><title>core::ffi::c_str::CStr::from_ptr (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="725" width="0.1002%" height="15" fill="rgb(251,153,30)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="735.50"></text></g><g><title>core::ffi::c_str::strlen (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="709" width="0.1002%" height="15" fill="rgb(239,152,38)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="719.50"></text></g><g><title>core::ffi::c_str::strlen::runtime (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="693" width="0.1002%" height="15" fill="rgb(249,139,47)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="703.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="677" width="0.1002%" height="15" fill="rgb(244,64,35)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="687.50"></text></g></svg></svg>