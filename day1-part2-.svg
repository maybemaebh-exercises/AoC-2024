<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11,033,099 samples, 1.10%)</title><rect x="2.0040%" y="373" width="1.1022%" height="15" fill="rgb(227,0,7)" fg:x="20060180" fg:w="11033099"/><text x="2.2540%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13,039,117 samples, 1.30%)</title><rect x="1.9038%" y="389" width="1.3026%" height="15" fill="rgb(217,0,24)" fg:x="19057171" fg:w="13039117"/><text x="2.1538%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="3.1062%" y="373" width="0.1002%" height="15" fill="rgb(221,193,54)" fg:x="31093279" fg:w="1003009"/><text x="3.3562%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (116,349,044 samples, 11.62%)</title><rect x="3.2064%" y="309" width="11.6232%" height="15" fill="rgb(248,212,6)" fg:x="32096288" fg:w="116349044"/><text x="3.4564%" y="319.50">&lt;core::str::iter:..</text></g><g><title>core::str::validations::next_code_point (116,349,044 samples, 11.62%)</title><rect x="3.2064%" y="293" width="11.6232%" height="15" fill="rgb(208,68,35)" fg:x="32096288" fg:w="116349044"/><text x="3.4564%" y="303.50">core::str::valida..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (85,255,765 samples, 8.52%)</title><rect x="6.3126%" y="277" width="8.5170%" height="15" fill="rgb(232,128,0)" fg:x="63189567" fg:w="85255765"/><text x="6.5626%" y="287.50">&lt;core::slice..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (85,255,765 samples, 8.52%)</title><rect x="6.3126%" y="261" width="8.5170%" height="15" fill="rgb(207,160,47)" fg:x="63189567" fg:w="85255765"/><text x="6.5626%" y="271.50">&lt;core::ptr::..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (6,018,054 samples, 0.60%)</title><rect x="14.8297%" y="293" width="0.6012%" height="15" fill="rgb(228,23,34)" fg:x="148445332" fg:w="6018054"/><text x="15.0797%" y="303.50"></text></g><g><title>aoc_2024_megaproject::problems::day1::part2::_{{closure}} (6,018,054 samples, 0.60%)</title><rect x="14.8297%" y="277" width="0.6012%" height="15" fill="rgb(218,30,26)" fg:x="148445332" fg:w="6018054"/><text x="15.0797%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (152,457,368 samples, 15.23%)</title><rect x="3.2064%" y="389" width="15.2305%" height="15" fill="rgb(220,122,19)" fg:x="32096288" fg:w="152457368"/><text x="3.4564%" y="399.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (152,457,368 samples, 15.23%)</title><rect x="3.2064%" y="373" width="15.2305%" height="15" fill="rgb(250,228,42)" fg:x="32096288" fg:w="152457368"/><text x="3.4564%" y="383.50">core::iter::traits::ite..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (152,457,368 samples, 15.23%)</title><rect x="3.2064%" y="357" width="15.2305%" height="15" fill="rgb(240,193,28)" fg:x="32096288" fg:w="152457368"/><text x="3.4564%" y="367.50">&lt;usize as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (152,457,368 samples, 15.23%)</title><rect x="3.2064%" y="341" width="15.2305%" height="15" fill="rgb(216,20,37)" fg:x="32096288" fg:w="152457368"/><text x="3.4564%" y="351.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (152,457,368 samples, 15.23%)</title><rect x="3.2064%" y="325" width="15.2305%" height="15" fill="rgb(206,188,39)" fg:x="32096288" fg:w="152457368"/><text x="3.4564%" y="335.50">core::iter::traits::ite..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (36,108,324 samples, 3.61%)</title><rect x="14.8297%" y="309" width="3.6072%" height="15" fill="rgb(217,207,13)" fg:x="148445332" fg:w="36108324"/><text x="15.0797%" y="319.50">core..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (30,090,270 samples, 3.01%)</title><rect x="15.4309%" y="293" width="3.0060%" height="15" fill="rgb(231,73,38)" fg:x="154463386" fg:w="30090270"/><text x="15.6809%" y="303.50">&lt;us..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (76,228,684 samples, 7.62%)</title><rect x="34.4689%" y="229" width="7.6152%" height="15" fill="rgb(225,20,46)" fg:x="345035096" fg:w="76228684"/><text x="34.7189%" y="239.50">&lt;F as core..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (76,228,684 samples, 7.62%)</title><rect x="34.4689%" y="213" width="7.6152%" height="15" fill="rgb(210,31,41)" fg:x="345035096" fg:w="76228684"/><text x="34.7189%" y="223.50">&lt;core::str..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (76,228,684 samples, 7.62%)</title><rect x="34.4689%" y="197" width="7.6152%" height="15" fill="rgb(221,200,47)" fg:x="345035096" fg:w="76228684"/><text x="34.7189%" y="207.50">&lt;core::str..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (76,228,684 samples, 7.62%)</title><rect x="34.4689%" y="181" width="7.6152%" height="15" fill="rgb(226,26,5)" fg:x="345035096" fg:w="76228684"/><text x="34.7189%" y="191.50">core::char..</text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (390,170,501 samples, 38.98%)</title><rect x="18.4369%" y="373" width="38.9780%" height="15" fill="rgb(249,33,26)" fg:x="184553656" fg:w="390170501"/><text x="18.6869%" y="383.50">&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterato..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (390,170,501 samples, 38.98%)</title><rect x="18.4369%" y="357" width="38.9780%" height="15" fill="rgb(235,183,28)" fg:x="184553656" fg:w="390170501"/><text x="18.6869%" y="367.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits..</text></g><g><title>core::iter::traits::iterator::Iterator::find (390,170,501 samples, 38.98%)</title><rect x="18.4369%" y="341" width="38.9780%" height="15" fill="rgb(221,5,38)" fg:x="184553656" fg:w="390170501"/><text x="18.6869%" y="351.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (390,170,501 samples, 38.98%)</title><rect x="18.4369%" y="325" width="38.9780%" height="15" fill="rgb(247,18,42)" fg:x="184553656" fg:w="390170501"/><text x="18.6869%" y="335.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (247,743,223 samples, 24.75%)</title><rect x="32.6653%" y="309" width="24.7495%" height="15" fill="rgb(241,131,45)" fg:x="326980934" fg:w="247743223"/><text x="32.9153%" y="319.50">&lt;core::str::iter::Split&lt;P&gt; as core::ite..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (247,743,223 samples, 24.75%)</title><rect x="32.6653%" y="293" width="24.7495%" height="15" fill="rgb(249,31,29)" fg:x="326980934" fg:w="247743223"/><text x="32.9153%" y="303.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (229,689,061 samples, 22.95%)</title><rect x="34.4689%" y="277" width="22.9459%" height="15" fill="rgb(225,111,53)" fg:x="345035096" fg:w="229689061"/><text x="34.7189%" y="287.50">&lt;core::str::pattern::CharPredicateSe..</text></g><g><title>core::str::pattern::Searcher::next_match (229,689,061 samples, 22.95%)</title><rect x="34.4689%" y="261" width="22.9459%" height="15" fill="rgb(238,160,17)" fg:x="345035096" fg:w="229689061"/><text x="34.7189%" y="271.50">core::str::pattern::Searcher::next_m..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (229,689,061 samples, 22.95%)</title><rect x="34.4689%" y="245" width="22.9459%" height="15" fill="rgb(214,148,48)" fg:x="345035096" fg:w="229689061"/><text x="34.7189%" y="255.50">&lt;core::str::pattern::MultiCharEqSear..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (153,460,377 samples, 15.33%)</title><rect x="42.0842%" y="229" width="15.3307%" height="15" fill="rgb(232,36,49)" fg:x="421263780" fg:w="153460377"/><text x="42.3342%" y="239.50">&lt;core::str::iter::CharI..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (144,433,296 samples, 14.43%)</title><rect x="42.9860%" y="213" width="14.4289%" height="15" fill="rgb(209,103,24)" fg:x="430290861" fg:w="144433296"/><text x="43.2360%" y="223.50">&lt;core::str::iter::Char..</text></g><g><title>core::str::validations::next_code_point (144,433,296 samples, 14.43%)</title><rect x="42.9860%" y="197" width="14.4289%" height="15" fill="rgb(229,88,8)" fg:x="430290861" fg:w="144433296"/><text x="43.2360%" y="207.50">core::str::validations..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,087,261 samples, 2.91%)</title><rect x="54.5090%" y="181" width="2.9058%" height="15" fill="rgb(213,181,19)" fg:x="545636896" fg:w="29087261"/><text x="54.7590%" y="191.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (506,519,545 samples, 50.60%)</title><rect x="18.4369%" y="389" width="50.6012%" height="15" fill="rgb(254,191,54)" fg:x="184553656" fg:w="506519545"/><text x="18.6869%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::ne..</text></g><g><title>core::option::Option&lt;T&gt;::map (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="373" width="11.6232%" height="15" fill="rgb(241,83,37)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="383.50">core::option::Opt..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="357" width="11.6232%" height="15" fill="rgb(233,36,39)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="367.50">core::ops::functi..</text></g><g><title>aoc_2024_megaproject::problems::day1::part2::_{{closure}} (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="341" width="11.6232%" height="15" fill="rgb(226,3,54)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="351.50">aoc_2024_megaproj..</text></g><g><title>core::str::&lt;impl str&gt;::parse (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="325" width="11.6232%" height="15" fill="rgb(245,192,40)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="335.50">core::str::&lt;impl ..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="309" width="11.6232%" height="15" fill="rgb(238,167,29)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="319.50">core::num::&lt;impl ..</text></g><g><title>core::num::&lt;impl u32&gt;::from_str_radix (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="293" width="11.6232%" height="15" fill="rgb(232,182,51)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="303.50">core::num::&lt;impl ..</text></g><g><title>core::num::&lt;impl u32&gt;::from_ascii_radix (116,349,044 samples, 11.62%)</title><rect x="57.4148%" y="277" width="11.6232%" height="15" fill="rgb(231,60,39)" fg:x="574724157" fg:w="116349044"/><text x="57.6648%" y="287.50">core::num::&lt;impl ..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (16,048,144 samples, 1.60%)</title><rect x="67.4349%" y="261" width="1.6032%" height="15" fill="rgb(208,69,12)" fg:x="675025057" fg:w="16048144"/><text x="67.6849%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (10,030,090 samples, 1.00%)</title><rect x="68.0361%" y="245" width="1.0020%" height="15" fill="rgb(235,93,37)" fg:x="681043111" fg:w="10030090"/><text x="68.2861%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,003,009 samples, 0.10%)</title><rect x="72.5451%" y="325" width="0.1002%" height="15" fill="rgb(213,116,39)" fg:x="726178516" fg:w="1003009"/><text x="72.7951%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37,111,333 samples, 3.71%)</title><rect x="69.0381%" y="389" width="3.7074%" height="15" fill="rgb(222,207,29)" fg:x="691073201" fg:w="37111333"/><text x="69.2881%" y="399.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,006,018 samples, 0.20%)</title><rect x="72.5451%" y="373" width="0.2004%" height="15" fill="rgb(206,96,30)" fg:x="726178516" fg:w="2006018"/><text x="72.7951%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,006,018 samples, 0.20%)</title><rect x="72.5451%" y="357" width="0.2004%" height="15" fill="rgb(218,138,4)" fg:x="726178516" fg:w="2006018"/><text x="72.7951%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,006,018 samples, 0.20%)</title><rect x="72.5451%" y="341" width="0.2004%" height="15" fill="rgb(250,191,14)" fg:x="726178516" fg:w="2006018"/><text x="72.7951%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="325" width="0.1002%" height="15" fill="rgb(239,60,40)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="309" width="0.1002%" height="15" fill="rgb(206,27,48)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="293" width="0.1002%" height="15" fill="rgb(225,35,8)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="277" width="0.1002%" height="15" fill="rgb(250,213,24)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="287.50"></text></g><g><title>__rustc::__rust_realloc (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="261" width="0.1002%" height="15" fill="rgb(247,123,22)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="271.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::realloc (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="245" width="0.1002%" height="15" fill="rgb(231,138,38)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="255.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="72.6453%" y="229" width="0.1002%" height="15" fill="rgb(231,145,46)" fg:x="727181525" fg:w="1003009"/><text x="72.8953%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="389" width="0.3006%" height="15" fill="rgb(251,118,11)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="373" width="0.3006%" height="15" fill="rgb(217,147,25)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="357" width="0.3006%" height="15" fill="rgb(247,81,37)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="341" width="0.3006%" height="15" fill="rgb(209,12,38)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="325" width="0.3006%" height="15" fill="rgb(227,1,9)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="309" width="0.3006%" height="15" fill="rgb(248,47,43)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="293" width="0.3006%" height="15" fill="rgb(221,10,30)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="303.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="277" width="0.3006%" height="15" fill="rgb(210,229,1)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="287.50"></text></g><g><title>__rustc::__rust_alloc (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="261" width="0.3006%" height="15" fill="rgb(222,148,37)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="271.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::alloc (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="245" width="0.3006%" height="15" fill="rgb(234,67,33)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="229" width="0.3006%" height="15" fill="rgb(247,98,35)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="239.50"></text></g><g><title>malloc (3,009,027 samples, 0.30%)</title><rect x="72.7455%" y="213" width="0.3006%" height="15" fill="rgb(247,138,52)" fg:x="728184534" fg:w="3009027"/><text x="72.9955%" y="223.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="72.8457%" y="197" width="0.2004%" height="15" fill="rgb(213,79,30)" fg:x="729187543" fg:w="2006018"/><text x="73.0957%" y="207.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (2,006,018 samples, 0.20%)</title><rect x="73.0461%" y="149" width="0.2004%" height="15" fill="rgb(246,177,23)" fg:x="731193561" fg:w="2006018"/><text x="73.2961%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (3,009,027 samples, 0.30%)</title><rect x="73.0461%" y="181" width="0.3006%" height="15" fill="rgb(230,62,27)" fg:x="731193561" fg:w="3009027"/><text x="73.2961%" y="191.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,009,027 samples, 0.30%)</title><rect x="73.0461%" y="165" width="0.3006%" height="15" fill="rgb(216,154,8)" fg:x="731193561" fg:w="3009027"/><text x="73.2961%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="73.2465%" y="149" width="0.1002%" height="15" fill="rgb(244,35,45)" fg:x="733199579" fg:w="1003009"/><text x="73.4965%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="73.2465%" y="133" width="0.1002%" height="15" fill="rgb(251,115,12)" fg:x="733199579" fg:w="1003009"/><text x="73.4965%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.10%)</title><rect x="73.3467%" y="165" width="0.1002%" height="15" fill="rgb(240,54,50)" fg:x="734202588" fg:w="1003009"/><text x="73.5967%" y="175.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="73.3467%" y="149" width="0.1002%" height="15" fill="rgb(233,84,52)" fg:x="734202588" fg:w="1003009"/><text x="73.5967%" y="159.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="73.3467%" y="133" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="734202588" fg:w="1003009"/><text x="73.5967%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="73.3467%" y="117" width="0.1002%" height="15" fill="rgb(249,43,39)" fg:x="734202588" fg:w="1003009"/><text x="73.5967%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (4,012,036 samples, 0.40%)</title><rect x="73.4469%" y="133" width="0.4008%" height="15" fill="rgb(209,38,44)" fg:x="735205597" fg:w="4012036"/><text x="73.6969%" y="143.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="73.6473%" y="117" width="0.2004%" height="15" fill="rgb(236,212,23)" fg:x="737211615" fg:w="2006018"/><text x="73.8973%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="73.6473%" y="101" width="0.2004%" height="15" fill="rgb(242,79,21)" fg:x="737211615" fg:w="2006018"/><text x="73.8973%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="73.8477%" y="117" width="0.1002%" height="15" fill="rgb(211,96,35)" fg:x="739217633" fg:w="1003009"/><text x="74.0977%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (7,021,063 samples, 0.70%)</title><rect x="73.4469%" y="149" width="0.7014%" height="15" fill="rgb(253,215,40)" fg:x="735205597" fg:w="7021063"/><text x="73.6969%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,009,027 samples, 0.30%)</title><rect x="73.8477%" y="133" width="0.3006%" height="15" fill="rgb(211,81,21)" fg:x="739217633" fg:w="3009027"/><text x="74.0977%" y="143.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="73.9479%" y="117" width="0.2004%" height="15" fill="rgb(208,190,38)" fg:x="740220642" fg:w="2006018"/><text x="74.1979%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="73.9479%" y="101" width="0.2004%" height="15" fill="rgb(235,213,38)" fg:x="740220642" fg:w="2006018"/><text x="74.1979%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="74.1483%" y="133" width="0.1002%" height="15" fill="rgb(237,122,38)" fg:x="742226660" fg:w="1003009"/><text x="74.3983%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.20%)</title><rect x="74.1483%" y="149" width="0.2004%" height="15" fill="rgb(244,218,35)" fg:x="742226660" fg:w="2006018"/><text x="74.3983%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="74.2485%" y="133" width="0.1002%" height="15" fill="rgb(240,68,47)" fg:x="743229669" fg:w="1003009"/><text x="74.4985%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (3,009,027 samples, 0.30%)</title><rect x="74.3487%" y="149" width="0.3006%" height="15" fill="rgb(210,16,53)" fg:x="744232678" fg:w="3009027"/><text x="74.5987%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="74.3487%" y="133" width="0.3006%" height="15" fill="rgb(235,124,12)" fg:x="744232678" fg:w="3009027"/><text x="74.5987%" y="143.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="74.3487%" y="117" width="0.3006%" height="15" fill="rgb(224,169,11)" fg:x="744232678" fg:w="3009027"/><text x="74.5987%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="74.6493%" y="117" width="0.1002%" height="15" fill="rgb(250,166,2)" fg:x="747241705" fg:w="1003009"/><text x="74.8993%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (14,042,126 samples, 1.40%)</title><rect x="73.4469%" y="165" width="1.4028%" height="15" fill="rgb(242,216,29)" fg:x="735205597" fg:w="14042126"/><text x="73.6969%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="74.6493%" y="149" width="0.2004%" height="15" fill="rgb(230,116,27)" fg:x="747241705" fg:w="2006018"/><text x="74.8993%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="74.6493%" y="133" width="0.2004%" height="15" fill="rgb(228,99,48)" fg:x="747241705" fg:w="2006018"/><text x="74.8993%" y="143.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="74.7495%" y="117" width="0.1002%" height="15" fill="rgb(253,11,6)" fg:x="748244714" fg:w="1003009"/><text x="74.9995%" y="127.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="74.8497%" y="133" width="0.1002%" height="15" fill="rgb(247,143,39)" fg:x="749247723" fg:w="1003009"/><text x="75.0997%" y="143.50"></text></g><g><title>core::intrinsics::copy (38,114,342 samples, 3.81%)</title><rect x="75.4509%" y="117" width="3.8076%" height="15" fill="rgb(236,97,10)" fg:x="755265777" fg:w="38114342"/><text x="75.7009%" y="127.50">core..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (49,147,441 samples, 4.91%)</title><rect x="74.8497%" y="165" width="4.9098%" height="15" fill="rgb(233,208,19)" fg:x="749247723" fg:w="49147441"/><text x="75.0997%" y="175.50">core::..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (49,147,441 samples, 4.91%)</title><rect x="74.8497%" y="149" width="4.9098%" height="15" fill="rgb(216,164,2)" fg:x="749247723" fg:w="49147441"/><text x="75.0997%" y="159.50">core::..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (48,144,432 samples, 4.81%)</title><rect x="74.9499%" y="133" width="4.8096%" height="15" fill="rgb(220,129,5)" fg:x="750250732" fg:w="48144432"/><text x="75.1999%" y="143.50">core::..</text></g><g><title>core::ops::function::FnMut::call_mut (5,015,045 samples, 0.50%)</title><rect x="79.2585%" y="117" width="0.5010%" height="15" fill="rgb(242,17,10)" fg:x="793380119" fg:w="5015045"/><text x="79.5085%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="79.2585%" y="101" width="0.5010%" height="15" fill="rgb(242,107,0)" fg:x="793380119" fg:w="5015045"/><text x="79.5085%" y="111.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="79.7595%" y="149" width="0.2004%" height="15" fill="rgb(251,28,31)" fg:x="798395164" fg:w="2006018"/><text x="80.0095%" y="159.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="79.7595%" y="133" width="0.2004%" height="15" fill="rgb(233,223,10)" fg:x="798395164" fg:w="2006018"/><text x="80.0095%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="79.8597%" y="117" width="0.1002%" height="15" fill="rgb(215,21,27)" fg:x="799398173" fg:w="1003009"/><text x="80.1097%" y="127.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3,009,027 samples, 0.30%)</title><rect x="80.2605%" y="85" width="0.3006%" height="15" fill="rgb(232,23,21)" fg:x="803410209" fg:w="3009027"/><text x="80.5105%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (3,009,027 samples, 0.30%)</title><rect x="80.2605%" y="69" width="0.3006%" height="15" fill="rgb(244,5,23)" fg:x="803410209" fg:w="3009027"/><text x="80.5105%" y="79.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5,015,045 samples, 0.50%)</title><rect x="80.2605%" y="117" width="0.5010%" height="15" fill="rgb(226,81,46)" fg:x="803410209" fg:w="5015045"/><text x="80.5105%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,015,045 samples, 0.50%)</title><rect x="80.2605%" y="101" width="0.5010%" height="15" fill="rgb(247,70,30)" fg:x="803410209" fg:w="5015045"/><text x="80.5105%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="80.5611%" y="85" width="0.2004%" height="15" fill="rgb(212,68,19)" fg:x="806419236" fg:w="2006018"/><text x="80.8111%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.30%)</title><rect x="80.7615%" y="117" width="0.3006%" height="15" fill="rgb(240,187,13)" fg:x="808425254" fg:w="3009027"/><text x="81.0115%" y="127.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="80.7615%" y="101" width="0.3006%" height="15" fill="rgb(223,113,26)" fg:x="808425254" fg:w="3009027"/><text x="81.0115%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="80.7615%" y="85" width="0.3006%" height="15" fill="rgb(206,192,2)" fg:x="808425254" fg:w="3009027"/><text x="81.0115%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="81.0621%" y="101" width="0.3006%" height="15" fill="rgb(241,108,4)" fg:x="811434281" fg:w="3009027"/><text x="81.3121%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (13,039,117 samples, 1.30%)</title><rect x="80.2605%" y="133" width="1.3026%" height="15" fill="rgb(247,173,49)" fg:x="803410209" fg:w="13039117"/><text x="80.5105%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (5,015,045 samples, 0.50%)</title><rect x="81.0621%" y="117" width="0.5010%" height="15" fill="rgb(224,114,35)" fg:x="811434281" fg:w="5015045"/><text x="81.3121%" y="127.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="81.3627%" y="101" width="0.2004%" height="15" fill="rgb(245,159,27)" fg:x="814443308" fg:w="2006018"/><text x="81.6127%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="81.3627%" y="85" width="0.2004%" height="15" fill="rgb(245,172,44)" fg:x="814443308" fg:w="2006018"/><text x="81.6127%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="81.6633%" y="117" width="0.1002%" height="15" fill="rgb(236,23,11)" fg:x="817452335" fg:w="1003009"/><text x="81.9133%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (3,009,027 samples, 0.30%)</title><rect x="81.5631%" y="133" width="0.3006%" height="15" fill="rgb(205,117,38)" fg:x="816449326" fg:w="3009027"/><text x="81.8131%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="81.7635%" y="117" width="0.1002%" height="15" fill="rgb(237,72,25)" fg:x="818455344" fg:w="1003009"/><text x="82.0135%" y="127.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="81.8637%" y="101" width="0.3006%" height="15" fill="rgb(244,70,9)" fg:x="819458353" fg:w="3009027"/><text x="82.1137%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="82.1643%" y="101" width="0.1002%" height="15" fill="rgb(217,125,39)" fg:x="822467380" fg:w="1003009"/><text x="82.4143%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (6,018,054 samples, 0.60%)</title><rect x="81.8637%" y="133" width="0.6012%" height="15" fill="rgb(235,36,10)" fg:x="819458353" fg:w="6018054"/><text x="82.1137%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (6,018,054 samples, 0.60%)</title><rect x="81.8637%" y="117" width="0.6012%" height="15" fill="rgb(251,123,47)" fg:x="819458353" fg:w="6018054"/><text x="82.1137%" y="127.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="82.2645%" y="101" width="0.2004%" height="15" fill="rgb(221,13,13)" fg:x="823470389" fg:w="2006018"/><text x="82.5145%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (27,081,243 samples, 2.71%)</title><rect x="79.9599%" y="149" width="2.7054%" height="15" fill="rgb(238,131,9)" fg:x="800401182" fg:w="27081243"/><text x="80.2099%" y="159.50">co..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="82.4649%" y="133" width="0.2004%" height="15" fill="rgb(211,50,8)" fg:x="825476407" fg:w="2006018"/><text x="82.7149%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="82.4649%" y="117" width="0.2004%" height="15" fill="rgb(245,182,24)" fg:x="825476407" fg:w="2006018"/><text x="82.7149%" y="127.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="82.4649%" y="101" width="0.2004%" height="15" fill="rgb(242,14,37)" fg:x="825476407" fg:w="2006018"/><text x="82.7149%" y="111.50"></text></g><g><title>core::intrinsics::copy (27,081,243 samples, 2.71%)</title><rect x="83.3667%" y="101" width="2.7054%" height="15" fill="rgb(246,228,12)" fg:x="834503488" fg:w="27081243"/><text x="83.6167%" y="111.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (43,129,387 samples, 4.31%)</title><rect x="82.6653%" y="149" width="4.3086%" height="15" fill="rgb(213,55,15)" fg:x="827482425" fg:w="43129387"/><text x="82.9153%" y="159.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (43,129,387 samples, 4.31%)</title><rect x="82.6653%" y="133" width="4.3086%" height="15" fill="rgb(209,9,3)" fg:x="827482425" fg:w="43129387"/><text x="82.9153%" y="143.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (42,126,378 samples, 4.21%)</title><rect x="82.7655%" y="117" width="4.2084%" height="15" fill="rgb(230,59,30)" fg:x="828485434" fg:w="42126378"/><text x="83.0155%" y="127.50">core:..</text></g><g><title>core::ops::function::FnMut::call_mut (9,027,081 samples, 0.90%)</title><rect x="86.0721%" y="101" width="0.9018%" height="15" fill="rgb(209,121,21)" fg:x="861584731" fg:w="9027081"/><text x="86.3221%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (9,027,081 samples, 0.90%)</title><rect x="86.0721%" y="85" width="0.9018%" height="15" fill="rgb(220,109,13)" fg:x="861584731" fg:w="9027081"/><text x="86.3221%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="86.9739%" y="117" width="0.1002%" height="15" fill="rgb(232,18,1)" fg:x="870611812" fg:w="1003009"/><text x="87.2239%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (5,015,045 samples, 0.50%)</title><rect x="86.9739%" y="133" width="0.5010%" height="15" fill="rgb(215,41,42)" fg:x="870611812" fg:w="5015045"/><text x="87.2239%" y="143.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="87.0741%" y="117" width="0.4008%" height="15" fill="rgb(224,123,36)" fg:x="871614821" fg:w="4012036"/><text x="87.3241%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (4,012,036 samples, 0.40%)</title><rect x="87.0741%" y="101" width="0.4008%" height="15" fill="rgb(240,125,3)" fg:x="871614821" fg:w="4012036"/><text x="87.3241%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="87.4749%" y="117" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="875626857" fg:w="1003009"/><text x="87.7249%" y="127.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="87.4749%" y="101" width="0.1002%" height="15" fill="rgb(205,185,37)" fg:x="875626857" fg:w="1003009"/><text x="87.7249%" y="111.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="87.5752%" y="101" width="0.1002%" height="15" fill="rgb(238,207,15)" fg:x="876629866" fg:w="1003009"/><text x="87.8252%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="87.5752%" y="85" width="0.1002%" height="15" fill="rgb(213,199,42)" fg:x="876629866" fg:w="1003009"/><text x="87.8252%" y="95.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="87.5752%" y="69" width="0.1002%" height="15" fill="rgb(235,201,11)" fg:x="876629866" fg:w="1003009"/><text x="87.8252%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="87.5752%" y="53" width="0.1002%" height="15" fill="rgb(207,46,11)" fg:x="876629866" fg:w="1003009"/><text x="87.8252%" y="63.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="88.1764%" y="85" width="0.2004%" height="15" fill="rgb(241,35,35)" fg:x="882647920" fg:w="2006018"/><text x="88.4264%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="88.1764%" y="69" width="0.2004%" height="15" fill="rgb(243,32,47)" fg:x="882647920" fg:w="2006018"/><text x="88.4264%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (8,024,072 samples, 0.80%)</title><rect x="87.6754%" y="101" width="0.8016%" height="15" fill="rgb(247,202,23)" fg:x="877632875" fg:w="8024072"/><text x="87.9254%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="88.3768%" y="85" width="0.1002%" height="15" fill="rgb(219,102,11)" fg:x="884653938" fg:w="1003009"/><text x="88.6268%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="88.3768%" y="69" width="0.1002%" height="15" fill="rgb(243,110,44)" fg:x="884653938" fg:w="1003009"/><text x="88.6268%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="88.4770%" y="85" width="0.2004%" height="15" fill="rgb(222,74,54)" fg:x="885656947" fg:w="2006018"/><text x="88.7270%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (13,039,117 samples, 1.30%)</title><rect x="87.5752%" y="117" width="1.3026%" height="15" fill="rgb(216,99,12)" fg:x="876629866" fg:w="13039117"/><text x="87.8252%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (4,012,036 samples, 0.40%)</title><rect x="88.4770%" y="101" width="0.4008%" height="15" fill="rgb(226,22,26)" fg:x="885656947" fg:w="4012036"/><text x="88.7270%" y="111.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="88.6774%" y="85" width="0.2004%" height="15" fill="rgb(217,163,10)" fg:x="887662965" fg:w="2006018"/><text x="88.9274%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="88.6774%" y="69" width="0.2004%" height="15" fill="rgb(213,25,53)" fg:x="887662965" fg:w="2006018"/><text x="88.9274%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (10,030,090 samples, 1.00%)</title><rect x="88.8778%" y="117" width="1.0020%" height="15" fill="rgb(252,105,26)" fg:x="889668983" fg:w="10030090"/><text x="89.1278%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (10,030,090 samples, 1.00%)</title><rect x="88.8778%" y="101" width="1.0020%" height="15" fill="rgb(220,39,43)" fg:x="889668983" fg:w="10030090"/><text x="89.1278%" y="111.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="89.7796%" y="85" width="0.1002%" height="15" fill="rgb(229,68,48)" fg:x="898696064" fg:w="1003009"/><text x="90.0296%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="89.7796%" y="69" width="0.1002%" height="15" fill="rgb(252,8,32)" fg:x="898696064" fg:w="1003009"/><text x="90.0296%" y="79.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="89.8798%" y="85" width="0.1002%" height="15" fill="rgb(223,20,43)" fg:x="899699073" fg:w="1003009"/><text x="90.1298%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="89.9800%" y="85" width="0.2004%" height="15" fill="rgb(229,81,49)" fg:x="900702082" fg:w="2006018"/><text x="90.2300%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (6,018,054 samples, 0.60%)</title><rect x="89.8798%" y="117" width="0.6012%" height="15" fill="rgb(236,28,36)" fg:x="899699073" fg:w="6018054"/><text x="90.1298%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (6,018,054 samples, 0.60%)</title><rect x="89.8798%" y="101" width="0.6012%" height="15" fill="rgb(249,185,26)" fg:x="899699073" fg:w="6018054"/><text x="90.1298%" y="111.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.30%)</title><rect x="90.1804%" y="85" width="0.3006%" height="15" fill="rgb(249,174,33)" fg:x="902708100" fg:w="3009027"/><text x="90.4304%" y="95.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="90.4810%" y="85" width="0.1002%" height="15" fill="rgb(233,201,37)" fg:x="905717127" fg:w="1003009"/><text x="90.7310%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (33,099,297 samples, 3.31%)</title><rect x="87.4749%" y="133" width="3.3066%" height="15" fill="rgb(221,78,26)" fg:x="875626857" fg:w="33099297"/><text x="87.7249%" y="143.50">cor..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (3,009,027 samples, 0.30%)</title><rect x="90.4810%" y="117" width="0.3006%" height="15" fill="rgb(250,127,30)" fg:x="905717127" fg:w="3009027"/><text x="90.7310%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (3,009,027 samples, 0.30%)</title><rect x="90.4810%" y="101" width="0.3006%" height="15" fill="rgb(230,49,44)" fg:x="905717127" fg:w="3009027"/><text x="90.7310%" y="111.50"></text></g><g><title>core::ptr::read (2,006,018 samples, 0.20%)</title><rect x="90.5812%" y="85" width="0.2004%" height="15" fill="rgb(229,67,23)" fg:x="906720136" fg:w="2006018"/><text x="90.8312%" y="95.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="90.8818%" y="101" width="0.1002%" height="15" fill="rgb(249,83,47)" fg:x="909729163" fg:w="1003009"/><text x="91.1318%" y="111.50"></text></g><g><title>core::intrinsics::copy (23,069,207 samples, 2.30%)</title><rect x="90.9820%" y="85" width="2.3046%" height="15" fill="rgb(215,43,3)" fg:x="910732172" fg:w="23069207"/><text x="91.2320%" y="95.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (29,087,261 samples, 2.91%)</title><rect x="90.7816%" y="133" width="2.9058%" height="15" fill="rgb(238,154,13)" fg:x="908726154" fg:w="29087261"/><text x="91.0316%" y="143.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (29,087,261 samples, 2.91%)</title><rect x="90.7816%" y="117" width="2.9058%" height="15" fill="rgb(219,56,2)" fg:x="908726154" fg:w="29087261"/><text x="91.0316%" y="127.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (27,081,243 samples, 2.71%)</title><rect x="90.9820%" y="101" width="2.7054%" height="15" fill="rgb(233,0,4)" fg:x="910732172" fg:w="27081243"/><text x="91.2320%" y="111.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (4,012,036 samples, 0.40%)</title><rect x="93.2866%" y="85" width="0.4008%" height="15" fill="rgb(235,30,7)" fg:x="933801379" fg:w="4012036"/><text x="93.5366%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (4,012,036 samples, 0.40%)</title><rect x="93.2866%" y="69" width="0.4008%" height="15" fill="rgb(250,79,13)" fg:x="933801379" fg:w="4012036"/><text x="93.5366%" y="79.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="93.6874%" y="101" width="0.1002%" height="15" fill="rgb(211,146,34)" fg:x="937813415" fg:w="1003009"/><text x="93.9374%" y="111.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="93.6874%" y="85" width="0.1002%" height="15" fill="rgb(228,22,38)" fg:x="937813415" fg:w="1003009"/><text x="93.9374%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="93.6874%" y="69" width="0.1002%" height="15" fill="rgb(235,168,5)" fg:x="937813415" fg:w="1003009"/><text x="93.9374%" y="79.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="93.7876%" y="85" width="0.1002%" height="15" fill="rgb(221,155,16)" fg:x="938816424" fg:w="1003009"/><text x="94.0376%" y="95.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (4,012,036 samples, 0.40%)</title><rect x="93.6874%" y="117" width="0.4008%" height="15" fill="rgb(215,215,53)" fg:x="937813415" fg:w="4012036"/><text x="93.9374%" y="127.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (3,009,027 samples, 0.30%)</title><rect x="93.7876%" y="101" width="0.3006%" height="15" fill="rgb(223,4,10)" fg:x="938816424" fg:w="3009027"/><text x="94.0376%" y="111.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="93.8878%" y="85" width="0.2004%" height="15" fill="rgb(234,103,6)" fg:x="939819433" fg:w="2006018"/><text x="94.1378%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="94.1884%" y="101" width="0.1002%" height="15" fill="rgb(227,97,0)" fg:x="942828460" fg:w="1003009"/><text x="94.4384%" y="111.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="94.1884%" y="85" width="0.1002%" height="15" fill="rgb(234,150,53)" fg:x="942828460" fg:w="1003009"/><text x="94.4384%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (4,012,036 samples, 0.40%)</title><rect x="94.2886%" y="85" width="0.4008%" height="15" fill="rgb(228,201,54)" fg:x="943831469" fg:w="4012036"/><text x="94.5386%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="94.5892%" y="69" width="0.1002%" height="15" fill="rgb(222,22,37)" fg:x="946840496" fg:w="1003009"/><text x="94.8392%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="94.5892%" y="53" width="0.1002%" height="15" fill="rgb(237,53,32)" fg:x="946840496" fg:w="1003009"/><text x="94.8392%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="94.6894%" y="69" width="0.2004%" height="15" fill="rgb(233,25,53)" fg:x="947843505" fg:w="2006018"/><text x="94.9394%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (8,024,072 samples, 0.80%)</title><rect x="94.2886%" y="101" width="0.8016%" height="15" fill="rgb(210,40,34)" fg:x="943831469" fg:w="8024072"/><text x="94.5386%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (4,012,036 samples, 0.40%)</title><rect x="94.6894%" y="85" width="0.4008%" height="15" fill="rgb(241,220,44)" fg:x="947843505" fg:w="4012036"/><text x="94.9394%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="94.8898%" y="69" width="0.2004%" height="15" fill="rgb(235,28,35)" fg:x="949849523" fg:w="2006018"/><text x="95.1398%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="94.8898%" y="53" width="0.2004%" height="15" fill="rgb(210,56,17)" fg:x="949849523" fg:w="2006018"/><text x="95.1398%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (5,015,045 samples, 0.50%)</title><rect x="95.0902%" y="101" width="0.5010%" height="15" fill="rgb(224,130,29)" fg:x="951855541" fg:w="5015045"/><text x="95.3402%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (5,015,045 samples, 0.50%)</title><rect x="95.0902%" y="85" width="0.5010%" height="15" fill="rgb(235,212,8)" fg:x="951855541" fg:w="5015045"/><text x="95.3402%" y="95.50"></text></g><g><title>core::intrinsics::copy (3,009,027 samples, 0.30%)</title><rect x="95.5912%" y="69" width="0.3006%" height="15" fill="rgb(223,33,50)" fg:x="956870586" fg:w="3009027"/><text x="95.8412%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (6,018,054 samples, 0.60%)</title><rect x="95.5912%" y="101" width="0.6012%" height="15" fill="rgb(219,149,13)" fg:x="956870586" fg:w="6018054"/><text x="95.8412%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (6,018,054 samples, 0.60%)</title><rect x="95.5912%" y="85" width="0.6012%" height="15" fill="rgb(250,156,29)" fg:x="956870586" fg:w="6018054"/><text x="95.8412%" y="95.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.30%)</title><rect x="95.8918%" y="69" width="0.3006%" height="15" fill="rgb(216,193,19)" fg:x="959879613" fg:w="3009027"/><text x="96.1418%" y="79.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="96.1924%" y="69" width="0.1002%" height="15" fill="rgb(216,135,14)" fg:x="962888640" fg:w="1003009"/><text x="96.4424%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (23,069,207 samples, 2.30%)</title><rect x="94.0882%" y="117" width="2.3046%" height="15" fill="rgb(241,47,5)" fg:x="941825451" fg:w="23069207"/><text x="94.3382%" y="127.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (2,006,018 samples, 0.20%)</title><rect x="96.1924%" y="101" width="0.2004%" height="15" fill="rgb(233,42,35)" fg:x="962888640" fg:w="2006018"/><text x="96.4424%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="96.1924%" y="85" width="0.2004%" height="15" fill="rgb(231,13,6)" fg:x="962888640" fg:w="2006018"/><text x="96.4424%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="96.2926%" y="69" width="0.1002%" height="15" fill="rgb(207,181,40)" fg:x="963891649" fg:w="1003009"/><text x="96.5426%" y="79.50"></text></g><g><title>core::intrinsics::copy (8,024,072 samples, 0.80%)</title><rect x="96.4930%" y="69" width="0.8016%" height="15" fill="rgb(254,173,49)" fg:x="965897667" fg:w="8024072"/><text x="96.7430%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (14,042,126 samples, 1.40%)</title><rect x="96.3928%" y="117" width="1.4028%" height="15" fill="rgb(221,1,38)" fg:x="964894658" fg:w="14042126"/><text x="96.6428%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (14,042,126 samples, 1.40%)</title><rect x="96.3928%" y="101" width="1.4028%" height="15" fill="rgb(206,124,46)" fg:x="964894658" fg:w="14042126"/><text x="96.6428%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (14,042,126 samples, 1.40%)</title><rect x="96.3928%" y="85" width="1.4028%" height="15" fill="rgb(249,21,11)" fg:x="964894658" fg:w="14042126"/><text x="96.6428%" y="95.50"></text></g><g><title>core::ops::function::FnMut::call_mut (5,015,045 samples, 0.50%)</title><rect x="97.2946%" y="69" width="0.5010%" height="15" fill="rgb(222,201,40)" fg:x="973921739" fg:w="5015045"/><text x="97.5446%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (5,015,045 samples, 0.50%)</title><rect x="97.2946%" y="53" width="0.5010%" height="15" fill="rgb(235,61,29)" fg:x="973921739" fg:w="5015045"/><text x="97.5446%" y="63.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.10%)</title><rect x="97.8958%" y="101" width="0.1002%" height="15" fill="rgb(219,207,3)" fg:x="979939793" fg:w="1003009"/><text x="98.1458%" y="111.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="97.8958%" y="85" width="0.1002%" height="15" fill="rgb(222,56,46)" fg:x="979939793" fg:w="1003009"/><text x="98.1458%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="98.0962%" y="85" width="0.1002%" height="15" fill="rgb(239,76,54)" fg:x="981945811" fg:w="1003009"/><text x="98.3462%" y="95.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="98.0962%" y="69" width="0.1002%" height="15" fill="rgb(231,124,27)" fg:x="981945811" fg:w="1003009"/><text x="98.3462%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (2,006,018 samples, 0.20%)</title><rect x="98.1964%" y="85" width="0.2004%" height="15" fill="rgb(249,195,6)" fg:x="982948820" fg:w="2006018"/><text x="98.4464%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (2,006,018 samples, 0.20%)</title><rect x="98.1964%" y="69" width="0.2004%" height="15" fill="rgb(237,174,47)" fg:x="982948820" fg:w="2006018"/><text x="98.4464%" y="79.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="98.2966%" y="53" width="0.1002%" height="15" fill="rgb(206,201,31)" fg:x="983951829" fg:w="1003009"/><text x="98.5466%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="98.2966%" y="37" width="0.1002%" height="15" fill="rgb(231,57,52)" fg:x="983951829" fg:w="1003009"/><text x="98.5466%" y="47.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (5,015,045 samples, 0.50%)</title><rect x="97.9960%" y="101" width="0.5010%" height="15" fill="rgb(248,177,22)" fg:x="980942802" fg:w="5015045"/><text x="98.2460%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="85" width="0.1002%" height="15" fill="rgb(215,211,37)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="69" width="0.1002%" height="15" fill="rgb(241,128,51)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="79.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="98.3968%" y="53" width="0.1002%" height="15" fill="rgb(227,165,31)" fg:x="984954838" fg:w="1003009"/><text x="98.6468%" y="63.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="98.4970%" y="69" width="0.1002%" height="15" fill="rgb(228,167,24)" fg:x="985957847" fg:w="1003009"/><text x="98.7470%" y="79.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="98.8978%" y="53" width="0.2004%" height="15" fill="rgb(228,143,12)" fg:x="989969883" fg:w="2006018"/><text x="99.1478%" y="63.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (992,978,910 samples, 99.20%)</title><rect x="0.0000%" y="437" width="99.1984%" height="15" fill="rgb(249,149,8)" fg:x="0" fg:w="992978910"/><text x="0.2500%" y="447.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part2 (992,978,910 samples, 99.20%)</title><rect x="0.0000%" y="421" width="99.1984%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="992978910"/><text x="0.2500%" y="431.50">&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day1::part2 (992,978,910 samples, 99.20%)</title><rect x="0.0000%" y="405" width="99.1984%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="992978910"/><text x="0.2500%" y="415.50">aoc_2024_megaproject::problems::day1::part2</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="389" width="26.1523%" height="15" fill="rgb(233,213,13)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="399.50">core::array::_&lt;impl [T: N]&gt;::map</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="373" width="26.1523%" height="15" fill="rgb(233,141,41)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="383.50">core::array::_&lt;impl [T: N]&gt;::try_map</text></g><g><title>core::array::drain::drain_array_with (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="357" width="26.1523%" height="15" fill="rgb(239,167,4)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="367.50">core::array::drain::drain_array_with</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="341" width="26.1523%" height="15" fill="rgb(209,217,16)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="351.50">core::array::_&lt;impl [T: N]&gt;::try_map::_{{c..</text></g><g><title>core::array::try_from_trusted_iterator (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="325" width="26.1523%" height="15" fill="rgb(219,88,35)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="335.50">core::array::try_from_trusted_iterator</text></g><g><title>core::array::try_from_fn (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="309" width="26.1523%" height="15" fill="rgb(220,193,23)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="319.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="293" width="26.1523%" height="15" fill="rgb(230,90,52)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="303.50">core::array::try_from_fn_erased</text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="277" width="26.1523%" height="15" fill="rgb(252,106,19)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="287.50">core::array::try_from_trusted_iterator::ne..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="261" width="26.1523%" height="15" fill="rgb(206,74,20)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="271.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as co..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="245" width="26.1523%" height="15" fill="rgb(230,138,44)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="255.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;..</text></g><g><title>aoc_2024_megaproject::problems::day1::part1::_{{closure}} (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="229" width="26.1523%" height="15" fill="rgb(235,182,43)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="239.50">aoc_2024_megaproject::problems::day1::part..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="213" width="26.1523%" height="15" fill="rgb(242,16,51)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="223.50">core::slice::&lt;impl [T]&gt;::sort_unstable</text></g><g><title>core::slice::sort::unstable::sort (261,785,349 samples, 26.15%)</title><rect x="73.0461%" y="197" width="26.1523%" height="15" fill="rgb(248,9,4)" fg:x="731193561" fg:w="261785349"/><text x="73.2961%" y="207.50">core::slice::sort::unstable::sort</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (258,776,322 samples, 25.85%)</title><rect x="73.3467%" y="181" width="25.8517%" height="15" fill="rgb(210,31,22)" fg:x="734202588" fg:w="258776322"/><text x="73.5967%" y="191.50">core::slice::sort::unstable::quicksort::q..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (194,583,746 samples, 19.44%)</title><rect x="79.7595%" y="165" width="19.4389%" height="15" fill="rgb(239,54,39)" fg:x="798395164" fg:w="194583746"/><text x="80.0095%" y="175.50">core::slice::sort::unstable::q..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (122,367,098 samples, 12.22%)</title><rect x="86.9739%" y="149" width="12.2244%" height="15" fill="rgb(230,99,41)" fg:x="870611812" fg:w="122367098"/><text x="87.2239%" y="159.50">core::slice::sort:..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (55,165,495 samples, 5.51%)</title><rect x="93.6874%" y="133" width="5.5110%" height="15" fill="rgb(253,106,12)" fg:x="937813415" fg:w="55165495"/><text x="93.9374%" y="143.50">core::s..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (14,042,126 samples, 1.40%)</title><rect x="97.7956%" y="117" width="1.4028%" height="15" fill="rgb(213,46,41)" fg:x="978936784" fg:w="14042126"/><text x="98.0456%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (7,021,063 samples, 0.70%)</title><rect x="98.4970%" y="101" width="0.7014%" height="15" fill="rgb(215,133,35)" fg:x="985957847" fg:w="7021063"/><text x="98.7470%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (7,021,063 samples, 0.70%)</title><rect x="98.4970%" y="85" width="0.7014%" height="15" fill="rgb(213,28,5)" fg:x="985957847" fg:w="7021063"/><text x="98.7470%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (6,018,054 samples, 0.60%)</title><rect x="98.5972%" y="69" width="0.6012%" height="15" fill="rgb(215,77,49)" fg:x="986960856" fg:w="6018054"/><text x="98.8472%" y="79.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="99.0982%" y="53" width="0.1002%" height="15" fill="rgb(248,100,22)" fg:x="991975901" fg:w="1003009"/><text x="99.3482%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="99.0982%" y="37" width="0.1002%" height="15" fill="rgb(208,67,9)" fg:x="991975901" fg:w="1003009"/><text x="99.3482%" y="47.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="405" width="0.1002%" height="15" fill="rgb(219,133,21)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="389" width="0.1002%" height="15" fill="rgb(246,46,29)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="399.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="373" width="0.1002%" height="15" fill="rgb(246,185,52)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="383.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="357" width="0.1002%" height="15" fill="rgb(252,136,11)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="367.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="341" width="0.1002%" height="15" fill="rgb(219,138,53)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="325" width="0.1002%" height="15" fill="rgb(211,51,23)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.1984%" y="309" width="0.1002%" height="15" fill="rgb(247,221,28)" fg:x="992978910" fg:w="1003009"/><text x="99.4484%" y="319.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (2,006,018 samples, 0.20%)</title><rect x="99.2986%" y="229" width="0.2004%" height="15" fill="rgb(251,222,45)" fg:x="993981919" fg:w="2006018"/><text x="99.5486%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (5,015,045 samples, 0.50%)</title><rect x="99.1984%" y="437" width="0.5010%" height="15" fill="rgb(217,162,53)" fg:x="992978910" fg:w="5015045"/><text x="99.4484%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5,015,045 samples, 0.50%)</title><rect x="99.1984%" y="421" width="0.5010%" height="15" fill="rgb(229,93,14)" fg:x="992978910" fg:w="5015045"/><text x="99.4484%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::_{{closure}} (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="405" width="0.4008%" height="15" fill="rgb(209,67,49)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="415.50"></text></g><g><title>aoc_2024_megaproject::repeat_part::_{{closure}} (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="389" width="0.4008%" height="15" fill="rgb(213,87,29)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="373" width="0.4008%" height="15" fill="rgb(205,151,52)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="357" width="0.4008%" height="15" fill="rgb(253,215,39)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="341" width="0.4008%" height="15" fill="rgb(221,220,41)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="325" width="0.4008%" height="15" fill="rgb(218,133,21)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="309" width="0.4008%" height="15" fill="rgb(221,193,43)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="293" width="0.4008%" height="15" fill="rgb(240,128,52)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="277" width="0.4008%" height="15" fill="rgb(253,114,12)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="287.50"></text></g><g><title>__rustc::__rust_dealloc (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="261" width="0.4008%" height="15" fill="rgb(215,223,47)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="271.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (4,012,036 samples, 0.40%)</title><rect x="99.2986%" y="245" width="0.4008%" height="15" fill="rgb(248,225,23)" fg:x="993981919" fg:w="4012036"/><text x="99.5486%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,006,018 samples, 0.20%)</title><rect x="99.4990%" y="229" width="0.2004%" height="15" fill="rgb(250,108,0)" fg:x="995987937" fg:w="2006018"/><text x="99.7490%" y="239.50"></text></g><g><title>cfree (2,006,018 samples, 0.20%)</title><rect x="99.4990%" y="213" width="0.2004%" height="15" fill="rgb(228,208,7)" fg:x="995987937" fg:w="2006018"/><text x="99.7490%" y="223.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="99.4990%" y="197" width="0.2004%" height="15" fill="rgb(244,45,10)" fg:x="995987937" fg:w="2006018"/><text x="99.7490%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::env::Args&gt; (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="437" width="0.1002%" height="15" fill="rgb(207,125,25)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::env::ArgsOs&gt; (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="421" width="0.1002%" height="15" fill="rgb(210,195,18)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::args::common::Args&gt; (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="405" width="0.1002%" height="15" fill="rgb(249,80,12)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;std::ffi::os_str::OsString&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="389" width="0.1002%" height="15" fill="rgb(221,65,9)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="373" width="0.1002%" height="15" fill="rgb(235,49,36)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="383.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="357" width="0.1002%" height="15" fill="rgb(225,32,20)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="367.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="341" width="0.1002%" height="15" fill="rgb(215,141,46)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="437" width="0.1002%" height="15" fill="rgb(250,160,47)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="447.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="421" width="0.1002%" height="15" fill="rgb(216,222,40)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="431.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="405" width="0.1002%" height="15" fill="rgb(234,217,39)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="389" width="0.1002%" height="15" fill="rgb(207,178,40)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="373" width="0.1002%" height="15" fill="rgb(221,136,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="357" width="0.1002%" height="15" fill="rgb(249,199,10)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(249,222,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="325" width="0.1002%" height="15" fill="rgb(244,185,38)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="309" width="0.1002%" height="15" fill="rgb(236,202,9)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="319.50"></text></g><g><title>regex_syntax::ast::Concat::into_ast (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="293" width="0.1002%" height="15" fill="rgb(250,229,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Concat&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="277" width="0.1002%" height="15" fill="rgb(206,174,23)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(211,33,43)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::ast::Ast&gt;&gt; (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(245,58,50)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="229" width="0.1002%" height="15" fill="rgb(244,68,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="213" width="0.1002%" height="15" fill="rgb(232,229,15)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="197" width="0.1002%" height="15" fill="rgb(254,30,23)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="181" width="0.1002%" height="15" fill="rgb(235,160,14)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="191.50"></text></g><g><title>__rustc::__rust_dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="165" width="0.1002%" height="15" fill="rgb(212,155,44)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="175.50"></text></g><g><title>&lt;aoc_2024_megaproject::staging_tracking_allocator::TrackingAllocator&lt;A&gt; as core::alloc::global::GlobalAlloc&gt;::dealloc (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="149" width="0.1002%" height="15" fill="rgb(226,2,50)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="159.50"></text></g><g><title>aoc_2024_megaproject::staging_tracking_allocator::Spinlock&lt;T&gt;::lock (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="133" width="0.1002%" height="15" fill="rgb(234,177,6)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange_weak (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="117" width="0.1002%" height="15" fill="rgb(217,24,9)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="101" width="0.1002%" height="15" fill="rgb(220,13,46)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="111.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="767.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="751.50">aoc-2024-megapr</text></g><g><title>_start (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="735.50">_start</text></g><g><title>__libc_start_main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="719.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="703.50">[libc.so.6]</text></g><g><title>main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="607.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="527.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="511.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="479.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="463.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="437" width="0.1002%" height="15" fill="rgb(208,77,27)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="447.50"></text></g><g><title>std::env::args_os (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="421" width="0.1002%" height="15" fill="rgb(221,76,26)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="431.50"></text></g><g><title>std::sys::args::unix::args (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="405" width="0.1002%" height="15" fill="rgb(225,139,18)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="415.50"></text></g><g><title>core::ffi::c_str::CStr::from_ptr (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="389" width="0.1002%" height="15" fill="rgb(230,137,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="399.50"></text></g><g><title>core::ffi::c_str::strlen (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="373" width="0.1002%" height="15" fill="rgb(212,28,1)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="383.50"></text></g><g><title>core::ffi::c_str::strlen::runtime (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="357" width="0.1002%" height="15" fill="rgb(248,164,17)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="367.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="341" width="0.1002%" height="15" fill="rgb(222,171,42)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="351.50"></text></g></svg></svg>