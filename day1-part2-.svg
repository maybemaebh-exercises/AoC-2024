<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="981.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="999999973"><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (17,051,153 samples, 1.71%)</title><rect x="1.8054%" y="581" width="1.7051%" height="15" fill="rgb(227,0,7)" fg:x="18054162" fg:w="17051153"/><text x="2.0554%" y="591.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (14,042,126 samples, 1.40%)</title><rect x="2.1063%" y="565" width="1.4042%" height="15" fill="rgb(217,0,24)" fg:x="21063189" fg:w="14042126"/><text x="2.3563%" y="575.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (106,318,954 samples, 10.63%)</title><rect x="3.5105%" y="501" width="10.6319%" height="15" fill="rgb(221,193,54)" fg:x="35105315" fg:w="106318954"/><text x="3.7605%" y="511.50">&lt;core::str::iter..</text></g><g><title>core::str::validations::next_code_point (106,318,954 samples, 10.63%)</title><rect x="3.5105%" y="485" width="10.6319%" height="15" fill="rgb(248,212,6)" fg:x="35105315" fg:w="106318954"/><text x="3.7605%" y="495.50">core::str::valid..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (76,228,684 samples, 7.62%)</title><rect x="6.5196%" y="469" width="7.6229%" height="15" fill="rgb(208,68,35)" fg:x="65195585" fg:w="76228684"/><text x="6.7696%" y="479.50">&lt;core::sli..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (76,228,684 samples, 7.62%)</title><rect x="6.5196%" y="453" width="7.6229%" height="15" fill="rgb(232,128,0)" fg:x="65195585" fg:w="76228684"/><text x="6.7696%" y="463.50">&lt;core::ptr..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="14.1424%" y="485" width="0.7021%" height="15" fill="rgb(207,160,47)" fg:x="141424269" fg:w="7021063"/><text x="14.3924%" y="495.50"></text></g><g><title>aoc_2024_megaproject::problems::day1::part2::_{{closure}} (7,021,063 samples, 0.70%)</title><rect x="14.1424%" y="469" width="0.7021%" height="15" fill="rgb(228,23,34)" fg:x="141424269" fg:w="7021063"/><text x="14.3924%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (151,454,359 samples, 15.15%)</title><rect x="3.5105%" y="581" width="15.1454%" height="15" fill="rgb(218,30,26)" fg:x="35105315" fg:w="151454359"/><text x="3.7605%" y="591.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (151,454,359 samples, 15.15%)</title><rect x="3.5105%" y="565" width="15.1454%" height="15" fill="rgb(220,122,19)" fg:x="35105315" fg:w="151454359"/><text x="3.7605%" y="575.50">core::iter::traits::ite..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (151,454,359 samples, 15.15%)</title><rect x="3.5105%" y="549" width="15.1454%" height="15" fill="rgb(250,228,42)" fg:x="35105315" fg:w="151454359"/><text x="3.7605%" y="559.50">&lt;usize as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (151,454,359 samples, 15.15%)</title><rect x="3.5105%" y="533" width="15.1454%" height="15" fill="rgb(240,193,28)" fg:x="35105315" fg:w="151454359"/><text x="3.7605%" y="543.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (151,454,359 samples, 15.15%)</title><rect x="3.5105%" y="517" width="15.1454%" height="15" fill="rgb(216,20,37)" fg:x="35105315" fg:w="151454359"/><text x="3.7605%" y="527.50">core::iter::traits::ite..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (45,135,405 samples, 4.51%)</title><rect x="14.1424%" y="501" width="4.5135%" height="15" fill="rgb(206,188,39)" fg:x="141424269" fg:w="45135405"/><text x="14.3924%" y="511.50">core:..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (38,114,342 samples, 3.81%)</title><rect x="14.8445%" y="485" width="3.8114%" height="15" fill="rgb(217,207,13)" fg:x="148445332" fg:w="38114342"/><text x="15.0945%" y="495.50">&lt;usi..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (93,279,837 samples, 9.33%)</title><rect x="34.0020%" y="421" width="9.3280%" height="15" fill="rgb(231,73,38)" fg:x="340020051" fg:w="93279837"/><text x="34.2520%" y="431.50">&lt;F as core::s..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (93,279,837 samples, 9.33%)</title><rect x="34.0020%" y="405" width="9.3280%" height="15" fill="rgb(225,20,46)" fg:x="340020051" fg:w="93279837"/><text x="34.2520%" y="415.50">&lt;core::str::I..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (93,279,837 samples, 9.33%)</title><rect x="34.0020%" y="389" width="9.3280%" height="15" fill="rgb(210,31,41)" fg:x="340020051" fg:w="93279837"/><text x="34.2520%" y="399.50">&lt;core::str::I..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (93,279,837 samples, 9.33%)</title><rect x="34.0020%" y="373" width="9.3280%" height="15" fill="rgb(221,200,47)" fg:x="340020051" fg:w="93279837"/><text x="34.2520%" y="383.50">core::char::m..</text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (415,245,726 samples, 41.52%)</title><rect x="18.6560%" y="565" width="41.5246%" height="15" fill="rgb(226,26,5)" fg:x="186559674" fg:w="415245726"/><text x="18.9060%" y="575.50">&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::I..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (415,245,726 samples, 41.52%)</title><rect x="18.6560%" y="549" width="41.5246%" height="15" fill="rgb(249,33,26)" fg:x="186559674" fg:w="415245726"/><text x="18.9060%" y="559.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::it..</text></g><g><title>core::iter::traits::iterator::Iterator::find (415,245,726 samples, 41.52%)</title><rect x="18.6560%" y="533" width="41.5246%" height="15" fill="rgb(235,183,28)" fg:x="186559674" fg:w="415245726"/><text x="18.9060%" y="543.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (415,245,726 samples, 41.52%)</title><rect x="18.6560%" y="517" width="41.5246%" height="15" fill="rgb(221,5,38)" fg:x="186559674" fg:w="415245726"/><text x="18.9060%" y="527.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (277,833,493 samples, 27.78%)</title><rect x="32.3972%" y="501" width="27.7834%" height="15" fill="rgb(247,18,42)" fg:x="323971907" fg:w="277833493"/><text x="32.6472%" y="511.50">&lt;core::str::iter::Split&lt;P&gt; as core::iter::tra..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (277,833,493 samples, 27.78%)</title><rect x="32.3972%" y="485" width="27.7834%" height="15" fill="rgb(241,131,45)" fg:x="323971907" fg:w="277833493"/><text x="32.6472%" y="495.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (261,785,349 samples, 26.18%)</title><rect x="34.0020%" y="469" width="26.1785%" height="15" fill="rgb(249,31,29)" fg:x="340020051" fg:w="261785349"/><text x="34.2520%" y="479.50">&lt;core::str::pattern::CharPredicateSearcher..</text></g><g><title>core::str::pattern::Searcher::next_match (261,785,349 samples, 26.18%)</title><rect x="34.0020%" y="453" width="26.1785%" height="15" fill="rgb(225,111,53)" fg:x="340020051" fg:w="261785349"/><text x="34.2520%" y="463.50">core::str::pattern::Searcher::next_match</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (261,785,349 samples, 26.18%)</title><rect x="34.0020%" y="437" width="26.1785%" height="15" fill="rgb(238,160,17)" fg:x="340020051" fg:w="261785349"/><text x="34.2520%" y="447.50">&lt;core::str::pattern::MultiCharEqSearcher&lt;C..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (168,505,512 samples, 16.85%)</title><rect x="43.3300%" y="421" width="16.8506%" height="15" fill="rgb(214,148,48)" fg:x="433299888" fg:w="168505512"/><text x="43.5800%" y="431.50">&lt;core::str::iter::CharIndi..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (160,481,440 samples, 16.05%)</title><rect x="44.1324%" y="405" width="16.0481%" height="15" fill="rgb(232,36,49)" fg:x="441323960" fg:w="160481440"/><text x="44.3824%" y="415.50">&lt;core::str::iter::Chars a..</text></g><g><title>core::str::validations::next_code_point (160,481,440 samples, 16.05%)</title><rect x="44.1324%" y="389" width="16.0481%" height="15" fill="rgb(209,103,24)" fg:x="441323960" fg:w="160481440"/><text x="44.3824%" y="399.50">core::str::validations::n..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,111,333 samples, 3.71%)</title><rect x="56.4694%" y="373" width="3.7111%" height="15" fill="rgb(229,88,8)" fg:x="564694067" fg:w="37111333"/><text x="56.7194%" y="383.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (540,621,851 samples, 54.06%)</title><rect x="18.6560%" y="581" width="54.0622%" height="15" fill="rgb(213,181,19)" fg:x="186559674" fg:w="540621851"/><text x="18.9060%" y="591.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="565" width="12.5376%" height="15" fill="rgb(254,191,54)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="575.50">core::option::Optio..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="549" width="12.5376%" height="15" fill="rgb(241,83,37)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="559.50">core::ops::function..</text></g><g><title>aoc_2024_megaproject::problems::day1::part2::_{{closure}} (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="533" width="12.5376%" height="15" fill="rgb(233,36,39)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="543.50">aoc_2024_megaprojec..</text></g><g><title>core::str::&lt;impl str&gt;::parse (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="517" width="12.5376%" height="15" fill="rgb(226,3,54)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="527.50">core::str::&lt;impl st..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="501" width="12.5376%" height="15" fill="rgb(245,192,40)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="511.50">core::num::&lt;impl co..</text></g><g><title>core::num::&lt;impl u32&gt;::from_str_radix (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="485" width="12.5376%" height="15" fill="rgb(238,167,29)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="495.50">core::num::&lt;impl u3..</text></g><g><title>core::num::&lt;impl u32&gt;::from_ascii_radix (125,376,125 samples, 12.54%)</title><rect x="60.1805%" y="469" width="12.5376%" height="15" fill="rgb(232,182,51)" fg:x="601805400" fg:w="125376125"/><text x="60.4305%" y="479.50">core::num::&lt;impl u3..</text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (28,084,252 samples, 2.81%)</title><rect x="69.9097%" y="453" width="2.8084%" height="15" fill="rgb(231,60,39)" fg:x="699097273" fg:w="28084252"/><text x="70.1597%" y="463.50">co..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (13,039,117 samples, 1.30%)</title><rect x="71.4142%" y="437" width="1.3039%" height="15" fill="rgb(208,69,12)" fg:x="714142408" fg:w="13039117"/><text x="71.6642%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (57,171,513 samples, 5.72%)</title><rect x="72.7182%" y="581" width="5.7172%" height="15" fill="rgb(235,93,37)" fg:x="727181525" fg:w="57171513"/><text x="72.9682%" y="591.50">alloc::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="78.4353%" y="357" width="0.1003%" height="15" fill="rgb(213,116,39)" fg:x="784353038" fg:w="1003009"/><text x="78.6853%" y="367.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="78.4353%" y="341" width="0.1003%" height="15" fill="rgb(222,207,29)" fg:x="784353038" fg:w="1003009"/><text x="78.6853%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (1,003,009 samples, 0.10%)</title><rect x="78.5356%" y="357" width="0.1003%" height="15" fill="rgb(206,96,30)" fg:x="785356047" fg:w="1003009"/><text x="78.7856%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="78.5356%" y="341" width="0.1003%" height="15" fill="rgb(218,138,4)" fg:x="785356047" fg:w="1003009"/><text x="78.7856%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="78.5356%" y="325" width="0.1003%" height="15" fill="rgb(250,191,14)" fg:x="785356047" fg:w="1003009"/><text x="78.7856%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="78.5356%" y="309" width="0.1003%" height="15" fill="rgb(239,60,40)" fg:x="785356047" fg:w="1003009"/><text x="78.7856%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (3,009,027 samples, 0.30%)</title><rect x="78.4353%" y="373" width="0.3009%" height="15" fill="rgb(206,27,48)" fg:x="784353038" fg:w="3009027"/><text x="78.6853%" y="383.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="78.6359%" y="357" width="0.1003%" height="15" fill="rgb(225,35,8)" fg:x="786359056" fg:w="1003009"/><text x="78.8859%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="78.6359%" y="341" width="0.1003%" height="15" fill="rgb(250,213,24)" fg:x="786359056" fg:w="1003009"/><text x="78.8859%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="78.7362%" y="325" width="0.1003%" height="15" fill="rgb(247,123,22)" fg:x="787362065" fg:w="1003009"/><text x="78.9862%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="78.7362%" y="357" width="0.2006%" height="15" fill="rgb(231,138,38)" fg:x="787362065" fg:w="2006018"/><text x="78.9862%" y="367.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="78.7362%" y="341" width="0.2006%" height="15" fill="rgb(231,145,46)" fg:x="787362065" fg:w="2006018"/><text x="78.9862%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="78.8365%" y="325" width="0.1003%" height="15" fill="rgb(251,118,11)" fg:x="788365074" fg:w="1003009"/><text x="79.0865%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="78.9368%" y="341" width="0.1003%" height="15" fill="rgb(217,147,25)" fg:x="789368083" fg:w="1003009"/><text x="79.1868%" y="351.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="78.9368%" y="325" width="0.1003%" height="15" fill="rgb(247,81,37)" fg:x="789368083" fg:w="1003009"/><text x="79.1868%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (3,009,027 samples, 0.30%)</title><rect x="79.0371%" y="341" width="0.3009%" height="15" fill="rgb(209,12,38)" fg:x="790371092" fg:w="3009027"/><text x="79.2871%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.30%)</title><rect x="79.0371%" y="325" width="0.3009%" height="15" fill="rgb(227,1,9)" fg:x="790371092" fg:w="3009027"/><text x="79.2871%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="79.2377%" y="309" width="0.1003%" height="15" fill="rgb(248,47,43)" fg:x="792377110" fg:w="1003009"/><text x="79.4877%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="79.2377%" y="293" width="0.1003%" height="15" fill="rgb(221,10,30)" fg:x="792377110" fg:w="1003009"/><text x="79.4877%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (2,006,018 samples, 0.20%)</title><rect x="79.3380%" y="341" width="0.2006%" height="15" fill="rgb(210,229,1)" fg:x="793380119" fg:w="2006018"/><text x="79.5880%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="79.4383%" y="325" width="0.1003%" height="15" fill="rgb(222,148,37)" fg:x="794383128" fg:w="1003009"/><text x="79.6883%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (2,006,018 samples, 0.20%)</title><rect x="79.5386%" y="341" width="0.2006%" height="15" fill="rgb(234,67,33)" fg:x="795386137" fg:w="2006018"/><text x="79.7886%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="79.5386%" y="325" width="0.2006%" height="15" fill="rgb(247,98,35)" fg:x="795386137" fg:w="2006018"/><text x="79.7886%" y="335.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="79.5386%" y="309" width="0.2006%" height="15" fill="rgb(247,138,52)" fg:x="795386137" fg:w="2006018"/><text x="79.7886%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (9,027,081 samples, 0.90%)</title><rect x="78.9368%" y="357" width="0.9027%" height="15" fill="rgb(213,79,30)" fg:x="789368083" fg:w="9027081"/><text x="79.1868%" y="367.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="79.7392%" y="341" width="0.1003%" height="15" fill="rgb(246,177,23)" fg:x="797392155" fg:w="1003009"/><text x="79.9892%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="79.7392%" y="325" width="0.1003%" height="15" fill="rgb(230,62,27)" fg:x="797392155" fg:w="1003009"/><text x="79.9892%" y="335.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="79.7392%" y="309" width="0.1003%" height="15" fill="rgb(216,154,8)" fg:x="797392155" fg:w="1003009"/><text x="79.9892%" y="319.50"></text></g><g><title>core::intrinsics::copy (30,090,270 samples, 3.01%)</title><rect x="80.3410%" y="309" width="3.0090%" height="15" fill="rgb(244,35,45)" fg:x="803410209" fg:w="30090270"/><text x="80.5910%" y="319.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (43,129,387 samples, 4.31%)</title><rect x="79.8395%" y="357" width="4.3129%" height="15" fill="rgb(251,115,12)" fg:x="798395164" fg:w="43129387"/><text x="80.0895%" y="367.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (43,129,387 samples, 4.31%)</title><rect x="79.8395%" y="341" width="4.3129%" height="15" fill="rgb(240,54,50)" fg:x="798395164" fg:w="43129387"/><text x="80.0895%" y="351.50">core:..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (41,123,369 samples, 4.11%)</title><rect x="80.0401%" y="325" width="4.1123%" height="15" fill="rgb(233,84,52)" fg:x="800401182" fg:w="41123369"/><text x="80.2901%" y="335.50">core..</text></g><g><title>core::ops::function::FnMut::call_mut (8,024,072 samples, 0.80%)</title><rect x="83.3501%" y="309" width="0.8024%" height="15" fill="rgb(207,117,47)" fg:x="833500479" fg:w="8024072"/><text x="83.6001%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (8,024,072 samples, 0.80%)</title><rect x="83.3501%" y="293" width="0.8024%" height="15" fill="rgb(249,43,39)" fg:x="833500479" fg:w="8024072"/><text x="83.6001%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="84.1525%" y="309" width="0.1003%" height="15" fill="rgb(209,38,44)" fg:x="841524551" fg:w="1003009"/><text x="84.4025%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (3,009,027 samples, 0.30%)</title><rect x="84.1525%" y="341" width="0.3009%" height="15" fill="rgb(236,212,23)" fg:x="841524551" fg:w="3009027"/><text x="84.4025%" y="351.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (3,009,027 samples, 0.30%)</title><rect x="84.1525%" y="325" width="0.3009%" height="15" fill="rgb(242,79,21)" fg:x="841524551" fg:w="3009027"/><text x="84.4025%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="84.2528%" y="309" width="0.2006%" height="15" fill="rgb(211,96,35)" fg:x="842527560" fg:w="2006018"/><text x="84.5028%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (1,003,009 samples, 0.10%)</title><rect x="84.3531%" y="293" width="0.1003%" height="15" fill="rgb(253,215,40)" fg:x="843530569" fg:w="1003009"/><text x="84.6031%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="84.6540%" y="325" width="0.1003%" height="15" fill="rgb(211,81,21)" fg:x="846539596" fg:w="1003009"/><text x="84.9040%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,003,009 samples, 0.10%)</title><rect x="84.7543%" y="309" width="0.1003%" height="15" fill="rgb(208,190,38)" fg:x="847542605" fg:w="1003009"/><text x="85.0043%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,003,009 samples, 0.10%)</title><rect x="84.7543%" y="293" width="0.1003%" height="15" fill="rgb(235,213,38)" fg:x="847542605" fg:w="1003009"/><text x="85.0043%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,003,009 samples, 0.10%)</title><rect x="84.7543%" y="277" width="0.1003%" height="15" fill="rgb(237,122,38)" fg:x="847542605" fg:w="1003009"/><text x="85.0043%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,003,009 samples, 0.10%)</title><rect x="84.7543%" y="261" width="0.1003%" height="15" fill="rgb(244,218,35)" fg:x="847542605" fg:w="1003009"/><text x="85.0043%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (2,006,018 samples, 0.20%)</title><rect x="84.8546%" y="309" width="0.2006%" height="15" fill="rgb(240,68,47)" fg:x="848545614" fg:w="2006018"/><text x="85.1046%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,012,036 samples, 0.40%)</title><rect x="84.7543%" y="325" width="0.4012%" height="15" fill="rgb(210,16,53)" fg:x="847542605" fg:w="4012036"/><text x="85.0043%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="85.0552%" y="309" width="0.1003%" height="15" fill="rgb(235,124,12)" fg:x="850551632" fg:w="1003009"/><text x="85.3052%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="85.0552%" y="293" width="0.1003%" height="15" fill="rgb(224,169,11)" fg:x="850551632" fg:w="1003009"/><text x="85.3052%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2,006,018 samples, 0.20%)</title><rect x="85.2558%" y="309" width="0.2006%" height="15" fill="rgb(250,166,2)" fg:x="852557650" fg:w="2006018"/><text x="85.5058%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (4,012,036 samples, 0.40%)</title><rect x="85.1555%" y="325" width="0.4012%" height="15" fill="rgb(242,216,29)" fg:x="851554641" fg:w="4012036"/><text x="85.4055%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="85.4564%" y="309" width="0.1003%" height="15" fill="rgb(230,116,27)" fg:x="854563668" fg:w="1003009"/><text x="85.7064%" y="319.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="85.7573%" y="293" width="0.2006%" height="15" fill="rgb(228,99,48)" fg:x="857572695" fg:w="2006018"/><text x="86.0073%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (5,015,045 samples, 0.50%)</title><rect x="85.5567%" y="325" width="0.5015%" height="15" fill="rgb(253,11,6)" fg:x="855566677" fg:w="5015045"/><text x="85.8067%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (5,015,045 samples, 0.50%)</title><rect x="85.5567%" y="309" width="0.5015%" height="15" fill="rgb(247,143,39)" fg:x="855566677" fg:w="5015045"/><text x="85.8067%" y="319.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="85.9579%" y="293" width="0.1003%" height="15" fill="rgb(236,97,10)" fg:x="859578713" fg:w="1003009"/><text x="86.2079%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (17,051,153 samples, 1.71%)</title><rect x="84.4534%" y="341" width="1.7051%" height="15" fill="rgb(233,208,19)" fg:x="844533578" fg:w="17051153"/><text x="84.7034%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="86.0582%" y="325" width="0.1003%" height="15" fill="rgb(216,164,2)" fg:x="860581722" fg:w="1003009"/><text x="86.3082%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="86.0582%" y="309" width="0.1003%" height="15" fill="rgb(220,129,5)" fg:x="860581722" fg:w="1003009"/><text x="86.3082%" y="319.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="86.0582%" y="293" width="0.1003%" height="15" fill="rgb(242,17,10)" fg:x="860581722" fg:w="1003009"/><text x="86.3082%" y="303.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="86.1585%" y="309" width="0.1003%" height="15" fill="rgb(242,107,0)" fg:x="861584731" fg:w="1003009"/><text x="86.4085%" y="319.50"></text></g><g><title>core::intrinsics::copy (25,075,225 samples, 2.51%)</title><rect x="86.7603%" y="293" width="2.5075%" height="15" fill="rgb(251,28,31)" fg:x="867602785" fg:w="25075225"/><text x="87.0103%" y="303.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition (33,099,297 samples, 3.31%)</title><rect x="86.1585%" y="341" width="3.3099%" height="15" fill="rgb(233,223,10)" fg:x="861584731" fg:w="33099297"/><text x="86.4085%" y="351.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (33,099,297 samples, 3.31%)</title><rect x="86.1585%" y="325" width="3.3099%" height="15" fill="rgb(215,21,27)" fg:x="861584731" fg:w="33099297"/><text x="86.4085%" y="335.50">cor..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (32,096,288 samples, 3.21%)</title><rect x="86.2588%" y="309" width="3.2096%" height="15" fill="rgb(232,23,21)" fg:x="862587740" fg:w="32096288"/><text x="86.5088%" y="319.50">cor..</text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="89.2678%" y="293" width="0.2006%" height="15" fill="rgb(244,5,23)" fg:x="892678010" fg:w="2006018"/><text x="89.5178%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="89.2678%" y="277" width="0.2006%" height="15" fill="rgb(226,81,46)" fg:x="892678010" fg:w="2006018"/><text x="89.5178%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="89.5687%" y="325" width="0.1003%" height="15" fill="rgb(247,70,30)" fg:x="895687037" fg:w="1003009"/><text x="89.8187%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="89.5687%" y="309" width="0.1003%" height="15" fill="rgb(212,68,19)" fg:x="895687037" fg:w="1003009"/><text x="89.8187%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (2,006,018 samples, 0.20%)</title><rect x="89.6690%" y="325" width="0.2006%" height="15" fill="rgb(240,187,13)" fg:x="896690046" fg:w="2006018"/><text x="89.9190%" y="335.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="89.6690%" y="309" width="0.2006%" height="15" fill="rgb(223,113,26)" fg:x="896690046" fg:w="2006018"/><text x="89.9190%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2,006,018 samples, 0.20%)</title><rect x="89.6690%" y="293" width="0.2006%" height="15" fill="rgb(206,192,2)" fg:x="896690046" fg:w="2006018"/><text x="89.9190%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.20%)</title><rect x="89.8696%" y="309" width="0.2006%" height="15" fill="rgb(241,108,4)" fg:x="898696064" fg:w="2006018"/><text x="90.1196%" y="319.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="89.9699%" y="293" width="0.1003%" height="15" fill="rgb(247,173,49)" fg:x="899699073" fg:w="1003009"/><text x="90.2199%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="90.0702%" y="293" width="0.1003%" height="15" fill="rgb(224,114,35)" fg:x="900702082" fg:w="1003009"/><text x="90.3202%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,012,036 samples, 0.40%)</title><rect x="90.0702%" y="309" width="0.4012%" height="15" fill="rgb(245,159,27)" fg:x="900702082" fg:w="4012036"/><text x="90.3202%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.30%)</title><rect x="90.1705%" y="293" width="0.3009%" height="15" fill="rgb(245,172,44)" fg:x="901705091" fg:w="3009027"/><text x="90.4205%" y="303.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,006,018 samples, 0.20%)</title><rect x="90.2708%" y="277" width="0.2006%" height="15" fill="rgb(236,23,11)" fg:x="902708100" fg:w="2006018"/><text x="90.5208%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2,006,018 samples, 0.20%)</title><rect x="90.2708%" y="261" width="0.2006%" height="15" fill="rgb(205,117,38)" fg:x="902708100" fg:w="2006018"/><text x="90.5208%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (5,015,045 samples, 0.50%)</title><rect x="90.4714%" y="309" width="0.5015%" height="15" fill="rgb(237,72,25)" fg:x="904714118" fg:w="5015045"/><text x="90.7214%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (5,015,045 samples, 0.50%)</title><rect x="90.4714%" y="293" width="0.5015%" height="15" fill="rgb(244,70,9)" fg:x="904714118" fg:w="5015045"/><text x="90.7214%" y="303.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="90.9729%" y="277" width="0.2006%" height="15" fill="rgb(217,125,39)" fg:x="909729163" fg:w="2006018"/><text x="91.2229%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="91.1735%" y="277" width="0.1003%" height="15" fill="rgb(235,36,10)" fg:x="911735181" fg:w="1003009"/><text x="91.4235%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (4,012,036 samples, 0.40%)</title><rect x="90.9729%" y="309" width="0.4012%" height="15" fill="rgb(251,123,47)" fg:x="909729163" fg:w="4012036"/><text x="91.2229%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (4,012,036 samples, 0.40%)</title><rect x="90.9729%" y="293" width="0.4012%" height="15" fill="rgb(221,13,13)" fg:x="909729163" fg:w="4012036"/><text x="91.2229%" y="303.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="91.2738%" y="277" width="0.1003%" height="15" fill="rgb(238,131,9)" fg:x="912738190" fg:w="1003009"/><text x="91.5238%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (16,048,144 samples, 1.60%)</title><rect x="89.8696%" y="325" width="1.6048%" height="15" fill="rgb(211,50,8)" fg:x="898696064" fg:w="16048144"/><text x="90.1196%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="91.3741%" y="309" width="0.1003%" height="15" fill="rgb(245,182,24)" fg:x="913741199" fg:w="1003009"/><text x="91.6241%" y="319.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="91.3741%" y="293" width="0.1003%" height="15" fill="rgb(242,14,37)" fg:x="913741199" fg:w="1003009"/><text x="91.6241%" y="303.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="91.3741%" y="277" width="0.1003%" height="15" fill="rgb(246,228,12)" fg:x="913741199" fg:w="1003009"/><text x="91.6241%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="309" width="0.1003%" height="15" fill="rgb(213,55,15)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="319.50"></text></g><g><title>core::ptr::swap (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="293" width="0.1003%" height="15" fill="rgb(209,9,3)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="91.4744%" y="277" width="0.1003%" height="15" fill="rgb(230,59,30)" fg:x="914744208" fg:w="1003009"/><text x="91.7244%" y="287.50"></text></g><g><title>core::intrinsics::copy (15,045,135 samples, 1.50%)</title><rect x="91.7753%" y="277" width="1.5045%" height="15" fill="rgb(209,121,21)" fg:x="917753235" fg:w="15045135"/><text x="92.0253%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (29,087,261 samples, 2.91%)</title><rect x="91.4744%" y="325" width="2.9087%" height="15" fill="rgb(220,109,13)" fg:x="914744208" fg:w="29087261"/><text x="91.7244%" y="335.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (28,084,252 samples, 2.81%)</title><rect x="91.5747%" y="309" width="2.8084%" height="15" fill="rgb(232,18,1)" fg:x="915747217" fg:w="28084252"/><text x="91.8247%" y="319.50">co..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (28,084,252 samples, 2.81%)</title><rect x="91.5747%" y="293" width="2.8084%" height="15" fill="rgb(215,41,42)" fg:x="915747217" fg:w="28084252"/><text x="91.8247%" y="303.50">co..</text></g><g><title>core::ops::function::FnMut::call_mut (11,033,099 samples, 1.10%)</title><rect x="93.2798%" y="277" width="1.1033%" height="15" fill="rgb(224,123,36)" fg:x="932798370" fg:w="11033099"/><text x="93.5298%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (11,033,099 samples, 1.10%)</title><rect x="93.2798%" y="261" width="1.1033%" height="15" fill="rgb(240,125,3)" fg:x="932798370" fg:w="11033099"/><text x="93.5298%" y="271.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (1,003,009 samples, 0.10%)</title><rect x="94.3831%" y="309" width="0.1003%" height="15" fill="rgb(205,98,50)" fg:x="943831469" fg:w="1003009"/><text x="94.6331%" y="319.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (1,003,009 samples, 0.10%)</title><rect x="94.3831%" y="293" width="0.1003%" height="15" fill="rgb(205,185,37)" fg:x="943831469" fg:w="1003009"/><text x="94.6331%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.30%)</title><rect x="94.4835%" y="293" width="0.3009%" height="15" fill="rgb(238,207,15)" fg:x="944834478" fg:w="3009027"/><text x="94.7335%" y="303.50"></text></g><g><title>[libc.so.6] (3,009,027 samples, 0.30%)</title><rect x="94.4835%" y="277" width="0.3009%" height="15" fill="rgb(213,199,42)" fg:x="944834478" fg:w="3009027"/><text x="94.7335%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3,009,027 samples, 0.30%)</title><rect x="94.7844%" y="261" width="0.3009%" height="15" fill="rgb(235,201,11)" fg:x="947843505" fg:w="3009027"/><text x="95.0344%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.30%)</title><rect x="94.7844%" y="245" width="0.3009%" height="15" fill="rgb(207,46,11)" fg:x="947843505" fg:w="3009027"/><text x="95.0344%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (4,012,036 samples, 0.40%)</title><rect x="94.7844%" y="277" width="0.4012%" height="15" fill="rgb(241,35,35)" fg:x="947843505" fg:w="4012036"/><text x="95.0344%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (1,003,009 samples, 0.10%)</title><rect x="95.0853%" y="261" width="0.1003%" height="15" fill="rgb(243,32,47)" fg:x="950852532" fg:w="1003009"/><text x="95.3353%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (1,003,009 samples, 0.10%)</title><rect x="95.0853%" y="245" width="0.1003%" height="15" fill="rgb(247,202,23)" fg:x="950852532" fg:w="1003009"/><text x="95.3353%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="95.2859%" y="261" width="0.1003%" height="15" fill="rgb(219,102,11)" fg:x="952858550" fg:w="1003009"/><text x="95.5359%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (7,021,063 samples, 0.70%)</title><rect x="94.7844%" y="293" width="0.7021%" height="15" fill="rgb(243,110,44)" fg:x="947843505" fg:w="7021063"/><text x="95.0344%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (3,009,027 samples, 0.30%)</title><rect x="95.1856%" y="277" width="0.3009%" height="15" fill="rgb(222,74,54)" fg:x="951855541" fg:w="3009027"/><text x="95.4356%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="95.3862%" y="261" width="0.1003%" height="15" fill="rgb(216,99,12)" fg:x="953861559" fg:w="1003009"/><text x="95.6362%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="95.3862%" y="245" width="0.1003%" height="15" fill="rgb(226,22,26)" fg:x="953861559" fg:w="1003009"/><text x="95.6362%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,003,009 samples, 0.10%)</title><rect x="95.4865%" y="277" width="0.1003%" height="15" fill="rgb(217,163,10)" fg:x="954864568" fg:w="1003009"/><text x="95.7365%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (8,024,072 samples, 0.80%)</title><rect x="95.4865%" y="293" width="0.8024%" height="15" fill="rgb(213,25,53)" fg:x="954864568" fg:w="8024072"/><text x="95.7365%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (7,021,063 samples, 0.70%)</title><rect x="95.5868%" y="277" width="0.7021%" height="15" fill="rgb(252,105,26)" fg:x="955867577" fg:w="7021063"/><text x="95.8368%" y="287.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="96.2889%" y="261" width="0.1003%" height="15" fill="rgb(220,39,43)" fg:x="962888640" fg:w="1003009"/><text x="96.5389%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (2,006,018 samples, 0.20%)</title><rect x="96.2889%" y="293" width="0.2006%" height="15" fill="rgb(229,68,48)" fg:x="962888640" fg:w="2006018"/><text x="96.5389%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (2,006,018 samples, 0.20%)</title><rect x="96.2889%" y="277" width="0.2006%" height="15" fill="rgb(252,8,32)" fg:x="962888640" fg:w="2006018"/><text x="96.5389%" y="287.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="96.3892%" y="261" width="0.1003%" height="15" fill="rgb(223,20,43)" fg:x="963891649" fg:w="1003009"/><text x="96.6392%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (21,063,189 samples, 2.11%)</title><rect x="94.4835%" y="309" width="2.1063%" height="15" fill="rgb(229,81,49)" fg:x="944834478" fg:w="21063189"/><text x="94.7335%" y="319.50">c..</text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="96.4895%" y="293" width="0.1003%" height="15" fill="rgb(236,28,36)" fg:x="964894658" fg:w="1003009"/><text x="96.7395%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="96.4895%" y="277" width="0.1003%" height="15" fill="rgb(249,185,26)" fg:x="964894658" fg:w="1003009"/><text x="96.7395%" y="287.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.10%)</title><rect x="96.4895%" y="261" width="0.1003%" height="15" fill="rgb(249,174,33)" fg:x="964894658" fg:w="1003009"/><text x="96.7395%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="96.5898%" y="261" width="0.1003%" height="15" fill="rgb(233,201,37)" fg:x="965897667" fg:w="1003009"/><text x="96.8398%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_unchecked (2,006,018 samples, 0.20%)</title><rect x="96.5898%" y="293" width="0.2006%" height="15" fill="rgb(221,78,26)" fg:x="965897667" fg:w="2006018"/><text x="96.8398%" y="303.50"></text></g><g><title>core::ptr::swap (2,006,018 samples, 0.20%)</title><rect x="96.5898%" y="277" width="0.2006%" height="15" fill="rgb(250,127,30)" fg:x="965897667" fg:w="2006018"/><text x="96.8398%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="96.6901%" y="261" width="0.1003%" height="15" fill="rgb(230,49,44)" fg:x="966900676" fg:w="1003009"/><text x="96.9401%" y="271.50"></text></g><g><title>core::intrinsics::copy (10,030,090 samples, 1.00%)</title><rect x="96.8907%" y="261" width="1.0030%" height="15" fill="rgb(229,67,23)" fg:x="968906694" fg:w="10030090"/><text x="97.1407%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="97.8937%" y="261" width="0.1003%" height="15" fill="rgb(249,83,47)" fg:x="978936784" fg:w="1003009"/><text x="98.1437%" y="271.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (20,060,180 samples, 2.01%)</title><rect x="96.5898%" y="309" width="2.0060%" height="15" fill="rgb(215,43,3)" fg:x="965897667" fg:w="20060180"/><text x="96.8398%" y="319.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (18,054,162 samples, 1.81%)</title><rect x="96.7904%" y="293" width="1.8054%" height="15" fill="rgb(238,154,13)" fg:x="967903685" fg:w="18054162"/><text x="97.0404%" y="303.50">c..</text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (18,054,162 samples, 1.81%)</title><rect x="96.7904%" y="277" width="1.8054%" height="15" fill="rgb(219,56,2)" fg:x="967903685" fg:w="18054162"/><text x="97.0404%" y="287.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (6,018,054 samples, 0.60%)</title><rect x="97.9940%" y="261" width="0.6018%" height="15" fill="rgb(233,0,4)" fg:x="979939793" fg:w="6018054"/><text x="98.2440%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (6,018,054 samples, 0.60%)</title><rect x="97.9940%" y="245" width="0.6018%" height="15" fill="rgb(235,30,7)" fg:x="979939793" fg:w="6018054"/><text x="98.2440%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (1,003,009 samples, 0.10%)</title><rect x="98.6961%" y="261" width="0.1003%" height="15" fill="rgb(250,79,13)" fg:x="986960856" fg:w="1003009"/><text x="98.9461%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="98.6961%" y="245" width="0.1003%" height="15" fill="rgb(211,146,34)" fg:x="986960856" fg:w="1003009"/><text x="98.9461%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="98.6961%" y="229" width="0.1003%" height="15" fill="rgb(228,22,38)" fg:x="986960856" fg:w="1003009"/><text x="98.9461%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (2,006,018 samples, 0.20%)</title><rect x="98.6961%" y="277" width="0.2006%" height="15" fill="rgb(235,168,5)" fg:x="986960856" fg:w="2006018"/><text x="98.9461%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_up (1,003,009 samples, 0.10%)</title><rect x="98.7964%" y="261" width="0.1003%" height="15" fill="rgb(221,155,16)" fg:x="987963865" fg:w="1003009"/><text x="99.0464%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="98.7964%" y="245" width="0.1003%" height="15" fill="rgb(215,215,53)" fg:x="987963865" fg:w="1003009"/><text x="99.0464%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="98.7964%" y="229" width="0.1003%" height="15" fill="rgb(223,4,10)" fg:x="987963865" fg:w="1003009"/><text x="99.0464%" y="239.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (1,003,009 samples, 0.10%)</title><rect x="98.8967%" y="277" width="0.1003%" height="15" fill="rgb(234,103,6)" fg:x="988966874" fg:w="1003009"/><text x="99.1467%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (1,003,009 samples, 0.10%)</title><rect x="98.8967%" y="261" width="0.1003%" height="15" fill="rgb(227,97,0)" fg:x="988966874" fg:w="1003009"/><text x="99.1467%" y="271.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort13_optimal (1,003,009 samples, 0.10%)</title><rect x="98.9970%" y="277" width="0.1003%" height="15" fill="rgb(234,150,53)" fg:x="989969883" fg:w="1003009"/><text x="99.2470%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="98.9970%" y="261" width="0.1003%" height="15" fill="rgb(228,201,54)" fg:x="989969883" fg:w="1003009"/><text x="99.2470%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="98.9970%" y="245" width="0.1003%" height="15" fill="rgb(222,22,37)" fg:x="989969883" fg:w="1003009"/><text x="99.2470%" y="255.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_network (6,018,054 samples, 0.60%)</title><rect x="98.5958%" y="293" width="0.6018%" height="15" fill="rgb(237,53,32)" fg:x="985957847" fg:w="6018054"/><text x="98.8458%" y="303.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort9_optimal (1,003,009 samples, 0.10%)</title><rect x="99.0973%" y="277" width="0.1003%" height="15" fill="rgb(233,25,53)" fg:x="990972892" fg:w="1003009"/><text x="99.3473%" y="287.50"></text></g><g><title>core::slice::sort::shared::smallsort::swap_if_less (1,003,009 samples, 0.10%)</title><rect x="99.0973%" y="261" width="0.1003%" height="15" fill="rgb(210,40,34)" fg:x="990972892" fg:w="1003009"/><text x="99.3473%" y="271.50"></text></g><g><title>core::intrinsics::copy (1,003,009 samples, 0.10%)</title><rect x="99.0973%" y="245" width="0.1003%" height="15" fill="rgb(241,220,44)" fg:x="990972892" fg:w="1003009"/><text x="99.3473%" y="255.50"></text></g><g><title>core::intrinsics::copy (2,006,018 samples, 0.20%)</title><rect x="99.2979%" y="245" width="0.2006%" height="15" fill="rgb(235,28,35)" fg:x="992978910" fg:w="2006018"/><text x="99.5479%" y="255.50"></text></g><g><title>aoc_2024_megaproject::Day::run_part (995,987,937 samples, 99.60%)</title><rect x="0.0000%" y="629" width="99.5988%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="639.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part2 (995,987,937 samples, 99.60%)</title><rect x="0.0000%" y="613" width="99.5988%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="623.50">&lt;aoc_2024_megaproject::problems::day1::Day1 as aoc_2024_megaproject::Day&gt;::part2</text></g><g><title>aoc_2024_megaproject::problems::day1::part2 (995,987,937 samples, 99.60%)</title><rect x="0.0000%" y="597" width="99.5988%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="995987937"/><text x="0.2500%" y="607.50">aoc_2024_megaproject::problems::day1::part2</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="581" width="21.1635%" height="15" fill="rgb(223,33,50)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="591.50">core::array::_&lt;impl [T: N]&gt;::map</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="565" width="21.1635%" height="15" fill="rgb(219,149,13)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="575.50">core::array::_&lt;impl [T: N]&gt;::try_..</text></g><g><title>core::array::drain::drain_array_with (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="549" width="21.1635%" height="15" fill="rgb(250,156,29)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="559.50">core::array::drain::drain_array_w..</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="533" width="21.1635%" height="15" fill="rgb(216,193,19)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="543.50">core::array::_&lt;impl [T: N]&gt;::try_..</text></g><g><title>core::array::try_from_trusted_iterator (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="517" width="21.1635%" height="15" fill="rgb(216,135,14)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="527.50">core::array::try_from_trusted_ite..</text></g><g><title>core::array::try_from_fn (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="501" width="21.1635%" height="15" fill="rgb(241,47,5)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="511.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="485" width="21.1635%" height="15" fill="rgb(233,42,35)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="495.50">core::array::try_from_fn_erased</text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="469" width="21.1635%" height="15" fill="rgb(231,13,6)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="479.50">core::array::try_from_trusted_ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="453" width="21.1635%" height="15" fill="rgb(207,181,40)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="463.50">&lt;core::iter::adapters::map::Map&lt;I..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="437" width="21.1635%" height="15" fill="rgb(254,173,49)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="447.50">core::ops::try_trait::NeverShortC..</text></g><g><title>aoc_2024_megaproject::problems::day1::part2::_{{closure}} (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="421" width="21.1635%" height="15" fill="rgb(221,1,38)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="431.50">aoc_2024_megaproject::problems::d..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="405" width="21.1635%" height="15" fill="rgb(206,124,46)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="415.50">core::slice::&lt;impl [T]&gt;::sort_uns..</text></g><g><title>core::slice::sort::unstable::sort (211,634,899 samples, 21.16%)</title><rect x="78.4353%" y="389" width="21.1635%" height="15" fill="rgb(249,21,11)" fg:x="784353038" fg:w="211634899"/><text x="78.6853%" y="399.50">core::slice::sort::unstable::sort</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (208,625,872 samples, 20.86%)</title><rect x="78.7362%" y="373" width="20.8626%" height="15" fill="rgb(222,201,40)" fg:x="787362065" fg:w="208625872"/><text x="78.9862%" y="383.50">core::slice::sort::unstable::quic..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (154,463,386 samples, 15.45%)</title><rect x="84.1525%" y="357" width="15.4463%" height="15" fill="rgb(235,61,29)" fg:x="841524551" fg:w="154463386"/><text x="84.4025%" y="367.50">core::slice::sort::unsta..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (101,303,909 samples, 10.13%)</title><rect x="89.4684%" y="341" width="10.1304%" height="15" fill="rgb(219,207,3)" fg:x="894684028" fg:w="101303909"/><text x="89.7184%" y="351.50">core::slice::so..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (52,156,468 samples, 5.22%)</title><rect x="94.3831%" y="325" width="5.2156%" height="15" fill="rgb(222,56,46)" fg:x="943831469" fg:w="52156468"/><text x="94.6331%" y="335.50">core::..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (10,030,090 samples, 1.00%)</title><rect x="98.5958%" y="309" width="1.0030%" height="15" fill="rgb(239,76,54)" fg:x="985957847" fg:w="10030090"/><text x="98.8458%" y="319.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (4,012,036 samples, 0.40%)</title><rect x="99.1976%" y="293" width="0.4012%" height="15" fill="rgb(231,124,27)" fg:x="991975901" fg:w="4012036"/><text x="99.4476%" y="303.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (4,012,036 samples, 0.40%)</title><rect x="99.1976%" y="277" width="0.4012%" height="15" fill="rgb(249,195,6)" fg:x="991975901" fg:w="4012036"/><text x="99.4476%" y="287.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="99.2979%" y="261" width="0.3009%" height="15" fill="rgb(237,174,47)" fg:x="992978910" fg:w="3009027"/><text x="99.5479%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="245" width="0.1003%" height="15" fill="rgb(206,201,31)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (1,003,009 samples, 0.10%)</title><rect x="99.4985%" y="229" width="0.1003%" height="15" fill="rgb(231,57,52)" fg:x="994984928" fg:w="1003009"/><text x="99.7485%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="629" width="0.1003%" height="15" fill="rgb(248,177,22)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="613" width="0.1003%" height="15" fill="rgb(215,211,37)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="623.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="597" width="0.1003%" height="15" fill="rgb(241,128,51)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="581" width="0.1003%" height="15" fill="rgb(227,165,31)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="591.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="565" width="0.1003%" height="15" fill="rgb(228,167,24)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="549" width="0.1003%" height="15" fill="rgb(228,143,12)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="559.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="533" width="0.1003%" height="15" fill="rgb(249,149,8)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="543.50"></text></g><g><title>alloc::string::String::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="517" width="0.1003%" height="15" fill="rgb(243,35,44)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="501" width="0.1003%" height="15" fill="rgb(246,89,9)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (1,003,009 samples, 0.10%)</title><rect x="99.5988%" y="485" width="0.1003%" height="15" fill="rgb(233,213,13)" fg:x="995987937" fg:w="1003009"/><text x="99.8488%" y="495.50"></text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="629" width="0.1003%" height="15" fill="rgb(233,141,41)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="639.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="613" width="0.1003%" height="15" fill="rgb(239,167,4)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="623.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="597" width="0.1003%" height="15" fill="rgb(209,217,16)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="607.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="581" width="0.1003%" height="15" fill="rgb(219,88,35)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="591.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="565" width="0.1003%" height="15" fill="rgb(220,193,23)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="549" width="0.1003%" height="15" fill="rgb(230,90,52)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="559.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="533" width="0.1003%" height="15" fill="rgb(252,106,19)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="543.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="517" width="0.1003%" height="15" fill="rgb(206,74,20)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="501" width="0.1003%" height="15" fill="rgb(230,138,44)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="485" width="0.1003%" height="15" fill="rgb(235,182,43)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="469" width="0.1003%" height="15" fill="rgb(242,16,51)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="453" width="0.1003%" height="15" fill="rgb(248,9,4)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="437" width="0.1003%" height="15" fill="rgb(210,31,22)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="421" width="0.1003%" height="15" fill="rgb(239,54,39)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="405" width="0.1003%" height="15" fill="rgb(230,99,41)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="389" width="0.1003%" height="15" fill="rgb(253,106,12)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="373" width="0.1003%" height="15" fill="rgb(213,46,41)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="357" width="0.1003%" height="15" fill="rgb(215,133,35)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="341" width="0.1003%" height="15" fill="rgb(213,28,5)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="325" width="0.1003%" height="15" fill="rgb(215,77,49)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="309" width="0.1003%" height="15" fill="rgb(248,100,22)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="293" width="0.1003%" height="15" fill="rgb(208,67,9)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="277" width="0.1003%" height="15" fill="rgb(219,133,21)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="261" width="0.1003%" height="15" fill="rgb(246,46,29)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="245" width="0.1003%" height="15" fill="rgb(246,185,52)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="229" width="0.1003%" height="15" fill="rgb(252,136,11)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="213" width="0.1003%" height="15" fill="rgb(219,138,53)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="197" width="0.1003%" height="15" fill="rgb(211,51,23)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="181" width="0.1003%" height="15" fill="rgb(247,221,28)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="191.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="165" width="0.1003%" height="15" fill="rgb(251,222,45)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="175.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="149" width="0.1003%" height="15" fill="rgb(217,162,53)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="133" width="0.1003%" height="15" fill="rgb(229,93,14)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="143.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="117" width="0.1003%" height="15" fill="rgb(209,67,49)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="101" width="0.1003%" height="15" fill="rgb(213,87,29)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="85" width="0.1003%" height="15" fill="rgb(205,151,52)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="69" width="0.1003%" height="15" fill="rgb(253,215,39)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="53" width="0.1003%" height="15" fill="rgb(221,220,41)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.6991%" y="37" width="0.1003%" height="15" fill="rgb(218,133,21)" fg:x="996990946" fg:w="1003009"/><text x="99.9491%" y="47.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="581" width="0.1003%" height="15" fill="rgb(221,193,43)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="565" width="0.1003%" height="15" fill="rgb(240,128,52)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="549" width="0.1003%" height="15" fill="rgb(253,114,12)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="533" width="0.1003%" height="15" fill="rgb(215,223,47)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="517" width="0.1003%" height="15" fill="rgb(248,225,23)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="527.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 0.10%)</title><rect x="99.7994%" y="501" width="0.1003%" height="15" fill="rgb(250,108,0)" fg:x="997993955" fg:w="1003009"/><text x="100.0494%" y="511.50"></text></g><g><title>all (999,999,973 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="959.50"></text></g><g><title>aoc-2024-megapr (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="943.50">aoc-2024-megapr</text></g><g><title>_start (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="927.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="911.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="895.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="879.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="799.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="751.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="735.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="719.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="703.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="687.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="671.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="655.50">aoc_2024_megaproject::repeat_part</text></g><g><title>std::env::args (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="629" width="0.2006%" height="15" fill="rgb(211,33,43)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="639.50"></text></g><g><title>std::env::args_os (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="613" width="0.2006%" height="15" fill="rgb(245,58,50)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="623.50"></text></g><g><title>std::sys::args::unix::args (2,006,018 samples, 0.20%)</title><rect x="99.7994%" y="597" width="0.2006%" height="15" fill="rgb(244,68,36)" fg:x="997993955" fg:w="2006018"/><text x="100.0494%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="581" width="0.1003%" height="15" fill="rgb(232,229,15)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="565" width="0.1003%" height="15" fill="rgb(254,30,23)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="549" width="0.1003%" height="15" fill="rgb(235,160,14)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="533" width="0.1003%" height="15" fill="rgb(212,155,44)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="517" width="0.1003%" height="15" fill="rgb(226,2,50)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="501" width="0.1003%" height="15" fill="rgb(234,177,6)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="485" width="0.1003%" height="15" fill="rgb(217,24,9)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="469" width="0.1003%" height="15" fill="rgb(220,13,46)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="479.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.8997%" y="453" width="0.1003%" height="15" fill="rgb(239,221,27)" fg:x="998996964" fg:w="1003009"/><text x="100.1497%" y="463.50"></text></g></svg></svg>