<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1001002982"><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16,048,144 samples, 1.60%)</title><rect x="0.1002%" y="549" width="1.6032%" height="15" fill="rgb(227,0,7)" fg:x="1003009" fg:w="16048144"/><text x="0.3502%" y="559.50"></text></g><g><title>&lt;ascii::ascii_str::CharsRef as core::iter::traits::iterator::Iterator&gt;::next (20,060,180 samples, 2.00%)</title><rect x="0.0000%" y="581" width="2.0040%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="20060180"/><text x="0.2500%" y="591.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20,060,180 samples, 2.00%)</title><rect x="0.0000%" y="565" width="2.0040%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="20060180"/><text x="0.2500%" y="575.50">&lt;..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3,009,027 samples, 0.30%)</title><rect x="1.7034%" y="549" width="0.3006%" height="15" fill="rgb(248,212,6)" fg:x="17051153" fg:w="3009027"/><text x="1.9534%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (28,084,252 samples, 2.81%)</title><rect x="0.0000%" y="629" width="2.8056%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="28084252"/><text x="0.2500%" y="639.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::find (28,084,252 samples, 2.81%)</title><rect x="0.0000%" y="613" width="2.8056%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="28084252"/><text x="0.2500%" y="623.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (28,084,252 samples, 2.81%)</title><rect x="0.0000%" y="597" width="2.8056%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="28084252"/><text x="0.2500%" y="607.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (8,024,072 samples, 0.80%)</title><rect x="2.0040%" y="581" width="0.8016%" height="15" fill="rgb(228,23,34)" fg:x="20060180" fg:w="8024072"/><text x="2.2540%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8,024,072 samples, 0.80%)</title><rect x="2.0040%" y="565" width="0.8016%" height="15" fill="rgb(218,30,26)" fg:x="20060180" fg:w="8024072"/><text x="2.2540%" y="575.50"></text></g><g><title>aoc_2024_megaproject::problems::day8::Part::calculate::_{{closure}} (8,024,072 samples, 0.80%)</title><rect x="2.0040%" y="549" width="0.8016%" height="15" fill="rgb(220,122,19)" fg:x="20060180" fg:w="8024072"/><text x="2.2540%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (8,024,072 samples, 0.80%)</title><rect x="2.0040%" y="533" width="0.8016%" height="15" fill="rgb(250,228,42)" fg:x="20060180" fg:w="8024072"/><text x="2.2540%" y="543.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (8,024,072 samples, 0.80%)</title><rect x="2.0040%" y="517" width="0.8016%" height="15" fill="rgb(240,193,28)" fg:x="20060180" fg:w="8024072"/><text x="2.2540%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (8,024,072 samples, 0.80%)</title><rect x="2.0040%" y="501" width="0.8016%" height="15" fill="rgb(216,20,37)" fg:x="20060180" fg:w="8024072"/><text x="2.2540%" y="511.50"></text></g><g><title>&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (11,033,099 samples, 1.10%)</title><rect x="2.8056%" y="629" width="1.1022%" height="15" fill="rgb(206,188,39)" fg:x="28084252" fg:w="11033099"/><text x="3.0556%" y="639.50"></text></g><g><title>&lt;tinyvec::arrayvec::ArrayVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (2,006,018 samples, 0.20%)</title><rect x="3.7074%" y="613" width="0.2004%" height="15" fill="rgb(217,207,13)" fg:x="37111333" fg:w="2006018"/><text x="3.9574%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.10%)</title><rect x="3.8076%" y="597" width="0.1002%" height="15" fill="rgb(231,73,38)" fg:x="38114342" fg:w="1003009"/><text x="4.0576%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="3.8076%" y="581" width="0.1002%" height="15" fill="rgb(225,20,46)" fg:x="38114342" fg:w="1003009"/><text x="4.0576%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.10%)</title><rect x="3.8076%" y="565" width="0.1002%" height="15" fill="rgb(210,31,41)" fg:x="38114342" fg:w="1003009"/><text x="4.0576%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (18,054,162 samples, 1.80%)</title><rect x="4.0080%" y="613" width="1.8036%" height="15" fill="rgb(221,200,47)" fg:x="40120360" fg:w="18054162"/><text x="4.2580%" y="623.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18,054,162 samples, 1.80%)</title><rect x="4.0080%" y="597" width="1.8036%" height="15" fill="rgb(226,26,5)" fg:x="40120360" fg:w="18054162"/><text x="4.2580%" y="607.50">c..</text></g><g><title>&lt;ascii::ascii_str::Chars as core::iter::traits::iterator::Iterator&gt;::next (17,051,153 samples, 1.70%)</title><rect x="4.1082%" y="581" width="1.7034%" height="15" fill="rgb(249,33,26)" fg:x="41123369" fg:w="17051153"/><text x="4.3582%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17,051,153 samples, 1.70%)</title><rect x="4.1082%" y="565" width="1.7034%" height="15" fill="rgb(235,183,28)" fg:x="41123369" fg:w="17051153"/><text x="4.3582%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12,036,108 samples, 1.20%)</title><rect x="4.6092%" y="549" width="1.2024%" height="15" fill="rgb(221,5,38)" fg:x="46138414" fg:w="12036108"/><text x="4.8592%" y="559.50"></text></g><g><title>&lt;ascii::ascii_str::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="6.4128%" y="533" width="0.3006%" height="15" fill="rgb(247,18,42)" fg:x="64192576" fg:w="3009027"/><text x="6.6628%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.30%)</title><rect x="6.4128%" y="517" width="0.3006%" height="15" fill="rgb(241,131,45)" fg:x="64192576" fg:w="3009027"/><text x="6.6628%" y="527.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;&amp;ascii::ascii_str::AsciiStr&gt;::new (45,135,405 samples, 4.51%)</title><rect x="3.9078%" y="629" width="4.5090%" height="15" fill="rgb(249,31,29)" fg:x="39117351" fg:w="45135405"/><text x="4.1578%" y="639.50">aoc_2..</text></g><g><title>core::iter::traits::iterator::Iterator::count (26,078,234 samples, 2.61%)</title><rect x="5.8116%" y="613" width="2.6052%" height="15" fill="rgb(225,111,53)" fg:x="58174522" fg:w="26078234"/><text x="6.0616%" y="623.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (26,078,234 samples, 2.61%)</title><rect x="5.8116%" y="597" width="2.6052%" height="15" fill="rgb(238,160,17)" fg:x="58174522" fg:w="26078234"/><text x="6.0616%" y="607.50">co..</text></g><g><title>&lt;ascii::ascii_str::Lines as core::iter::traits::iterator::Iterator&gt;::next (24,072,216 samples, 2.40%)</title><rect x="6.0120%" y="581" width="2.4048%" height="15" fill="rgb(214,148,48)" fg:x="60180540" fg:w="24072216"/><text x="6.2620%" y="591.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::position (22,066,198 samples, 2.20%)</title><rect x="6.2124%" y="565" width="2.2044%" height="15" fill="rgb(232,36,49)" fg:x="62186558" fg:w="22066198"/><text x="6.4624%" y="575.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (22,066,198 samples, 2.20%)</title><rect x="6.2124%" y="549" width="2.2044%" height="15" fill="rgb(209,103,24)" fg:x="62186558" fg:w="22066198"/><text x="6.4624%" y="559.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::position::check::_{{closure}} (17,051,153 samples, 1.70%)</title><rect x="6.7134%" y="533" width="1.7034%" height="15" fill="rgb(229,88,8)" fg:x="67201603" fg:w="17051153"/><text x="6.9634%" y="543.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::VecGrid&lt;T&gt;::new (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="629" width="0.2004%" height="15" fill="rgb(213,181,19)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="613" width="0.2004%" height="15" fill="rgb(254,191,54)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="597" width="0.2004%" height="15" fill="rgb(241,83,37)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="581" width="0.2004%" height="15" fill="rgb(233,36,39)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="565" width="0.2004%" height="15" fill="rgb(226,3,54)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="549" width="0.2004%" height="15" fill="rgb(245,192,40)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="533" width="0.2004%" height="15" fill="rgb(238,167,29)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="517" width="0.2004%" height="15" fill="rgb(232,182,51)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="501" width="0.2004%" height="15" fill="rgb(231,60,39)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="485" width="0.2004%" height="15" fill="rgb(208,69,12)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="495.50"></text></g><g><title>core::ptr::write (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="469" width="0.2004%" height="15" fill="rgb(235,93,37)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="479.50"></text></g><g><title>[libc.so.6] (2,006,018 samples, 0.20%)</title><rect x="8.4168%" y="453" width="0.2004%" height="15" fill="rgb(213,116,39)" fg:x="84252756" fg:w="2006018"/><text x="8.6668%" y="463.50"></text></g><g><title>&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::default::Default&gt;::default (10,030,090 samples, 1.00%)</title><rect x="8.8176%" y="485" width="1.0020%" height="15" fill="rgb(222,207,29)" fg:x="88264792" fg:w="10030090"/><text x="9.0676%" y="495.50"></text></g><g><title>[libc.so.6] (10,030,090 samples, 1.00%)</title><rect x="8.8176%" y="469" width="1.0020%" height="15" fill="rgb(206,96,30)" fg:x="88264792" fg:w="10030090"/><text x="9.0676%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1,003,009 samples, 0.10%)</title><rect x="10.0200%" y="469" width="0.1002%" height="15" fill="rgb(218,138,4)" fg:x="100300900" fg:w="1003009"/><text x="10.2700%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1,003,009 samples, 0.10%)</title><rect x="10.0200%" y="453" width="0.1002%" height="15" fill="rgb(250,191,14)" fg:x="100300900" fg:w="1003009"/><text x="10.2700%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1,003,009 samples, 0.10%)</title><rect x="10.0200%" y="437" width="0.1002%" height="15" fill="rgb(239,60,40)" fg:x="100300900" fg:w="1003009"/><text x="10.2700%" y="447.50"></text></g><g><title>&lt;ascii::ascii_str::Chars as core::iter::traits::iterator::Iterator&gt;::size_hint (1,003,009 samples, 0.10%)</title><rect x="10.0200%" y="421" width="0.1002%" height="15" fill="rgb(206,27,48)" fg:x="100300900" fg:w="1003009"/><text x="10.2700%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1,003,009 samples, 0.10%)</title><rect x="10.0200%" y="405" width="0.1002%" height="15" fill="rgb(225,35,8)" fg:x="100300900" fg:w="1003009"/><text x="10.2700%" y="415.50"></text></g><g><title>&lt;ascii::ascii_str::CharsRef as core::iter::traits::iterator::Iterator&gt;::next (44,132,396 samples, 4.41%)</title><rect x="75.5511%" y="341" width="4.4088%" height="15" fill="rgb(250,213,24)" fg:x="756268786" fg:w="44132396"/><text x="75.8011%" y="351.50">&lt;asci..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (44,132,396 samples, 4.41%)</title><rect x="75.5511%" y="325" width="4.4088%" height="15" fill="rgb(247,123,22)" fg:x="756268786" fg:w="44132396"/><text x="75.8011%" y="335.50">&lt;core..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (41,123,369 samples, 4.11%)</title><rect x="75.8517%" y="309" width="4.1082%" height="15" fill="rgb(231,138,38)" fg:x="759277813" fg:w="41123369"/><text x="76.1017%" y="319.50">core..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (698,094,264 samples, 69.74%)</title><rect x="10.5210%" y="405" width="69.7395%" height="15" fill="rgb(231,145,46)" fg:x="105315945" fg:w="698094264"/><text x="10.7710%" y="415.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find (698,094,264 samples, 69.74%)</title><rect x="10.5210%" y="389" width="69.7395%" height="15" fill="rgb(251,118,11)" fg:x="105315945" fg:w="698094264"/><text x="10.7710%" y="399.50">core::iter::traits::iterator::Iterator::find</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (698,094,264 samples, 69.74%)</title><rect x="10.5210%" y="373" width="69.7395%" height="15" fill="rgb(217,147,25)" fg:x="105315945" fg:w="698094264"/><text x="10.7710%" y="383.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (698,094,264 samples, 69.74%)</title><rect x="10.5210%" y="357" width="69.7395%" height="15" fill="rgb(247,81,37)" fg:x="105315945" fg:w="698094264"/><text x="10.7710%" y="367.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="79.9599%" y="341" width="0.3006%" height="15" fill="rgb(209,12,38)" fg:x="800401182" fg:w="3009027"/><text x="80.2099%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="79.9599%" y="325" width="0.3006%" height="15" fill="rgb(227,1,9)" fg:x="800401182" fg:w="3009027"/><text x="80.2099%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,009,027 samples, 0.30%)</title><rect x="79.9599%" y="309" width="0.3006%" height="15" fill="rgb(248,47,43)" fg:x="800401182" fg:w="3009027"/><text x="80.2099%" y="319.50"></text></g><g><title>aoc_2024_megaproject::problems::day8::Part::add_antinodes_for_frequency::_{{closure}} (3,009,027 samples, 0.30%)</title><rect x="79.9599%" y="293" width="0.3006%" height="15" fill="rgb(221,10,30)" fg:x="800401182" fg:w="3009027"/><text x="80.2099%" y="303.50"></text></g><g><title>&lt;ascii::ascii_char::AsciiChar as core::cmp::PartialEq&gt;::eq (3,009,027 samples, 0.30%)</title><rect x="79.9599%" y="277" width="0.3006%" height="15" fill="rgb(210,229,1)" fg:x="800401182" fg:w="3009027"/><text x="80.2099%" y="287.50"></text></g><g><title>&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as tinyvec::array::Array&gt;::Item&gt;&gt;::extend (732,196,570 samples, 73.15%)</title><rect x="9.8196%" y="485" width="73.1463%" height="15" fill="rgb(222,148,37)" fg:x="98294882" fg:w="732196570"/><text x="10.0696%" y="495.50">&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as tinyvec::array::Array&gt;::Item&gt;&gt;::extend</text></g><g><title>tinyvec::arrayvec::ArrayVec&lt;A&gt;::fill (729,187,543 samples, 72.85%)</title><rect x="10.1202%" y="469" width="72.8457%" height="15" fill="rgb(234,67,33)" fg:x="101303909" fg:w="729187543"/><text x="10.3702%" y="479.50">tinyvec::arrayvec::ArrayVec&lt;A&gt;::fill</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (725,175,507 samples, 72.44%)</title><rect x="10.5210%" y="453" width="72.4449%" height="15" fill="rgb(247,98,35)" fg:x="105315945" fg:w="725175507"/><text x="10.7710%" y="463.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (725,175,507 samples, 72.44%)</title><rect x="10.5210%" y="437" width="72.4449%" height="15" fill="rgb(247,138,52)" fg:x="105315945" fg:w="725175507"/><text x="10.7710%" y="447.50">&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (725,175,507 samples, 72.44%)</title><rect x="10.5210%" y="421" width="72.4449%" height="15" fill="rgb(213,79,30)" fg:x="105315945" fg:w="725175507"/><text x="10.7710%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (27,081,243 samples, 2.71%)</title><rect x="80.2605%" y="405" width="2.7054%" height="15" fill="rgb(246,177,23)" fg:x="803410209" fg:w="27081243"/><text x="80.5105%" y="415.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (27,081,243 samples, 2.71%)</title><rect x="80.2605%" y="389" width="2.7054%" height="15" fill="rgb(230,62,27)" fg:x="803410209" fg:w="27081243"/><text x="80.5105%" y="399.50">co..</text></g><g><title>aoc_2024_megaproject::problems::day8::Part::add_antinodes_for_frequency::_{{closure}} (27,081,243 samples, 2.71%)</title><rect x="80.2605%" y="373" width="2.7054%" height="15" fill="rgb(216,154,8)" fg:x="803410209" fg:w="27081243"/><text x="80.5105%" y="383.50">ao..</text></g><g><title>aoc_2024_megaproject::problems::commons::CharGrid&lt;T&gt;::vec_index_to_uquard (27,081,243 samples, 2.71%)</title><rect x="80.2605%" y="357" width="2.7054%" height="15" fill="rgb(244,35,45)" fg:x="803410209" fg:w="27081243"/><text x="80.5105%" y="367.50">ao..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (772,316,930 samples, 77.15%)</title><rect x="8.8176%" y="517" width="77.1543%" height="15" fill="rgb(251,115,12)" fg:x="88264792" fg:w="772316930"/><text x="9.0676%" y="527.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as tinyvec::array::Array&gt;::Item&gt;&gt;::from_iter (772,316,930 samples, 77.15%)</title><rect x="8.8176%" y="501" width="77.1543%" height="15" fill="rgb(240,54,50)" fg:x="88264792" fg:w="772316930"/><text x="9.0676%" y="511.50">&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as tinyvec::array::Array&gt;::Item&gt;&gt;::from_iter</text></g><g><title>[libc.so.6] (30,090,270 samples, 3.01%)</title><rect x="82.9659%" y="485" width="3.0060%" height="15" fill="rgb(233,84,52)" fg:x="830491452" fg:w="30090270"/><text x="83.2159%" y="495.50">[li..</text></g><g><title>&lt;tinyvec::tinyvec::TinyVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (5,015,045 samples, 0.50%)</title><rect x="86.0721%" y="389" width="0.5010%" height="15" fill="rgb(207,117,47)" fg:x="861584731" fg:w="5015045"/><text x="86.3221%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5,015,045 samples, 0.50%)</title><rect x="90.3808%" y="213" width="0.5010%" height="15" fill="rgb(249,43,39)" fg:x="904714118" fg:w="5015045"/><text x="90.6308%" y="223.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::&lt;impl core::convert::From&lt;aoc_2024_megaproject::problems::commons::Icoord&gt; for core::option::Option&lt;aoc_2024_megaproject::problems::commons::Ucoord&gt;&gt;::from (5,015,045 samples, 0.50%)</title><rect x="90.3808%" y="197" width="0.5010%" height="15" fill="rgb(209,38,44)" fg:x="904714118" fg:w="5015045"/><text x="90.6308%" y="207.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Icoord as core::ops::arith::Add&gt;::add (1,003,009 samples, 0.10%)</title><rect x="90.8818%" y="213" width="0.1002%" height="15" fill="rgb(236,212,23)" fg:x="909729163" fg:w="1003009"/><text x="91.1318%" y="223.50"></text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Icoord as core::ops::arith::Div&lt;i32&gt;&gt;::div (20,060,180 samples, 2.00%)</title><rect x="90.9820%" y="213" width="2.0040%" height="15" fill="rgb(242,79,21)" fg:x="910732172" fg:w="20060180"/><text x="91.2320%" y="223.50">&lt;..</text></g><g><title>&lt;aoc_2024_megaproject::problems::commons::Icoord as core::ops::arith::Sub&gt;::sub (1,003,009 samples, 0.10%)</title><rect x="92.9860%" y="213" width="0.1002%" height="15" fill="rgb(211,96,35)" fg:x="930792352" fg:w="1003009"/><text x="93.2360%" y="223.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::VecGrid&lt;T&gt;::index_usize (10,030,090 samples, 1.00%)</title><rect x="93.0862%" y="197" width="1.0020%" height="15" fill="rgb(253,215,40)" fg:x="931795361" fg:w="10030090"/><text x="93.3362%" y="207.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::VecGrid&lt;T&gt;::index_mut (19,057,171 samples, 1.90%)</title><rect x="93.0862%" y="213" width="1.9038%" height="15" fill="rgb(211,81,21)" fg:x="931795361" fg:w="19057171"/><text x="93.3362%" y="223.50">a..</text></g><g><title>core::option::Option&lt;T&gt;::map (9,027,081 samples, 0.90%)</title><rect x="94.0882%" y="197" width="0.9018%" height="15" fill="rgb(208,190,38)" fg:x="941825451" fg:w="9027081"/><text x="94.3382%" y="207.50"></text></g><g><title>aoc_2024_megaproject::problems::commons::VecGrid&lt;T&gt;::index_mut::_{{closure}} (9,027,081 samples, 0.90%)</title><rect x="94.0882%" y="181" width="0.9018%" height="15" fill="rgb(235,213,38)" fg:x="941825451" fg:w="9027081"/><text x="94.3382%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (9,027,081 samples, 0.90%)</title><rect x="94.0882%" y="165" width="0.9018%" height="15" fill="rgb(237,122,38)" fg:x="941825451" fg:w="9027081"/><text x="94.3382%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9,027,081 samples, 0.90%)</title><rect x="94.0882%" y="149" width="0.9018%" height="15" fill="rgb(244,218,35)" fg:x="941825451" fg:w="9027081"/><text x="94.3382%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9,027,081 samples, 0.90%)</title><rect x="94.0882%" y="133" width="0.9018%" height="15" fill="rgb(240,68,47)" fg:x="941825451" fg:w="9027081"/><text x="94.3382%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="181" width="0.1002%" height="15" fill="rgb(210,16,53)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="191.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="165" width="0.1002%" height="15" fill="rgb(235,124,12)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="175.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="149" width="0.1002%" height="15" fill="rgb(224,169,11)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="133" width="0.1002%" height="15" fill="rgb(250,166,2)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="96.7936%" y="117" width="0.1002%" height="15" fill="rgb(242,216,29)" fg:x="968906694" fg:w="1003009"/><text x="97.0436%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="629" width="88.3768%" height="15" fill="rgb(230,116,27)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="639.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="613" width="88.3768%" height="15" fill="rgb(228,99,48)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="623.50">&lt;usize as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="597" width="88.3768%" height="15" fill="rgb(253,11,6)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="607.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="581" width="88.3768%" height="15" fill="rgb(247,143,39)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="591.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="565" width="88.3768%" height="15" fill="rgb(236,97,10)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="575.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>aoc_2024_megaproject::problems::day8::Part::calculate::_{{closure}} (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="549" width="88.3768%" height="15" fill="rgb(233,208,19)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="559.50">aoc_2024_megaproject::problems::day8::Part::calculate::_{{closure}}</text></g><g><title>aoc_2024_megaproject::problems::day8::Part::add_antinodes_for_frequency (884,653,938 samples, 88.38%)</title><rect x="8.6172%" y="533" width="88.3768%" height="15" fill="rgb(216,164,2)" fg:x="86258774" fg:w="884653938"/><text x="8.8672%" y="543.50">aoc_2024_megaproject::problems::day8::Part::add_antinodes_for_frequency</text></g><g><title>core::iter::traits::iterator::Iterator::sum (110,330,990 samples, 11.02%)</title><rect x="85.9719%" y="517" width="11.0220%" height="15" fill="rgb(220,129,5)" fg:x="860581722" fg:w="110330990"/><text x="86.2219%" y="527.50">core::iter::trai..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (110,330,990 samples, 11.02%)</title><rect x="85.9719%" y="501" width="11.0220%" height="15" fill="rgb(242,17,10)" fg:x="860581722" fg:w="110330990"/><text x="86.2219%" y="511.50">&lt;usize as core::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110,330,990 samples, 11.02%)</title><rect x="85.9719%" y="485" width="11.0220%" height="15" fill="rgb(242,107,0)" fg:x="860581722" fg:w="110330990"/><text x="86.2219%" y="495.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110,330,990 samples, 11.02%)</title><rect x="85.9719%" y="469" width="11.0220%" height="15" fill="rgb(251,28,31)" fg:x="860581722" fg:w="110330990"/><text x="86.2219%" y="479.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110,330,990 samples, 11.02%)</title><rect x="85.9719%" y="453" width="11.0220%" height="15" fill="rgb(233,223,10)" fg:x="860581722" fg:w="110330990"/><text x="86.2219%" y="463.50">&lt;core::slice::it..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (110,330,990 samples, 11.02%)</title><rect x="85.9719%" y="437" width="11.0220%" height="15" fill="rgb(215,21,27)" fg:x="860581722" fg:w="110330990"/><text x="86.2219%" y="447.50">&lt;core::iter::ada..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (109,327,981 samples, 10.92%)</title><rect x="86.0721%" y="421" width="10.9218%" height="15" fill="rgb(232,23,21)" fg:x="861584731" fg:w="109327981"/><text x="86.3221%" y="431.50">core::iter::adap..</text></g><g><title>aoc_2024_megaproject::problems::day8::Part::add_antinodes_for_frequency::_{{closure}} (109,327,981 samples, 10.92%)</title><rect x="86.0721%" y="405" width="10.9218%" height="15" fill="rgb(244,5,23)" fg:x="861584731" fg:w="109327981"/><text x="86.3221%" y="415.50">aoc_2024_megapro..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (104,312,936 samples, 10.42%)</title><rect x="86.5731%" y="389" width="10.4208%" height="15" fill="rgb(226,81,46)" fg:x="866599776" fg:w="104312936"/><text x="86.8231%" y="399.50">core::iter::tra..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (104,312,936 samples, 10.42%)</title><rect x="86.5731%" y="373" width="10.4208%" height="15" fill="rgb(247,70,30)" fg:x="866599776" fg:w="104312936"/><text x="86.8231%" y="383.50">&lt;usize as core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104,312,936 samples, 10.42%)</title><rect x="86.5731%" y="357" width="10.4208%" height="15" fill="rgb(212,68,19)" fg:x="866599776" fg:w="104312936"/><text x="86.8231%" y="367.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104,312,936 samples, 10.42%)</title><rect x="86.5731%" y="341" width="10.4208%" height="15" fill="rgb(240,187,13)" fg:x="866599776" fg:w="104312936"/><text x="86.8231%" y="351.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104,312,936 samples, 10.42%)</title><rect x="86.5731%" y="325" width="10.4208%" height="15" fill="rgb(223,113,26)" fg:x="866599776" fg:w="104312936"/><text x="86.8231%" y="335.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104,312,936 samples, 10.42%)</title><rect x="86.5731%" y="309" width="10.4208%" height="15" fill="rgb(206,192,2)" fg:x="866599776" fg:w="104312936"/><text x="86.8231%" y="319.50">&lt;core::slice::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (101,303,909 samples, 10.12%)</title><rect x="86.8737%" y="293" width="10.1202%" height="15" fill="rgb(241,108,4)" fg:x="869608803" fg:w="101303909"/><text x="87.1237%" y="303.50">&lt;core::iter::ad..</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (101,303,909 samples, 10.12%)</title><rect x="86.8737%" y="277" width="10.1202%" height="15" fill="rgb(247,173,49)" fg:x="869608803" fg:w="101303909"/><text x="87.1237%" y="287.50">core::iter::ada..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (99,297,891 samples, 9.92%)</title><rect x="87.0741%" y="261" width="9.9198%" height="15" fill="rgb(224,114,35)" fg:x="871614821" fg:w="99297891"/><text x="87.3241%" y="271.50">core::iter::ad..</text></g><g><title>aoc_2024_megaproject::problems::day8::Part::add_antinodes_for_frequency::_{{closure}}::_{{closure}} (99,297,891 samples, 9.92%)</title><rect x="87.0741%" y="245" width="9.9198%" height="15" fill="rgb(245,159,27)" fg:x="871614821" fg:w="99297891"/><text x="87.3241%" y="255.50">aoc_2024_megap..</text></g><g><title>aoc_2024_megaproject::problems::day8::&lt;impl aoc_2024_megaproject::problems::commons::VecGrid&lt;bool&gt;&gt;::set_positions_on_line (96,288,864 samples, 9.62%)</title><rect x="87.3747%" y="229" width="9.6192%" height="15" fill="rgb(245,172,44)" fg:x="874623848" fg:w="96288864"/><text x="87.6247%" y="239.50">aoc_2024_megap..</text></g><g><title>num_integer::gcd (20,060,180 samples, 2.00%)</title><rect x="94.9900%" y="213" width="2.0040%" height="15" fill="rgb(236,23,11)" fg:x="950852532" fg:w="20060180"/><text x="95.2400%" y="223.50">n..</text></g><g><title>&lt;i32 as num_integer::Integer&gt;::gcd (20,060,180 samples, 2.00%)</title><rect x="94.9900%" y="197" width="2.0040%" height="15" fill="rgb(205,117,38)" fg:x="950852532" fg:w="20060180"/><text x="95.2400%" y="207.50">&lt;..</text></g><g><title>core::num::&lt;impl i32&gt;::trailing_zeros (1,003,009 samples, 0.10%)</title><rect x="96.8938%" y="181" width="0.1002%" height="15" fill="rgb(237,72,25)" fg:x="969909703" fg:w="1003009"/><text x="97.1438%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (1,003,009 samples, 0.10%)</title><rect x="96.8938%" y="165" width="0.1002%" height="15" fill="rgb(244,70,9)" fg:x="969909703" fg:w="1003009"/><text x="97.1438%" y="175.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (2,006,018 samples, 0.20%)</title><rect x="96.9940%" y="581" width="0.2004%" height="15" fill="rgb(217,125,39)" fg:x="970912712" fg:w="2006018"/><text x="97.2440%" y="591.50"></text></g><g><title>&lt;ascii::ascii_char::AsciiChar as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.20%)</title><rect x="96.9940%" y="565" width="0.2004%" height="15" fill="rgb(235,36,10)" fg:x="970912712" fg:w="2006018"/><text x="97.2440%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (25,075,225 samples, 2.51%)</title><rect x="96.9940%" y="629" width="2.5050%" height="15" fill="rgb(251,123,47)" fg:x="970912712" fg:w="25075225"/><text x="97.2440%" y="639.50">co..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (25,075,225 samples, 2.51%)</title><rect x="96.9940%" y="613" width="2.5050%" height="15" fill="rgb(221,13,13)" fg:x="970912712" fg:w="25075225"/><text x="97.2440%" y="623.50">&lt;T..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (25,075,225 samples, 2.51%)</title><rect x="96.9940%" y="597" width="2.5050%" height="15" fill="rgb(238,131,9)" fg:x="970912712" fg:w="25075225"/><text x="97.2440%" y="607.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23,069,207 samples, 2.30%)</title><rect x="97.1944%" y="581" width="2.3046%" height="15" fill="rgb(211,50,8)" fg:x="972918730" fg:w="23069207"/><text x="97.4444%" y="591.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (21,063,189 samples, 2.10%)</title><rect x="97.3948%" y="565" width="2.1042%" height="15" fill="rgb(245,182,24)" fg:x="974924748" fg:w="21063189"/><text x="97.6448%" y="575.50">&lt;..</text></g><g><title>aoc_2024_megaproject::Day::run_part (997,993,955 samples, 99.70%)</title><rect x="0.0000%" y="661" width="99.6994%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="671.50">aoc_2024_megaproject::Day::run_part</text></g><g><title>aoc_2024_megaproject::problems::day8::Part::calculate (997,993,955 samples, 99.70%)</title><rect x="0.0000%" y="645" width="99.6994%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="997993955"/><text x="0.2500%" y="655.50">aoc_2024_megaproject::problems::day8::Part::calculate</text></g><g><title>tinyvec::tinyvec::TinyVec&lt;A&gt;::push (2,006,018 samples, 0.20%)</title><rect x="99.4990%" y="629" width="0.2004%" height="15" fill="rgb(213,55,15)" fg:x="995987937" fg:w="2006018"/><text x="99.7490%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="661" width="0.1002%" height="15" fill="rgb(209,9,3)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="645" width="0.1002%" height="15" fill="rgb(230,59,30)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="655.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="629" width="0.1002%" height="15" fill="rgb(209,121,21)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="613" width="0.1002%" height="15" fill="rgb(220,109,13)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="623.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="597" width="0.1002%" height="15" fill="rgb(232,18,1)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="607.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="581" width="0.1002%" height="15" fill="rgb(215,41,42)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="591.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="565" width="0.1002%" height="15" fill="rgb(224,123,36)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="549" width="0.1002%" height="15" fill="rgb(240,125,3)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="559.50"></text></g><g><title>core::str::converts::from_utf8 (1,003,009 samples, 0.10%)</title><rect x="99.6994%" y="533" width="0.1002%" height="15" fill="rgb(205,98,50)" fg:x="997993955" fg:w="1003009"/><text x="99.9494%" y="543.50"></text></g><g><title>_start (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="949" width="99.8998%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="933" width="99.8998%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>[libc.so.6] (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="917" width="99.8998%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="927.50">[libc.so.6]</text></g><g><title>main (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="901" width="99.8998%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="885" width="99.8998%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="869" width="99.8998%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="853" width="99.8998%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="837" width="99.8998%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="821" width="99.8998%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="805" width="99.8998%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="789" width="99.8998%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="773" width="99.8998%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="757" width="99.8998%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="741" width="99.8998%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="751.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="725" width="99.8998%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="735.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="709" width="99.8998%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2024_megaproject::main (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="693" width="99.8998%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="703.50">aoc_2024_megaproject::main</text></g><g><title>aoc_2024_megaproject::repeat_part (999,999,973 samples, 99.90%)</title><rect x="0.0000%" y="677" width="99.8998%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="999999973"/><text x="0.2500%" y="687.50">aoc_2024_megaproject::repeat_part</text></g><g><title>regex::regex::string::Regex::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="661" width="0.1002%" height="15" fill="rgb(252,8,32)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="671.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="645" width="0.1002%" height="15" fill="rgb(223,20,43)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="655.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="629" width="0.1002%" height="15" fill="rgb(229,81,49)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="639.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="613" width="0.1002%" height="15" fill="rgb(236,28,36)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="623.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="597" width="0.1002%" height="15" fill="rgb(249,185,26)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="607.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="581" width="0.1002%" height="15" fill="rgb(249,174,33)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="591.50"></text></g><g><title>regex_automata::meta::strategy::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="565" width="0.1002%" height="15" fill="rgb(233,201,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="575.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="549" width="0.1002%" height="15" fill="rgb(221,78,26)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="533" width="0.1002%" height="15" fill="rgb(250,127,30)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="517" width="0.1002%" height="15" fill="rgb(230,49,44)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="501" width="0.1002%" height="15" fill="rgb(229,67,23)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="485" width="0.1002%" height="15" fill="rgb(249,83,47)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="469" width="0.1002%" height="15" fill="rgb(215,43,3)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="453" width="0.1002%" height="15" fill="rgb(238,154,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="437" width="0.1002%" height="15" fill="rgb(219,56,2)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="421" width="0.1002%" height="15" fill="rgb(233,0,4)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="405" width="0.1002%" height="15" fill="rgb(235,30,7)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="389" width="0.1002%" height="15" fill="rgb(250,79,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="373" width="0.1002%" height="15" fill="rgb(211,146,34)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="357" width="0.1002%" height="15" fill="rgb(228,22,38)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="341" width="0.1002%" height="15" fill="rgb(235,168,5)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="325" width="0.1002%" height="15" fill="rgb(221,155,16)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="309" width="0.1002%" height="15" fill="rgb(215,215,53)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="293" width="0.1002%" height="15" fill="rgb(223,4,10)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="277" width="0.1002%" height="15" fill="rgb(234,103,6)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="261" width="0.1002%" height="15" fill="rgb(227,97,0)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="245" width="0.1002%" height="15" fill="rgb(234,150,53)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="229" width="0.1002%" height="15" fill="rgb(228,201,54)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="213" width="0.1002%" height="15" fill="rgb(222,22,37)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="223.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="197" width="0.1002%" height="15" fill="rgb(237,53,32)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="181" width="0.1002%" height="15" fill="rgb(233,25,53)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="165" width="0.1002%" height="15" fill="rgb(210,40,34)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="175.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="149" width="0.1002%" height="15" fill="rgb(241,220,44)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="159.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="133" width="0.1002%" height="15" fill="rgb(235,28,35)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="143.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="117" width="0.1002%" height="15" fill="rgb(210,56,17)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="127.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="101" width="0.1002%" height="15" fill="rgb(224,130,29)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="111.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="85" width="0.1002%" height="15" fill="rgb(235,212,8)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="95.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="69" width="0.1002%" height="15" fill="rgb(223,33,50)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="79.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="53" width="0.1002%" height="15" fill="rgb(219,149,13)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="63.50"></text></g><g><title>[unknown] (1,003,009 samples, 0.10%)</title><rect x="99.7996%" y="37" width="0.1002%" height="15" fill="rgb(250,156,29)" fg:x="998996964" fg:w="1003009"/><text x="100.0496%" y="47.50"></text></g><g><title>all (1,001,002,982 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="991.50"></text></g><g><title>aoc-2024-megapr (1,001,002,982 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="1001002982"/><text x="0.2500%" y="975.50">aoc-2024-megapr</text></g><g><title>std::env::args_os (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="949" width="0.1002%" height="15" fill="rgb(241,47,5)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="959.50"></text></g><g><title>std::sys::args::unix::args (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="933" width="0.1002%" height="15" fill="rgb(233,42,35)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="917" width="0.1002%" height="15" fill="rgb(231,13,6)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="901" width="0.1002%" height="15" fill="rgb(207,181,40)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="885" width="0.1002%" height="15" fill="rgb(254,173,49)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="869" width="0.1002%" height="15" fill="rgb(221,1,38)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="853" width="0.1002%" height="15" fill="rgb(206,124,46)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="837" width="0.1002%" height="15" fill="rgb(249,21,11)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="821" width="0.1002%" height="15" fill="rgb(222,201,40)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="805" width="0.1002%" height="15" fill="rgb(235,61,29)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="789" width="0.1002%" height="15" fill="rgb(219,207,3)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="799.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="773" width="0.1002%" height="15" fill="rgb(222,56,46)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="783.50"></text></g><g><title>malloc (1,003,009 samples, 0.10%)</title><rect x="99.8998%" y="757" width="0.1002%" height="15" fill="rgb(239,76,54)" fg:x="999999973" fg:w="1003009"/><text x="100.1498%" y="767.50"></text></g></svg></svg>